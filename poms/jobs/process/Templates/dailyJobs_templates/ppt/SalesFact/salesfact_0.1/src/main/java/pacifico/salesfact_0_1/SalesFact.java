// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pacifico.salesfact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: SalesFact Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class SalesFact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "SalesFact";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SalesFact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SalesFact.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_DimCustomer_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_DimStore_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_DimPayment_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_PosOrderLine_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_PosOrder_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_DimDate_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer date_key;

		public Integer getDate_key() {
			return this.date_key;
		}

		public Integer product_key;

		public Integer getProduct_key() {
			return this.product_key;
		}

		public Integer customer_key;

		public Integer getCustomer_key() {
			return this.customer_key;
		}

		public Integer store_key;

		public Integer getStore_key() {
			return this.store_key;
		}

		public Integer payment_method_key;

		public Integer getPayment_method_key() {
			return this.payment_method_key;
		}

		public Integer pos_transaction;

		public Integer getPos_transaction() {
			return this.pos_transaction;
		}

		public Integer sales_quantity;

		public Integer getSales_quantity() {
			return this.sales_quantity;
		}

		public Float regular_unit_price;

		public Float getRegular_unit_price() {
			return this.regular_unit_price;
		}

		public Float discount_unit_price;

		public Float getDiscount_unit_price() {
			return this.discount_unit_price;
		}

		public Float net_unit_price;

		public Float getNet_unit_price() {
			return this.net_unit_price;
		}

		public Float extended_discount_dollar_amount;

		public Float getExtended_discount_dollar_amount() {
			return this.extended_discount_dollar_amount;
		}

		public Float extended_sales_dollar_amount;

		public Float getExtended_sales_dollar_amount() {
			return this.extended_sales_dollar_amount;
		}

		public Float extended_gross_profit_dollar_amount;

		public Float getExtended_gross_profit_dollar_amount() {
			return this.extended_gross_profit_dollar_amount;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.date_key = readInteger(dis);

					this.product_key = readInteger(dis);

					this.customer_key = readInteger(dis);

					this.store_key = readInteger(dis);

					this.payment_method_key = readInteger(dis);

					this.pos_transaction = readInteger(dis);

					this.sales_quantity = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.regular_unit_price = null;
					} else {
						this.regular_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount_unit_price = null;
					} else {
						this.discount_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.net_unit_price = null;
					} else {
						this.net_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_discount_dollar_amount = null;
					} else {
						this.extended_discount_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_sales_dollar_amount = null;
					} else {
						this.extended_sales_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_gross_profit_dollar_amount = null;
					} else {
						this.extended_gross_profit_dollar_amount = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.date_key = readInteger(dis);

					this.product_key = readInteger(dis);

					this.customer_key = readInteger(dis);

					this.store_key = readInteger(dis);

					this.payment_method_key = readInteger(dis);

					this.pos_transaction = readInteger(dis);

					this.sales_quantity = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.regular_unit_price = null;
					} else {
						this.regular_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount_unit_price = null;
					} else {
						this.discount_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.net_unit_price = null;
					} else {
						this.net_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_discount_dollar_amount = null;
					} else {
						this.extended_discount_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_sales_dollar_amount = null;
					} else {
						this.extended_sales_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_gross_profit_dollar_amount = null;
					} else {
						this.extended_gross_profit_dollar_amount = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.date_key, dos);

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.customer_key, dos);

				// Integer

				writeInteger(this.store_key, dos);

				// Integer

				writeInteger(this.payment_method_key, dos);

				// Integer

				writeInteger(this.pos_transaction, dos);

				// Integer

				writeInteger(this.sales_quantity, dos);

				// Float

				if (this.regular_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.regular_unit_price);
				}

				// Float

				if (this.discount_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount_unit_price);
				}

				// Float

				if (this.net_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.net_unit_price);
				}

				// Float

				if (this.extended_discount_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_discount_dollar_amount);
				}

				// Float

				if (this.extended_sales_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_sales_dollar_amount);
				}

				// Float

				if (this.extended_gross_profit_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_gross_profit_dollar_amount);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.date_key, dos);

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.customer_key, dos);

				// Integer

				writeInteger(this.store_key, dos);

				// Integer

				writeInteger(this.payment_method_key, dos);

				// Integer

				writeInteger(this.pos_transaction, dos);

				// Integer

				writeInteger(this.sales_quantity, dos);

				// Float

				if (this.regular_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.regular_unit_price);
				}

				// Float

				if (this.discount_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount_unit_price);
				}

				// Float

				if (this.net_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.net_unit_price);
				}

				// Float

				if (this.extended_discount_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_discount_dollar_amount);
				}

				// Float

				if (this.extended_sales_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_sales_dollar_amount);
				}

				// Float

				if (this.extended_gross_profit_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_gross_profit_dollar_amount);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_key=" + String.valueOf(date_key));
			sb.append(",product_key=" + String.valueOf(product_key));
			sb.append(",customer_key=" + String.valueOf(customer_key));
			sb.append(",store_key=" + String.valueOf(store_key));
			sb.append(",payment_method_key=" + String.valueOf(payment_method_key));
			sb.append(",pos_transaction=" + String.valueOf(pos_transaction));
			sb.append(",sales_quantity=" + String.valueOf(sales_quantity));
			sb.append(",regular_unit_price=" + String.valueOf(regular_unit_price));
			sb.append(",discount_unit_price=" + String.valueOf(discount_unit_price));
			sb.append(",net_unit_price=" + String.valueOf(net_unit_price));
			sb.append(",extended_discount_dollar_amount=" + String.valueOf(extended_discount_dollar_amount));
			sb.append(",extended_sales_dollar_amount=" + String.valueOf(extended_sales_dollar_amount));
			sb.append(",extended_gross_profit_dollar_amount=" + String.valueOf(extended_gross_profit_dollar_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SalesFactStruct implements routines.system.IPersistableRow<SalesFactStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer date_key;

		public Integer getDate_key() {
			return this.date_key;
		}

		public Integer product_key;

		public Integer getProduct_key() {
			return this.product_key;
		}

		public Integer customer_key;

		public Integer getCustomer_key() {
			return this.customer_key;
		}

		public Integer store_key;

		public Integer getStore_key() {
			return this.store_key;
		}

		public Integer payment_method_key;

		public Integer getPayment_method_key() {
			return this.payment_method_key;
		}

		public Integer pos_transaction;

		public Integer getPos_transaction() {
			return this.pos_transaction;
		}

		public Integer sales_quantity;

		public Integer getSales_quantity() {
			return this.sales_quantity;
		}

		public Float regular_unit_price;

		public Float getRegular_unit_price() {
			return this.regular_unit_price;
		}

		public Float discount_unit_price;

		public Float getDiscount_unit_price() {
			return this.discount_unit_price;
		}

		public Float net_unit_price;

		public Float getNet_unit_price() {
			return this.net_unit_price;
		}

		public Float extended_discount_dollar_amount;

		public Float getExtended_discount_dollar_amount() {
			return this.extended_discount_dollar_amount;
		}

		public Float extended_sales_dollar_amount;

		public Float getExtended_sales_dollar_amount() {
			return this.extended_sales_dollar_amount;
		}

		public Float extended_gross_profit_dollar_amount;

		public Float getExtended_gross_profit_dollar_amount() {
			return this.extended_gross_profit_dollar_amount;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.date_key = readInteger(dis);

					this.product_key = readInteger(dis);

					this.customer_key = readInteger(dis);

					this.store_key = readInteger(dis);

					this.payment_method_key = readInteger(dis);

					this.pos_transaction = readInteger(dis);

					this.sales_quantity = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.regular_unit_price = null;
					} else {
						this.regular_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount_unit_price = null;
					} else {
						this.discount_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.net_unit_price = null;
					} else {
						this.net_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_discount_dollar_amount = null;
					} else {
						this.extended_discount_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_sales_dollar_amount = null;
					} else {
						this.extended_sales_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_gross_profit_dollar_amount = null;
					} else {
						this.extended_gross_profit_dollar_amount = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.date_key = readInteger(dis);

					this.product_key = readInteger(dis);

					this.customer_key = readInteger(dis);

					this.store_key = readInteger(dis);

					this.payment_method_key = readInteger(dis);

					this.pos_transaction = readInteger(dis);

					this.sales_quantity = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.regular_unit_price = null;
					} else {
						this.regular_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount_unit_price = null;
					} else {
						this.discount_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.net_unit_price = null;
					} else {
						this.net_unit_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_discount_dollar_amount = null;
					} else {
						this.extended_discount_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_sales_dollar_amount = null;
					} else {
						this.extended_sales_dollar_amount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.extended_gross_profit_dollar_amount = null;
					} else {
						this.extended_gross_profit_dollar_amount = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.date_key, dos);

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.customer_key, dos);

				// Integer

				writeInteger(this.store_key, dos);

				// Integer

				writeInteger(this.payment_method_key, dos);

				// Integer

				writeInteger(this.pos_transaction, dos);

				// Integer

				writeInteger(this.sales_quantity, dos);

				// Float

				if (this.regular_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.regular_unit_price);
				}

				// Float

				if (this.discount_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount_unit_price);
				}

				// Float

				if (this.net_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.net_unit_price);
				}

				// Float

				if (this.extended_discount_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_discount_dollar_amount);
				}

				// Float

				if (this.extended_sales_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_sales_dollar_amount);
				}

				// Float

				if (this.extended_gross_profit_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_gross_profit_dollar_amount);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.date_key, dos);

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.customer_key, dos);

				// Integer

				writeInteger(this.store_key, dos);

				// Integer

				writeInteger(this.payment_method_key, dos);

				// Integer

				writeInteger(this.pos_transaction, dos);

				// Integer

				writeInteger(this.sales_quantity, dos);

				// Float

				if (this.regular_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.regular_unit_price);
				}

				// Float

				if (this.discount_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount_unit_price);
				}

				// Float

				if (this.net_unit_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.net_unit_price);
				}

				// Float

				if (this.extended_discount_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_discount_dollar_amount);
				}

				// Float

				if (this.extended_sales_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_sales_dollar_amount);
				}

				// Float

				if (this.extended_gross_profit_dollar_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.extended_gross_profit_dollar_amount);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_key=" + String.valueOf(date_key));
			sb.append(",product_key=" + String.valueOf(product_key));
			sb.append(",customer_key=" + String.valueOf(customer_key));
			sb.append(",store_key=" + String.valueOf(store_key));
			sb.append(",payment_method_key=" + String.valueOf(payment_method_key));
			sb.append(",pos_transaction=" + String.valueOf(pos_transaction));
			sb.append(",sales_quantity=" + String.valueOf(sales_quantity));
			sb.append(",regular_unit_price=" + String.valueOf(regular_unit_price));
			sb.append(",discount_unit_price=" + String.valueOf(discount_unit_price));
			sb.append(",net_unit_price=" + String.valueOf(net_unit_price));
			sb.append(",extended_discount_dollar_amount=" + String.valueOf(extended_discount_dollar_amount));
			sb.append(",extended_sales_dollar_amount=" + String.valueOf(extended_sales_dollar_amount));
			sb.append(",extended_gross_profit_dollar_amount=" + String.valueOf(extended_gross_profit_dollar_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalesFactStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DimProductStruct implements routines.system.IPersistableRow<DimProductStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer product_key;

		public Integer getProduct_key() {
			return this.product_key;
		}

		public Integer attribute_group_key;

		public Integer getAttribute_group_key() {
			return this.attribute_group_key;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_description;

		public String getProduct_description() {
			return this.product_description;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String category_description;

		public String getCategory_description() {
			return this.category_description;
		}

		public Integer weight;

		public Integer getWeight() {
			return this.weight;
		}

		public String volume;

		public String getVolume() {
			return this.volume;
		}

		public String barcode;

		public String getBarcode() {
			return this.barcode;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.product_key = readInteger(dis);

					this.attribute_group_key = readInteger(dis);

					this.product_name = readString(dis);

					this.product_description = readString(dis);

					this.category = readString(dis);

					this.category_description = readString(dis);

					this.weight = readInteger(dis);

					this.volume = readString(dis);

					this.barcode = readString(dis);

					this.product_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.product_key = readInteger(dis);

					this.attribute_group_key = readInteger(dis);

					this.product_name = readString(dis);

					this.product_description = readString(dis);

					this.category = readString(dis);

					this.category_description = readString(dis);

					this.weight = readInteger(dis);

					this.volume = readString(dis);

					this.barcode = readString(dis);

					this.product_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.attribute_group_key, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_description, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.category_description, dos);

				// Integer

				writeInteger(this.weight, dos);

				// String

				writeString(this.volume, dos);

				// String

				writeString(this.barcode, dos);

				// String

				writeString(this.product_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.attribute_group_key, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_description, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.category_description, dos);

				// Integer

				writeInteger(this.weight, dos);

				// String

				writeString(this.volume, dos);

				// String

				writeString(this.barcode, dos);

				// String

				writeString(this.product_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("product_key=" + String.valueOf(product_key));
			sb.append(",attribute_group_key=" + String.valueOf(attribute_group_key));
			sb.append(",product_name=" + product_name);
			sb.append(",product_description=" + product_description);
			sb.append(",category=" + category);
			sb.append(",category_description=" + category_description);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",volume=" + volume);
			sb.append(",barcode=" + barcode);
			sb.append(",product_code=" + product_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DimProductStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer product_key;

		public Integer getProduct_key() {
			return this.product_key;
		}

		public Integer attribute_group_key;

		public Integer getAttribute_group_key() {
			return this.attribute_group_key;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_description;

		public String getProduct_description() {
			return this.product_description;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String category_description;

		public String getCategory_description() {
			return this.category_description;
		}

		public Integer weight;

		public Integer getWeight() {
			return this.weight;
		}

		public String volume;

		public String getVolume() {
			return this.volume;
		}

		public String barcode;

		public String getBarcode() {
			return this.barcode;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.product_key = readInteger(dis);

					this.attribute_group_key = readInteger(dis);

					this.product_name = readString(dis);

					this.product_description = readString(dis);

					this.category = readString(dis);

					this.category_description = readString(dis);

					this.weight = readInteger(dis);

					this.volume = readString(dis);

					this.barcode = readString(dis);

					this.product_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.product_key = readInteger(dis);

					this.attribute_group_key = readInteger(dis);

					this.product_name = readString(dis);

					this.product_description = readString(dis);

					this.category = readString(dis);

					this.category_description = readString(dis);

					this.weight = readInteger(dis);

					this.volume = readString(dis);

					this.barcode = readString(dis);

					this.product_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.attribute_group_key, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_description, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.category_description, dos);

				// Integer

				writeInteger(this.weight, dos);

				// String

				writeString(this.volume, dos);

				// String

				writeString(this.barcode, dos);

				// String

				writeString(this.product_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.product_key, dos);

				// Integer

				writeInteger(this.attribute_group_key, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_description, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.category_description, dos);

				// Integer

				writeInteger(this.weight, dos);

				// String

				writeString(this.volume, dos);

				// String

				writeString(this.barcode, dos);

				// String

				writeString(this.product_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("product_key=" + String.valueOf(product_key));
			sb.append(",attribute_group_key=" + String.valueOf(attribute_group_key));
			sb.append(",product_name=" + product_name);
			sb.append(",product_description=" + product_description);
			sb.append(",category=" + category);
			sb.append(",category_description=" + category_description);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",volume=" + volume);
			sb.append(",barcode=" + barcode);
			sb.append(",product_code=" + product_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_5Process(globalMap);
				tFileInputDelimited_6Process(globalMap);
				tFileInputDelimited_7Process(globalMap);

				DimProductStruct DimProduct = new DimProductStruct();
				SalesFactStruct SalesFact = new SalesFactStruct();
				SalesFactStruct row1 = SalesFact;

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/SalesFact.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("date_key");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("product_key");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("customer_key");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("store_key");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("payment_method_key");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("pos_transaction");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sales_quantity");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("regular_unit_price");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("discount_unit_price");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("net_unit_price");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("extended_discount_dollar_amount");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("extended_sales_dollar_amount");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("extended_gross_profit_dollar_amount");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SalesFact");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[13];

					public void addRow(String[] row) {

						for (int i = 0; i < 13; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 12 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 12 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[12] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "date_key", "product_key", "customer_key", "store_key",
						"payment_method_key", "pos_transaction", "sales_quantity", "regular_unit_price",
						"discount_unit_price", "net_unit_price", "extended_discount_dollar_amount",
						"extended_sales_dollar_amount", "extended_gross_profit_dollar_amount", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DimProduct");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimCustomerStruct> tHash_Lookup_DimCustomer = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimCustomerStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimCustomerStruct>) globalMap
						.get("tHash_Lookup_DimCustomer"));

				tHash_Lookup_DimCustomer.initGet();

				DimCustomerStruct DimCustomerHashKey = new DimCustomerStruct();
				DimCustomerStruct DimCustomerDefault = new DimCustomerStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct> tHash_Lookup_DimStore = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct>) globalMap
						.get("tHash_Lookup_DimStore"));

				tHash_Lookup_DimStore.initGet();

				DimStoreStruct DimStoreHashKey = new DimStoreStruct();
				DimStoreStruct DimStoreDefault = new DimStoreStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimPaymentStruct> tHash_Lookup_DimPayment = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimPaymentStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimPaymentStruct>) globalMap
						.get("tHash_Lookup_DimPayment"));

				tHash_Lookup_DimPayment.initGet();

				DimPaymentStruct DimPaymentHashKey = new DimPaymentStruct();
				DimPaymentStruct DimPaymentDefault = new DimPaymentStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct> tHash_Lookup_PosOrderLine = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct>) globalMap
						.get("tHash_Lookup_PosOrderLine"));

				tHash_Lookup_PosOrderLine.initGet();

				PosOrderLineStruct PosOrderLineHashKey = new PosOrderLineStruct();
				PosOrderLineStruct PosOrderLineDefault = new PosOrderLineStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct> tHash_Lookup_PosOrder = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct>) globalMap
						.get("tHash_Lookup_PosOrder"));

				PosOrderStruct PosOrderHashKey = new PosOrderStruct();
				PosOrderStruct PosOrderDefault = new PosOrderStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct> tHash_Lookup_DimDate = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct>) globalMap
						.get("tHash_Lookup_DimDate"));

				DimDateStruct DimDateHashKey = new DimDateStruct();
				DimDateStruct DimDateDefault = new DimDateStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalesFactStruct SalesFact_tmp = new SalesFactStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimProduct.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimProduct.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						DimProduct = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						DimProduct = new DimProductStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									DimProduct.product_key = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"product_key", "DimProduct", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								DimProduct.product_key = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									DimProduct.attribute_group_key = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"attribute_group_key", "DimProduct", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								DimProduct.attribute_group_key = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							DimProduct.product_name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							DimProduct.product_description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							DimProduct.category = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							DimProduct.category_description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									DimProduct.weight = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"weight", "DimProduct", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								DimProduct.weight = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							DimProduct.volume = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							DimProduct.barcode = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							DimProduct.product_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							DimProduct = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "DimProduct"
						if (DimProduct != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "DimProduct"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "DimCustomer"
							///////////////////////////////////////////////

							boolean forceLoopDimCustomer = false;

							DimCustomerStruct DimCustomerObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								tHash_Lookup_DimCustomer.lookup(DimCustomerHashKey);

								if (!tHash_Lookup_DimCustomer.hasNext()) { // G_TM_M_090

									forceLoopDimCustomer = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLoopDimCustomer = true;
							} // G 21

							DimCustomerStruct DimCustomer = null;

							while ((tHash_Lookup_DimCustomer != null && tHash_Lookup_DimCustomer.hasNext())
									|| forceLoopDimCustomer) { // G_TM_M_043

								// CALL close loop of lookup 'DimCustomer'

								DimCustomerStruct fromLookup_DimCustomer = null;
								DimCustomer = DimCustomerDefault;

								if (!forceLoopDimCustomer) { // G 46

									fromLookup_DimCustomer = tHash_Lookup_DimCustomer.next();

									if (fromLookup_DimCustomer != null) {
										DimCustomer = fromLookup_DimCustomer;
									}

								} // G 46

								forceLoopDimCustomer = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "DimStore"
								///////////////////////////////////////////////

								boolean forceLoopDimStore = false;

								DimStoreStruct DimStoreObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									tHash_Lookup_DimStore.lookup(DimStoreHashKey);

									if (!tHash_Lookup_DimStore.hasNext()) { // G_TM_M_090

										forceLoopDimStore = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLoopDimStore = true;
								} // G 21

								DimStoreStruct DimStore = null;

								while ((tHash_Lookup_DimStore != null && tHash_Lookup_DimStore.hasNext())
										|| forceLoopDimStore) { // G_TM_M_043

									// CALL close loop of lookup 'DimStore'

									DimStoreStruct fromLookup_DimStore = null;
									DimStore = DimStoreDefault;

									if (!forceLoopDimStore) { // G 46

										fromLookup_DimStore = tHash_Lookup_DimStore.next();

										if (fromLookup_DimStore != null) {
											DimStore = fromLookup_DimStore;
										}

									} // G 46

									forceLoopDimStore = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "DimPayment"
									///////////////////////////////////////////////

									boolean forceLoopDimPayment = false;

									DimPaymentStruct DimPaymentObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										tHash_Lookup_DimPayment.lookup(DimPaymentHashKey);

										if (!tHash_Lookup_DimPayment.hasNext()) { // G_TM_M_090

											forceLoopDimPayment = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLoopDimPayment = true;
									} // G 21

									DimPaymentStruct DimPayment = null;

									while ((tHash_Lookup_DimPayment != null && tHash_Lookup_DimPayment.hasNext())
											|| forceLoopDimPayment) { // G_TM_M_043

										// CALL close loop of lookup 'DimPayment'

										DimPaymentStruct fromLookup_DimPayment = null;
										DimPayment = DimPaymentDefault;

										if (!forceLoopDimPayment) { // G 46

											fromLookup_DimPayment = tHash_Lookup_DimPayment.next();

											if (fromLookup_DimPayment != null) {
												DimPayment = fromLookup_DimPayment;
											}

										} // G 46

										forceLoopDimPayment = false;

										///////////////////////////////////////////////
										// Starting Lookup Table "PosOrderLine"
										///////////////////////////////////////////////

										boolean forceLoopPosOrderLine = false;

										PosOrderLineStruct PosOrderLineObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

											tHash_Lookup_PosOrderLine.lookup(PosOrderLineHashKey);

											if (!tHash_Lookup_PosOrderLine.hasNext()) { // G_TM_M_090

												forceLoopPosOrderLine = true;

											} // G_TM_M_090

										} // G_TM_M_020

										else { // G 20 - G 21
											forceLoopPosOrderLine = true;
										} // G 21

										PosOrderLineStruct PosOrderLine = null;

										while ((tHash_Lookup_PosOrderLine != null
												&& tHash_Lookup_PosOrderLine.hasNext()) || forceLoopPosOrderLine) { // G_TM_M_043

											// CALL close loop of lookup 'PosOrderLine'

											PosOrderLineStruct fromLookup_PosOrderLine = null;
											PosOrderLine = PosOrderLineDefault;

											if (!forceLoopPosOrderLine) { // G 46

												fromLookup_PosOrderLine = tHash_Lookup_PosOrderLine.next();

												if (fromLookup_PosOrderLine != null) {
													PosOrderLine = fromLookup_PosOrderLine;
												}

											} // G 46

											forceLoopPosOrderLine = false;

											///////////////////////////////////////////////
											// Starting Lookup Table "PosOrder"
											///////////////////////////////////////////////

											boolean forceLoopPosOrder = false;

											PosOrderStruct PosOrderObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_1 = false;

												PosOrderHashKey.id = PosOrderLine.order_id;

												PosOrderHashKey.hashCodeDirty = true;

												tHash_Lookup_PosOrder.lookup(PosOrderHashKey);

												if (!tHash_Lookup_PosOrder.hasNext()) { // G_TM_M_090

													rejectedInnerJoin_tMap_1 = true;

												} // G_TM_M_090

											} // G_TM_M_020

											if (tHash_Lookup_PosOrder != null
													&& tHash_Lookup_PosOrder.getCount(PosOrderHashKey) > 1) { // G 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the
												// lookup 'PosOrder' and it contains more one result from keys :
												// PosOrder.id = '" + PosOrderHashKey.id + "'");
											} // G 071

											PosOrderStruct PosOrder = null;

											PosOrderStruct fromLookup_PosOrder = null;
											PosOrder = PosOrderDefault;

											if (tHash_Lookup_PosOrder != null && tHash_Lookup_PosOrder.hasNext()) { // G
																													// 099

												fromLookup_PosOrder = tHash_Lookup_PosOrder.next();

											} // G 099

											if (fromLookup_PosOrder != null) {
												PosOrder = fromLookup_PosOrder;
											}

											///////////////////////////////////////////////
											// Starting Lookup Table "DimDate"
											///////////////////////////////////////////////

											boolean forceLoopDimDate = false;

											DimDateStruct DimDateObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_1 = false;

												DimDateHashKey.Date = PosOrderLine.create_date == null ? null
														: new java.util.Date(PosOrderLine.create_date.getTime());

												DimDateHashKey.hashCodeDirty = true;

												tHash_Lookup_DimDate.lookup(DimDateHashKey);

												if (!tHash_Lookup_DimDate.hasNext()) { // G_TM_M_090

													rejectedInnerJoin_tMap_1 = true;

												} // G_TM_M_090

											} // G_TM_M_020

											if (tHash_Lookup_DimDate != null
													&& tHash_Lookup_DimDate.getCount(DimDateHashKey) > 1) { // G 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the
												// lookup 'DimDate' and it contains more one result from keys :
												// DimDate.Date = '" + DimDateHashKey.Date + "'");
											} // G 071

											DimDateStruct DimDate = null;

											DimDateStruct fromLookup_DimDate = null;
											DimDate = DimDateDefault;

											if (tHash_Lookup_DimDate != null && tHash_Lookup_DimDate.hasNext()) { // G
																													// 099

												fromLookup_DimDate = tHash_Lookup_DimDate.next();

											} // G 099

											if (fromLookup_DimDate != null) {
												DimDate = fromLookup_DimDate;
											}

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
												// ###############################
												// # Output tables

												SalesFact = null;

												if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'SalesFact'
													SalesFact_tmp.date_key = DimDate.DateNum;
													SalesFact_tmp.product_key = DimProduct.product_key;
													SalesFact_tmp.customer_key = DimCustomer.customer_key;
													SalesFact_tmp.store_key = DimStore.store_key;
													SalesFact_tmp.payment_method_key = DimPayment.payment_method_key;
													SalesFact_tmp.pos_transaction = PosOrderLine.order_id;
													SalesFact_tmp.sales_quantity = PosOrderLine.qty;
													SalesFact_tmp.regular_unit_price = PosOrderLine.price_unit;
													SalesFact_tmp.discount_unit_price = PosOrderLine.discount
															* PosOrderLine.price_unit;
													SalesFact_tmp.net_unit_price = (PosOrderLine.price_unit
															+ (PosOrderLine.price_unit * PosOrder.amount_tax)
															- PosOrderLine.price_unit * PosOrderLine.discount)
															* PosOrderLine.qty;
													SalesFact_tmp.extended_discount_dollar_amount = (PosOrderLine.price_unit
															- (PosOrderLine.discount * PosOrderLine.price_unit))
															* PosOrderLine.qty;
													SalesFact_tmp.extended_sales_dollar_amount = ((PosOrderLine.price_unit
															+ (PosOrderLine.price_unit * PosOrder.amount_tax)
															- PosOrderLine.price_unit * PosOrderLine.discount)
															* PosOrderLine.qty) * PosOrderLine.qty;
													SalesFact_tmp.extended_gross_profit_dollar_amount = (((PosOrderLine.price_unit
															+ (PosOrderLine.price_unit * PosOrder.amount_tax)
															- PosOrderLine.price_unit * PosOrderLine.discount)
															* PosOrderLine.qty) - PosOrderLine.price_unit)
															* PosOrderLine.qty;
													SalesFact = SalesFact_tmp;
												} // closing inner join bracket (2)
// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_1 = false;

											tos_count_tMap_1++;

											/**
											 * [tMap_1 main ] stop
											 */

											/**
											 * [tMap_1 process_data_begin ] start
											 */

											currentComponent = "tMap_1";

											/**
											 * [tMap_1 process_data_begin ] stop
											 */
// Start of branch "SalesFact"
											if (SalesFact != null) {

												/**
												 * [tLogRow_1 main ] start
												 */

												currentComponent = "tLogRow_1";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1

															, "SalesFact"

													);
												}

///////////////////////		

												String[] row_tLogRow_1 = new String[13];

												if (SalesFact.date_key != null) { //
													row_tLogRow_1[0] = String.valueOf(SalesFact.date_key);

												} //

												if (SalesFact.product_key != null) { //
													row_tLogRow_1[1] = String.valueOf(SalesFact.product_key);

												} //

												if (SalesFact.customer_key != null) { //
													row_tLogRow_1[2] = String.valueOf(SalesFact.customer_key);

												} //

												if (SalesFact.store_key != null) { //
													row_tLogRow_1[3] = String.valueOf(SalesFact.store_key);

												} //

												if (SalesFact.payment_method_key != null) { //
													row_tLogRow_1[4] = String.valueOf(SalesFact.payment_method_key);

												} //

												if (SalesFact.pos_transaction != null) { //
													row_tLogRow_1[5] = String.valueOf(SalesFact.pos_transaction);

												} //

												if (SalesFact.sales_quantity != null) { //
													row_tLogRow_1[6] = String.valueOf(SalesFact.sales_quantity);

												} //

												if (SalesFact.regular_unit_price != null) { //
													row_tLogRow_1[7] = FormatterUtils
															.formatUnwithE(SalesFact.regular_unit_price);

												} //

												if (SalesFact.discount_unit_price != null) { //
													row_tLogRow_1[8] = FormatterUtils
															.formatUnwithE(SalesFact.discount_unit_price);

												} //

												if (SalesFact.net_unit_price != null) { //
													row_tLogRow_1[9] = FormatterUtils
															.formatUnwithE(SalesFact.net_unit_price);

												} //

												if (SalesFact.extended_discount_dollar_amount != null) { //
													row_tLogRow_1[10] = FormatterUtils
															.formatUnwithE(SalesFact.extended_discount_dollar_amount);

												} //

												if (SalesFact.extended_sales_dollar_amount != null) { //
													row_tLogRow_1[11] = FormatterUtils
															.formatUnwithE(SalesFact.extended_sales_dollar_amount);

												} //

												if (SalesFact.extended_gross_profit_dollar_amount != null) { //
													row_tLogRow_1[12] = FormatterUtils.formatUnwithE(
															SalesFact.extended_gross_profit_dollar_amount);

												} //

												util_tLogRow_1.addRow(row_tLogRow_1);
												nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

												row1 = SalesFact;

												tos_count_tLogRow_1++;

												/**
												 * [tLogRow_1 main ] stop
												 */

												/**
												 * [tLogRow_1 process_data_begin ] start
												 */

												currentComponent = "tLogRow_1";

												/**
												 * [tLogRow_1 process_data_begin ] stop
												 */

												/**
												 * [tFileOutputDelimited_1 main ] start
												 */

												currentComponent = "tFileOutputDelimited_1";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1

															, "row1"

													);
												}

												StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
												if (row1.date_key != null) {
													sb_tFileOutputDelimited_1.append(row1.date_key);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.product_key != null) {
													sb_tFileOutputDelimited_1.append(row1.product_key);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.customer_key != null) {
													sb_tFileOutputDelimited_1.append(row1.customer_key);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.store_key != null) {
													sb_tFileOutputDelimited_1.append(row1.store_key);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.payment_method_key != null) {
													sb_tFileOutputDelimited_1.append(row1.payment_method_key);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.pos_transaction != null) {
													sb_tFileOutputDelimited_1.append(row1.pos_transaction);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.sales_quantity != null) {
													sb_tFileOutputDelimited_1.append(row1.sales_quantity);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.regular_unit_price != null) {
													sb_tFileOutputDelimited_1.append(row1.regular_unit_price);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.discount_unit_price != null) {
													sb_tFileOutputDelimited_1.append(row1.discount_unit_price);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.net_unit_price != null) {
													sb_tFileOutputDelimited_1.append(row1.net_unit_price);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.extended_discount_dollar_amount != null) {
													sb_tFileOutputDelimited_1
															.append(row1.extended_discount_dollar_amount);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.extended_sales_dollar_amount != null) {
													sb_tFileOutputDelimited_1.append(row1.extended_sales_dollar_amount);
												}
												sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
												if (row1.extended_gross_profit_dollar_amount != null) {
													sb_tFileOutputDelimited_1
															.append(row1.extended_gross_profit_dollar_amount);
												}
												sb_tFileOutputDelimited_1
														.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

												nb_line_tFileOutputDelimited_1++;
												resourceMap.put("nb_line_tFileOutputDelimited_1",
														nb_line_tFileOutputDelimited_1);

												outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

												tos_count_tFileOutputDelimited_1++;

												/**
												 * [tFileOutputDelimited_1 main ] stop
												 */

												/**
												 * [tFileOutputDelimited_1 process_data_begin ] start
												 */

												currentComponent = "tFileOutputDelimited_1";

												/**
												 * [tFileOutputDelimited_1 process_data_begin ] stop
												 */

												/**
												 * [tFileOutputDelimited_1 process_data_end ] start
												 */

												currentComponent = "tFileOutputDelimited_1";

												/**
												 * [tFileOutputDelimited_1 process_data_end ] stop
												 */

												/**
												 * [tLogRow_1 process_data_end ] start
												 */

												currentComponent = "tLogRow_1";

												/**
												 * [tLogRow_1 process_data_end ] stop
												 */

											} // End of branch "SalesFact"

										} // close loop of lookup 'PosOrderLine' // G_TM_M_043

									} // close loop of lookup 'DimPayment' // G_TM_M_043

								} // close loop of lookup 'DimStore' // G_TM_M_043

							} // close loop of lookup 'DimCustomer' // G_TM_M_043

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "DimProduct"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimProduct.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_DimCustomer != null) {
					tHash_Lookup_DimCustomer.endGet();
				}
				globalMap.remove("tHash_Lookup_DimCustomer");

				if (tHash_Lookup_DimStore != null) {
					tHash_Lookup_DimStore.endGet();
				}
				globalMap.remove("tHash_Lookup_DimStore");

				if (tHash_Lookup_DimPayment != null) {
					tHash_Lookup_DimPayment.endGet();
				}
				globalMap.remove("tHash_Lookup_DimPayment");

				if (tHash_Lookup_PosOrderLine != null) {
					tHash_Lookup_PosOrderLine.endGet();
				}
				globalMap.remove("tHash_Lookup_PosOrderLine");

				if (tHash_Lookup_PosOrder != null) {
					tHash_Lookup_PosOrder.endGet();
				}
				globalMap.remove("tHash_Lookup_PosOrder");

				if (tHash_Lookup_DimDate != null) {
					tHash_Lookup_DimDate.endGet();
				}
				globalMap.remove("tHash_Lookup_DimDate");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DimProduct");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SalesFact");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_DimCustomer");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_DimStore");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_DimPayment");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_PosOrderLine");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_PosOrder");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_DimDate");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:RIgbGAQrzSKL2e3UwJy9+IbP9Ae0jgw3REBgAZDh8bAZ8SUIj3Z/XTDb1GBKvoMJkwVEEVdeIul1WV2V7Rws24hwX+w=");

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIAVMNG53PS4LMU54AJ", decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder
						.standard();

				final boolean useRegionEndpoint_tS3Connection_1 = false;
				final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
				final boolean enableAccelerateMode_tS3Connection_1 = false;
				final boolean enablePathStyleAccess_tS3Connection_1 = false;

				if (useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null
						&& !regionEndpoint_tS3Connection_1.isEmpty()) {
					builder_tS3Connection_1
							.withEndpointConfiguration(
									new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(
											regionEndpoint_tS3Connection_1, null))
							.withForceGlobalBucketAccessEnabled(true);
				} else {
					builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
							.withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try
																		// again in the correct region
				}

				if (enableAccelerateMode_tS3Connection_1) {
					builder_tS3Connection_1.withAccelerateModeEnabled(true);
				}

				builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1)
						.withClientConfiguration(cc_tS3Connection_1);

				if (useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
					builder_tS3Connection_1.enablePathStyleAccess();
				}

				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();

				// This method is just for test connection.
				conn_tS3Connection_1.getS3AccountOwner();

				globalMap.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Put_1Process(globalMap);

				/**
				 * [tS3Connection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_1 begin ] start
				 */

				ok_Hash.put("tS3Put_1", false);
				start_Hash.put("tS3Put_1", System.currentTimeMillis());

				currentComponent = "tS3Put_1";

				int tos_count_tS3Put_1 = 0;

				String millisecTime_tS3Put_1 = null;

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_1 = "SalesFact.csv";

				int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
				if (partSizeInBytes_tS3Put_1 < 5 << 20) {

					partSizeInBytes_tS3Put_1 = 5 << 20;
				}

				Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/SalesFact.csv";

				boolean useStream_tS3Put_1 = false;
				java.io.InputStream uploadStream_tS3Put_1 = null;

				com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;

				try {

					if (fileOrStream_tS3Put_1 instanceof String) {
						useStream_tS3Put_1 = false;
					} else if (fileOrStream_tS3Put_1 instanceof java.io.InputStream) {
						useStream_tS3Put_1 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_1) {
						java.io.File inputFile_tS3Put_1 = new java.io.File((String) fileOrStream_tS3Put_1);

						long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;

						tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder.standard()
								.withMinimumUploadPartSize((long) partSizeInBytes_tS3Put_1)
								.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
								.withS3Client(conn_tS3Put_1).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"libreriapacifico/presentation", key_tS3Put_1, inputFile_tS3Put_1)
										.withMetadata(objectMetadata_tS3Put_1);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1
								.upload(putRequest_tS3Put_1);

						upload_tS3Put_1.waitForCompletion();

					} else {
						java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream) fileOrStream_tS3Put_1);

						class S3StreamUtil {
							// read content to buffer as many as possible
							public int readFully(final java.io.InputStream input, final byte[] buffer)
									throws java.io.IOException {
								return readFully(input, buffer, 0, buffer.length);
							}

							public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset,
									final int length) throws java.io.IOException {
								if (length < 0) {
									throw new java.lang.IllegalArgumentException(
											"Length must not be negative: " + length);
								}

								int remaining = length;
								while (remaining > 0) {
									final int location = length - remaining;
									final int count = input.read(buffer, offset + location, remaining);
									if (count == -1) {
										break;
									}
									remaining -= count;
								}
								return length - remaining;
							}
						}

						S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
						byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
						long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
								buffer_tS3Put_1);

						boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;

						if (!multiUpload_tS3Put_1) {
							objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1, 0,
									Long.valueOf(curPartSize_tS3Put_1).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"libreriapacifico/presentation", key_tS3Put_1, uploadStream_tS3Put_1,
									objectMetadata_tS3Put_1);

							conn_tS3Put_1.putObject(putRequest_tS3Put_1);
						} else {
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"libreriapacifico/presentation", key_tS3Put_1, objectMetadata_tS3Put_1);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1
									.initiateMultipartUpload(putRequest_tS3Put_1);
							String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
							int partNumber_tS3Put_1 = 1;
							boolean streamHasNext_tS3Put_1 = true;
							byte[] probeAvailability_tS3Put_1 = new byte[1];
							try {
								while (streamHasNext_tS3Put_1) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("libreriapacifico/presentation").withKey(key_tS3Put_1)
											.withUploadId(uploadId_tS3Put_1).withPartNumber(partNumber_tS3Put_1)
											.withPartSize(curPartSize_tS3Put_1);
									uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
									streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
											probeAvailability_tS3Put_1));
									if (!streamHasNext_tS3Put_1) {
										uploadRequest_tS3Put_1.setLastPart(true);
									}

									partTags_tS3Put_1
											.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
									partNumber_tS3Put_1++;

									if (uploadStream_tS3Put_1 != null) {
										uploadStream_tS3Put_1.close();
									}
									buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
									curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
											buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1 - 1);
									buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
									probeAvailability_tS3Put_1 = new byte[1];
									uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"libreriapacifico/presentation", key_tS3Put_1, uploadId_tS3Put_1,
										partTags_tS3Put_1);
								conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
							} catch (java.lang.Exception uploadException_tS3Put_1) {
								globalMap.put("tS3Put_1_ERROR_MESSAGE", uploadException_tS3Put_1.getMessage());
								conn_tS3Put_1.abortMultipartUpload(
										new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"libreriapacifico/presentation", key_tS3Put_1, uploadId_tS3Put_1));
								throw uploadException_tS3Put_1;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_1) {
					globalMap.put("tS3Put_1_ERROR_MESSAGE", e_tS3Put_1.getMessage());

					System.err.println(e_tS3Put_1.getMessage());

				} finally {
					if (useStream_tS3Put_1 && uploadStream_tS3Put_1 != null) {
						uploadStream_tS3Put_1.close();
					}

					if (tm_tS3Put_1 != null) {
						tm_tS3Put_1.shutdownNow(false);
					}

				}

				/**
				 * [tS3Put_1 begin ] stop
				 */

				/**
				 * [tS3Put_1 main ] start
				 */

				currentComponent = "tS3Put_1";

				tos_count_tS3Put_1++;

				/**
				 * [tS3Put_1 main ] stop
				 */

				/**
				 * [tS3Put_1 process_data_begin ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_1 process_data_end ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_end ] stop
				 */

				/**
				 * [tS3Put_1 end ] start
				 */

				currentComponent = "tS3Put_1";

				ok_Hash.put("tS3Put_1", true);
				end_Hash.put("tS3Put_1", System.currentTimeMillis());

				/**
				 * [tS3Put_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_1 finally ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}

	public static class DimCustomerStruct implements routines.system.IPersistableRow<DimCustomerStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer customer_key;

		public Integer getCustomer_key() {
			return this.customer_key;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String company;

		public String getCompany() {
			return this.company;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String street_2;

		public String getStreet_2() {
			return this.street_2;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.customer_key = readInteger(dis);

					this.name = readString(dis);

					this.country = readString(dis);

					this.company = readString(dis);

					this.street = readString(dis);

					this.street_2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.customer_key = readInteger(dis);

					this.name = readString(dis);

					this.country = readString(dis);

					this.company = readString(dis);

					this.street = readString(dis);

					this.street_2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.customer_key, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.company, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.customer_key, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.company, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",name=" + name);
			sb.append(",country=" + country);
			sb.append(",company=" + company);
			sb.append(",street=" + street);
			sb.append(",street_2=" + street_2);
			sb.append(",city=" + city);
			sb.append(",state=" + state);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DimCustomerStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				DimCustomerStruct DimCustomer = new DimCustomerStruct();

				/**
				 * [tAdvancedHash_DimCustomer begin ] start
				 */

				ok_Hash.put("tAdvancedHash_DimCustomer", false);
				start_Hash.put("tAdvancedHash_DimCustomer", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_DimCustomer";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DimCustomer");
				}

				int tos_count_tAdvancedHash_DimCustomer = 0;

				// connection name:DimCustomer
				// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1)
				// outputs:(DimCustomer,DimCustomer) | target node:tAdvancedHash_DimCustomer -
				// inputs:(DimCustomer) outputs:()
				// linked node: tMap_1 -
				// inputs:(DimProduct,DimCustomer,DimStore,DimPayment,PosOrderLine,PosOrder,DimDate)
				// outputs:(SalesFact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DimCustomer = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimCustomerStruct> tHash_Lookup_DimCustomer = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<DimCustomerStruct>getLookup(matchingModeEnum_DimCustomer);

				globalMap.put("tHash_Lookup_DimCustomer", tHash_Lookup_DimCustomer);

				/**
				 * [tAdvancedHash_DimCustomer begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimCustomer.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimCustomer.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						DimCustomer = null;

						DimCustomer = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						DimCustomer = new DimCustomerStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									DimCustomer.customer_key = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"customer_key", "DimCustomer", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								DimCustomer.customer_key = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							DimCustomer.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							DimCustomer.country = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							DimCustomer.company = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							DimCustomer.street = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							DimCustomer.street_2 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							DimCustomer.city = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							DimCustomer.state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							DimCustomer = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "DimCustomer"
						if (DimCustomer != null) {

							/**
							 * [tAdvancedHash_DimCustomer main ] start
							 */

							currentComponent = "tAdvancedHash_DimCustomer";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "DimCustomer"

								);
							}

							DimCustomerStruct DimCustomer_HashRow = new DimCustomerStruct();

							DimCustomer_HashRow.customer_key = DimCustomer.customer_key;

							DimCustomer_HashRow.name = DimCustomer.name;

							DimCustomer_HashRow.country = DimCustomer.country;

							DimCustomer_HashRow.company = DimCustomer.company;

							DimCustomer_HashRow.street = DimCustomer.street;

							DimCustomer_HashRow.street_2 = DimCustomer.street_2;

							DimCustomer_HashRow.city = DimCustomer.city;

							DimCustomer_HashRow.state = DimCustomer.state;

							tHash_Lookup_DimCustomer.put(DimCustomer_HashRow);

							tos_count_tAdvancedHash_DimCustomer++;

							/**
							 * [tAdvancedHash_DimCustomer main ] stop
							 */

							/**
							 * [tAdvancedHash_DimCustomer process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_DimCustomer";

							/**
							 * [tAdvancedHash_DimCustomer process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_DimCustomer process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_DimCustomer";

							/**
							 * [tAdvancedHash_DimCustomer process_data_end ] stop
							 */

						} // End of branch "DimCustomer"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimCustomer.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_DimCustomer end ] start
				 */

				currentComponent = "tAdvancedHash_DimCustomer";

				tHash_Lookup_DimCustomer.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DimCustomer");
				}

				ok_Hash.put("tAdvancedHash_DimCustomer", true);
				end_Hash.put("tAdvancedHash_DimCustomer", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_DimCustomer end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_DimCustomer finally ] start
				 */

				currentComponent = "tAdvancedHash_DimCustomer";

				/**
				 * [tAdvancedHash_DimCustomer finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class DimStoreStruct implements routines.system.IPersistableRow<DimStoreStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer store_key;

		public Integer getStore_key() {
			return this.store_key;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.store_key = readInteger(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.store_key = readInteger(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.store_key, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.store_key, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("store_key=" + String.valueOf(store_key));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DimStoreStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				DimStoreStruct DimStore = new DimStoreStruct();

				/**
				 * [tAdvancedHash_DimStore begin ] start
				 */

				ok_Hash.put("tAdvancedHash_DimStore", false);
				start_Hash.put("tAdvancedHash_DimStore", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_DimStore";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DimStore");
				}

				int tos_count_tAdvancedHash_DimStore = 0;

				// connection name:DimStore
				// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_1)
				// outputs:(DimStore,DimStore) | target node:tAdvancedHash_DimStore -
				// inputs:(DimStore) outputs:()
				// linked node: tMap_1 -
				// inputs:(DimProduct,DimCustomer,DimStore,DimPayment,PosOrderLine,PosOrder,DimDate)
				// outputs:(SalesFact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DimStore = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct> tHash_Lookup_DimStore = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<DimStoreStruct>getLookup(matchingModeEnum_DimStore);

				globalMap.put("tHash_Lookup_DimStore", tHash_Lookup_DimStore);

				/**
				 * [tAdvancedHash_DimStore begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimStore.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimStore.csv", "ISO-8859-15", ";",
								"\n", true, 1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						DimStore = null;

						DimStore = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						DimStore = new DimStoreStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									DimStore.store_key = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"store_key", "DimStore", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								DimStore.store_key = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							DimStore.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							DimStore = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "DimStore"
						if (DimStore != null) {

							/**
							 * [tAdvancedHash_DimStore main ] start
							 */

							currentComponent = "tAdvancedHash_DimStore";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "DimStore"

								);
							}

							DimStoreStruct DimStore_HashRow = new DimStoreStruct();

							DimStore_HashRow.store_key = DimStore.store_key;

							DimStore_HashRow.name = DimStore.name;

							tHash_Lookup_DimStore.put(DimStore_HashRow);

							tos_count_tAdvancedHash_DimStore++;

							/**
							 * [tAdvancedHash_DimStore main ] stop
							 */

							/**
							 * [tAdvancedHash_DimStore process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_DimStore";

							/**
							 * [tAdvancedHash_DimStore process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_DimStore process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_DimStore";

							/**
							 * [tAdvancedHash_DimStore process_data_end ] stop
							 */

						} // End of branch "DimStore"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimStore.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_DimStore end ] start
				 */

				currentComponent = "tAdvancedHash_DimStore";

				tHash_Lookup_DimStore.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DimStore");
				}

				ok_Hash.put("tAdvancedHash_DimStore", true);
				end_Hash.put("tAdvancedHash_DimStore", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_DimStore end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_DimStore finally ] start
				 */

				currentComponent = "tAdvancedHash_DimStore";

				/**
				 * [tAdvancedHash_DimStore finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class DimPaymentStruct implements routines.system.IPersistableRow<DimPaymentStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer payment_method_key;

		public Integer getPayment_method_key() {
			return this.payment_method_key;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Boolean isCash;

		public Boolean getIsCash() {
			return this.isCash;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.payment_method_key = readInteger(dis);

					this.name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isCash = null;
					} else {
						this.isCash = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.payment_method_key = readInteger(dis);

					this.name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isCash = null;
					} else {
						this.isCash = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.payment_method_key, dos);

				// String

				writeString(this.name, dos);

				// Boolean

				if (this.isCash == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isCash);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.payment_method_key, dos);

				// String

				writeString(this.name, dos);

				// Boolean

				if (this.isCash == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isCash);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("payment_method_key=" + String.valueOf(payment_method_key));
			sb.append(",name=" + name);
			sb.append(",isCash=" + String.valueOf(isCash));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DimPaymentStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				DimPaymentStruct DimPayment = new DimPaymentStruct();

				/**
				 * [tAdvancedHash_DimPayment begin ] start
				 */

				ok_Hash.put("tAdvancedHash_DimPayment", false);
				start_Hash.put("tAdvancedHash_DimPayment", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_DimPayment";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DimPayment");
				}

				int tos_count_tAdvancedHash_DimPayment = 0;

				// connection name:DimPayment
				// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_1)
				// outputs:(DimPayment,DimPayment) | target node:tAdvancedHash_DimPayment -
				// inputs:(DimPayment) outputs:()
				// linked node: tMap_1 -
				// inputs:(DimProduct,DimCustomer,DimStore,DimPayment,PosOrderLine,PosOrder,DimDate)
				// outputs:(SalesFact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DimPayment = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimPaymentStruct> tHash_Lookup_DimPayment = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<DimPaymentStruct>getLookup(matchingModeEnum_DimPayment);

				globalMap.put("tHash_Lookup_DimPayment", tHash_Lookup_DimPayment);

				/**
				 * [tAdvancedHash_DimPayment begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimPaymentMethod.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimPaymentMethod.csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						DimPayment = null;

						DimPayment = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						DimPayment = new DimPaymentStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									DimPayment.payment_method_key = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"payment_method_key", "DimPayment", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								DimPayment.payment_method_key = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 1;

							DimPayment.name = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									DimPayment.isCash = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"isCash", "DimPayment", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								DimPayment.isCash = null;

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							DimPayment = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "DimPayment"
						if (DimPayment != null) {

							/**
							 * [tAdvancedHash_DimPayment main ] start
							 */

							currentComponent = "tAdvancedHash_DimPayment";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "DimPayment"

								);
							}

							DimPaymentStruct DimPayment_HashRow = new DimPaymentStruct();

							DimPayment_HashRow.payment_method_key = DimPayment.payment_method_key;

							DimPayment_HashRow.name = DimPayment.name;

							DimPayment_HashRow.isCash = DimPayment.isCash;

							tHash_Lookup_DimPayment.put(DimPayment_HashRow);

							tos_count_tAdvancedHash_DimPayment++;

							/**
							 * [tAdvancedHash_DimPayment main ] stop
							 */

							/**
							 * [tAdvancedHash_DimPayment process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_DimPayment";

							/**
							 * [tAdvancedHash_DimPayment process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_DimPayment process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_DimPayment";

							/**
							 * [tAdvancedHash_DimPayment process_data_end ] stop
							 */

						} // End of branch "DimPayment"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimPaymentMethod.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_DimPayment end ] start
				 */

				currentComponent = "tAdvancedHash_DimPayment";

				tHash_Lookup_DimPayment.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DimPayment");
				}

				ok_Hash.put("tAdvancedHash_DimPayment", true);
				end_Hash.put("tAdvancedHash_DimPayment", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_DimPayment end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_DimPayment finally ] start
				 */

				currentComponent = "tAdvancedHash_DimPayment";

				/**
				 * [tAdvancedHash_DimPayment finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class PosOrderLineStruct implements routines.system.IPersistableRow<PosOrderLineStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String notice;

		public String getNotice() {
			return this.notice;
		}

		public Integer product_id;

		public Integer getProduct_id() {
			return this.product_id;
		}

		public Float price_unit;

		public Float getPrice_unit() {
			return this.price_unit;
		}

		public Integer qty;

		public Integer getQty() {
			return this.qty;
		}

		public Integer price_subtotal;

		public Integer getPrice_subtotal() {
			return this.price_subtotal;
		}

		public Integer price_subtotal_incl;

		public Integer getPrice_subtotal_incl() {
			return this.price_subtotal_incl;
		}

		public String total_cost;

		public String getTotal_cost() {
			return this.total_cost;
		}

		public Boolean is_total_cost_computed;

		public Boolean getIs_total_cost_computed() {
			return this.is_total_cost_computed;
		}

		public Float discount;

		public Float getDiscount() {
			return this.discount;
		}

		public Integer order_id;

		public Integer getOrder_id() {
			return this.order_id;
		}

		public String full_product_name;

		public String getFull_product_name() {
			return this.full_product_name;
		}

		public String customer_note;

		public String getCustomer_note() {
			return this.customer_note;
		}

		public String refunded_orderline_id;

		public String getRefunded_orderline_id() {
			return this.refunded_orderline_id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public String sale_order_origin_id;

		public String getSale_order_origin_id() {
			return this.sale_order_origin_id;
		}

		public String sale_order_line_id;

		public String getSale_order_line_id() {
			return this.sale_order_line_id;
		}

		public String down_payment_details;

		public String getDown_payment_details() {
			return this.down_payment_details;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_SalesFact.length) {
					if (length < 1024 && commonByteArray_PACIFICO_SalesFact.length == 0) {
						commonByteArray_PACIFICO_SalesFact = new byte[1024];
					} else {
						commonByteArray_PACIFICO_SalesFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_SalesFact, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_SalesFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.company_id = readInteger(dis);

					this.name = readString(dis);

					this.notice = readString(dis);

					this.product_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.price_unit = null;
					} else {
						this.price_unit = dis.readFloat();
					}

					this.qty = readInteger(dis);

					this.price_subtotal = readInteger(dis);

					this.price_subtotal_incl = readInteger(dis);

					this.total_cost = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_total_cost_computed = null;
					} else {
						this.is_total_cost_computed = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount = null;
					} else {
						this.discount = dis.readFloat();
					}

					this.order_id = readInteger(dis);

					this.full_product_name = readString(dis);

					this.customer_note = readString(dis);

					this.refunded_orderline_id = readString(dis);

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.sale_order_origin_id = readString(dis);

					this.sale_order_line_id = readString(dis);

					this.down_payment_details = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.company_id = readInteger(dis);

					this.name = readString(dis);

					this.notice = readString(dis);

					this.product_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.price_unit = null;
					} else {
						this.price_unit = dis.readFloat();
					}

					this.qty = readInteger(dis);

					this.price_subtotal = readInteger(dis);

					this.price_subtotal_incl = readInteger(dis);

					this.total_cost = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_total_cost_computed = null;
					} else {
						this.is_total_cost_computed = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount = null;
					} else {
						this.discount = dis.readFloat();
					}

					this.order_id = readInteger(dis);

					this.full_product_name = readString(dis);

					this.customer_note = readString(dis);

					this.refunded_orderline_id = readString(dis);

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.sale_order_origin_id = readString(dis);

					this.sale_order_line_id = readString(dis);

					this.down_payment_details = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.notice, dos);

				// Integer

				writeInteger(this.product_id, dos);

				// Float

				if (this.price_unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price_unit);
				}

				// Integer

				writeInteger(this.qty, dos);

				// Integer

				writeInteger(this.price_subtotal, dos);

				// Integer

				writeInteger(this.price_subtotal_incl, dos);

				// String

				writeString(this.total_cost, dos);

				// Boolean

				if (this.is_total_cost_computed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_total_cost_computed);
				}

				// Float

				if (this.discount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount);
				}

				// Integer

				writeInteger(this.order_id, dos);

				// String

				writeString(this.full_product_name, dos);

				// String

				writeString(this.customer_note, dos);

				// String

				writeString(this.refunded_orderline_id, dos);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// String

				writeString(this.sale_order_origin_id, dos);

				// String

				writeString(this.sale_order_line_id, dos);

				// String

				writeString(this.down_payment_details, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.notice, dos);

				// Integer

				writeInteger(this.product_id, dos);

				// Float

				if (this.price_unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price_unit);
				}

				// Integer

				writeInteger(this.qty, dos);

				// Integer

				writeInteger(this.price_subtotal, dos);

				// Integer

				writeInteger(this.price_subtotal_incl, dos);

				// String

				writeString(this.total_cost, dos);

				// Boolean

				if (this.is_total_cost_computed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_total_cost_computed);
				}

				// Float

				if (this.discount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount);
				}

				// Integer

				writeInteger(this.order_id, dos);

				// String

				writeString(this.full_product_name, dos);

				// String

				writeString(this.customer_note, dos);

				// String

				writeString(this.refunded_orderline_id, dos);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// String

				writeString(this.sale_order_origin_id, dos);

				// String

				writeString(this.sale_order_line_id, dos);

				// String

				writeString(this.down_payment_details, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",name=" + name);
			sb.append(",notice=" + notice);
			sb.append(",product_id=" + String.valueOf(product_id));
			sb.append(",price_unit=" + String.valueOf(price_unit));
			sb.append(",qty=" + String.valueOf(qty));
			sb.append(",price_subtotal=" + String.valueOf(price_subtotal));
			sb.append(",price_subtotal_incl=" + String.valueOf(price_subtotal_incl));
			sb.append(",total_cost=" + total_cost);
			sb.append(",is_total_cost_computed=" + String.valueOf(is_total_cost_computed));
			sb.append(",discount=" + String.valueOf(discount));
			sb.append(",order_id=" + String.valueOf(order_id));
			sb.append(",full_product_name=" + full_product_name);
			sb.append(",customer_note=" + customer_note);
			sb.append(",refunded_orderline_id=" + refunded_orderline_id);
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",sale_order_origin_id=" + sale_order_origin_id);
			sb.append(",sale_order_line_id=" + sale_order_line_id);
			sb.append(",down_payment_details=" + down_payment_details);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PosOrderLineStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				PosOrderLineStruct PosOrderLine = new PosOrderLineStruct();

				/**
				 * [tAdvancedHash_PosOrderLine begin ] start
				 */

				ok_Hash.put("tAdvancedHash_PosOrderLine", false);
				start_Hash.put("tAdvancedHash_PosOrderLine", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_PosOrderLine";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "PosOrderLine");
				}

				int tos_count_tAdvancedHash_PosOrderLine = 0;

				// connection name:PosOrderLine
				// source node:tFileInputDelimited_5 - inputs:(after_tFileInputDelimited_1)
				// outputs:(PosOrderLine,PosOrderLine) | target node:tAdvancedHash_PosOrderLine
				// - inputs:(PosOrderLine) outputs:()
				// linked node: tMap_1 -
				// inputs:(DimProduct,DimCustomer,DimStore,DimPayment,PosOrderLine,PosOrder,DimDate)
				// outputs:(SalesFact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosOrderLine = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct> tHash_Lookup_PosOrderLine = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<PosOrderLineStruct>getLookup(matchingModeEnum_PosOrderLine);

				globalMap.put("tHash_Lookup_PosOrderLine", tHash_Lookup_PosOrderLine);

				/**
				 * [tAdvancedHash_PosOrderLine begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posOrderLine.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posOrderLine.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						PosOrderLine = null;

						PosOrderLine = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						PosOrderLine = new PosOrderLineStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_5 = 0;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.id = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 1;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.company_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"company_id", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.company_id = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 2;

							PosOrderLine.name = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							PosOrderLine.notice = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.product_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"product_id", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.product_id = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 5;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.price_unit = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"price_unit", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.price_unit = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 6;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.qty = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"qty", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.qty = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 7;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.price_subtotal = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"price_subtotal", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.price_subtotal = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 8;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.price_subtotal_incl = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"price_subtotal_incl", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.price_subtotal_incl = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 9;

							PosOrderLine.total_cost = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 10;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.is_total_cost_computed = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"is_total_cost_computed", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.is_total_cost_computed = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 11;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.discount = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"discount", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.discount = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 12;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.order_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"order_id", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.order_id = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 13;

							PosOrderLine.full_product_name = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 14;

							PosOrderLine.customer_note = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 15;

							PosOrderLine.refunded_orderline_id = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 16;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.create_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_uid", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.create_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 17;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_date", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.create_date = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 18;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.write_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_uid", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.write_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 19;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									PosOrderLine.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_date", "PosOrderLine", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								PosOrderLine.write_date = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 20;

							PosOrderLine.sale_order_origin_id = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 21;

							PosOrderLine.sale_order_line_id = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 22;

							PosOrderLine.down_payment_details = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							PosOrderLine = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "PosOrderLine"
						if (PosOrderLine != null) {

							/**
							 * [tAdvancedHash_PosOrderLine main ] start
							 */

							currentComponent = "tAdvancedHash_PosOrderLine";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "PosOrderLine"

								);
							}

							PosOrderLineStruct PosOrderLine_HashRow = new PosOrderLineStruct();

							PosOrderLine_HashRow.id = PosOrderLine.id;

							PosOrderLine_HashRow.company_id = PosOrderLine.company_id;

							PosOrderLine_HashRow.name = PosOrderLine.name;

							PosOrderLine_HashRow.notice = PosOrderLine.notice;

							PosOrderLine_HashRow.product_id = PosOrderLine.product_id;

							PosOrderLine_HashRow.price_unit = PosOrderLine.price_unit;

							PosOrderLine_HashRow.qty = PosOrderLine.qty;

							PosOrderLine_HashRow.price_subtotal = PosOrderLine.price_subtotal;

							PosOrderLine_HashRow.price_subtotal_incl = PosOrderLine.price_subtotal_incl;

							PosOrderLine_HashRow.total_cost = PosOrderLine.total_cost;

							PosOrderLine_HashRow.is_total_cost_computed = PosOrderLine.is_total_cost_computed;

							PosOrderLine_HashRow.discount = PosOrderLine.discount;

							PosOrderLine_HashRow.order_id = PosOrderLine.order_id;

							PosOrderLine_HashRow.full_product_name = PosOrderLine.full_product_name;

							PosOrderLine_HashRow.customer_note = PosOrderLine.customer_note;

							PosOrderLine_HashRow.refunded_orderline_id = PosOrderLine.refunded_orderline_id;

							PosOrderLine_HashRow.create_uid = PosOrderLine.create_uid;

							PosOrderLine_HashRow.create_date = PosOrderLine.create_date;

							PosOrderLine_HashRow.write_uid = PosOrderLine.write_uid;

							PosOrderLine_HashRow.write_date = PosOrderLine.write_date;

							PosOrderLine_HashRow.sale_order_origin_id = PosOrderLine.sale_order_origin_id;

							PosOrderLine_HashRow.sale_order_line_id = PosOrderLine.sale_order_line_id;

							PosOrderLine_HashRow.down_payment_details = PosOrderLine.down_payment_details;

							tHash_Lookup_PosOrderLine.put(PosOrderLine_HashRow);

							tos_count_tAdvancedHash_PosOrderLine++;

							/**
							 * [tAdvancedHash_PosOrderLine main ] stop
							 */

							/**
							 * [tAdvancedHash_PosOrderLine process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_PosOrderLine";

							/**
							 * [tAdvancedHash_PosOrderLine process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_PosOrderLine process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_PosOrderLine";

							/**
							 * [tAdvancedHash_PosOrderLine process_data_end ] stop
							 */

						} // End of branch "PosOrderLine"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posOrderLine.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_PosOrderLine end ] start
				 */

				currentComponent = "tAdvancedHash_PosOrderLine";

				tHash_Lookup_PosOrderLine.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "PosOrderLine");
				}

				ok_Hash.put("tAdvancedHash_PosOrderLine", true);
				end_Hash.put("tAdvancedHash_PosOrderLine", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_PosOrderLine end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_PosOrderLine finally ] start
				 */

				currentComponent = "tAdvancedHash_PosOrderLine";

				/**
				 * [tAdvancedHash_PosOrderLine finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class PosOrderStruct implements routines.system.IPersistableComparableLookupRow<PosOrderStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date date_order;

		public java.util.Date getDate_order() {
			return this.date_order;
		}

		public Integer user_id;

		public Integer getUser_id() {
			return this.user_id;
		}

		public Float amount_tax;

		public Float getAmount_tax() {
			return this.amount_tax;
		}

		public Integer amount_total;

		public Integer getAmount_total() {
			return this.amount_total;
		}

		public Integer amount_paid;

		public Integer getAmount_paid() {
			return this.amount_paid;
		}

		public Integer amount_return;

		public Integer getAmount_return() {
			return this.amount_return;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public Integer pricelist_id;

		public Integer getPricelist_id() {
			return this.pricelist_id;
		}

		public String partner_id;

		public String getPartner_id() {
			return this.partner_id;
		}

		public Integer sequence_number;

		public Integer getSequence_number() {
			return this.sequence_number;
		}

		public Integer session_id;

		public Integer getSession_id() {
			return this.session_id;
		}

		public Integer currency_rate;

		public Integer getCurrency_rate() {
			return this.currency_rate;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String account_move;

		public String getAccount_move() {
			return this.account_move;
		}

		public String procurement_group_id;

		public String getProcurement_group_id() {
			return this.procurement_group_id;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public Integer nb_print;

		public Integer getNb_print() {
			return this.nb_print;
		}

		public String pos_reference;

		public String getPos_reference() {
			return this.pos_reference;
		}

		public Integer sale_journal;

		public Integer getSale_journal() {
			return this.sale_journal;
		}

		public String fiscal_position_id;

		public String getFiscal_position_id() {
			return this.fiscal_position_id;
		}

		public Boolean to_invoice;

		public Boolean getTo_invoice() {
			return this.to_invoice;
		}

		public Boolean to_ship;

		public Boolean getTo_ship() {
			return this.to_ship;
		}

		public Boolean is_tipped;

		public Boolean getIs_tipped() {
			return this.is_tipped;
		}

		public Integer tip_amount;

		public Integer getTip_amount() {
			return this.tip_amount;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public String crm_team_id;

		public String getCrm_team_id() {
			return this.crm_team_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final PosOrderStruct other = (PosOrderStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(PosOrderStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.date_order = this.date_order;
			other.user_id = this.user_id;
			other.amount_tax = this.amount_tax;
			other.amount_total = this.amount_total;
			other.amount_paid = this.amount_paid;
			other.amount_return = this.amount_return;
			other.company_id = this.company_id;
			other.pricelist_id = this.pricelist_id;
			other.partner_id = this.partner_id;
			other.sequence_number = this.sequence_number;
			other.session_id = this.session_id;
			other.currency_rate = this.currency_rate;
			other.state = this.state;
			other.account_move = this.account_move;
			other.procurement_group_id = this.procurement_group_id;
			other.note = this.note;
			other.nb_print = this.nb_print;
			other.pos_reference = this.pos_reference;
			other.sale_journal = this.sale_journal;
			other.fiscal_position_id = this.fiscal_position_id;
			other.to_invoice = this.to_invoice;
			other.to_ship = this.to_ship;
			other.is_tipped = this.is_tipped;
			other.tip_amount = this.tip_amount;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_uid = this.write_uid;
			other.write_date = this.write_date;
			other.crm_team_id = this.crm_team_id;

		}

		public void copyKeysDataTo(PosOrderStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.date_order = readDate(dis, ois);

				this.user_id = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.amount_tax = null;
				} else {
					this.amount_tax = dis.readFloat();
				}

				this.amount_total = readInteger(dis, ois);

				this.amount_paid = readInteger(dis, ois);

				this.amount_return = readInteger(dis, ois);

				this.company_id = readInteger(dis, ois);

				this.pricelist_id = readInteger(dis, ois);

				this.partner_id = readString(dis, ois);

				this.sequence_number = readInteger(dis, ois);

				this.session_id = readInteger(dis, ois);

				this.currency_rate = readInteger(dis, ois);

				this.state = readString(dis, ois);

				this.account_move = readString(dis, ois);

				this.procurement_group_id = readString(dis, ois);

				this.note = readString(dis, ois);

				this.nb_print = readInteger(dis, ois);

				this.pos_reference = readString(dis, ois);

				this.sale_journal = readInteger(dis, ois);

				this.fiscal_position_id = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.to_invoice = null;
				} else {
					this.to_invoice = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.to_ship = null;
				} else {
					this.to_ship = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.is_tipped = null;
				} else {
					this.is_tipped = dis.readBoolean();
				}

				this.tip_amount = readInteger(dis, ois);

				this.create_uid = readInteger(dis, ois);

				this.create_date = readDate(dis, ois);

				this.write_uid = readInteger(dis, ois);

				this.write_date = readDate(dis, ois);

				this.crm_team_id = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.name = readString(dis, objectIn);

				this.date_order = readDate(dis, objectIn);

				this.user_id = readInteger(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.amount_tax = null;
				} else {
					this.amount_tax = objectIn.readFloat();
				}

				this.amount_total = readInteger(dis, objectIn);

				this.amount_paid = readInteger(dis, objectIn);

				this.amount_return = readInteger(dis, objectIn);

				this.company_id = readInteger(dis, objectIn);

				this.pricelist_id = readInteger(dis, objectIn);

				this.partner_id = readString(dis, objectIn);

				this.sequence_number = readInteger(dis, objectIn);

				this.session_id = readInteger(dis, objectIn);

				this.currency_rate = readInteger(dis, objectIn);

				this.state = readString(dis, objectIn);

				this.account_move = readString(dis, objectIn);

				this.procurement_group_id = readString(dis, objectIn);

				this.note = readString(dis, objectIn);

				this.nb_print = readInteger(dis, objectIn);

				this.pos_reference = readString(dis, objectIn);

				this.sale_journal = readInteger(dis, objectIn);

				this.fiscal_position_id = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.to_invoice = null;
				} else {
					this.to_invoice = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.to_ship = null;
				} else {
					this.to_ship = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.is_tipped = null;
				} else {
					this.is_tipped = objectIn.readBoolean();
				}

				this.tip_amount = readInteger(dis, objectIn);

				this.create_uid = readInteger(dis, objectIn);

				this.create_date = readDate(dis, objectIn);

				this.write_uid = readInteger(dis, objectIn);

				this.write_date = readDate(dis, objectIn);

				this.crm_team_id = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeDate(this.date_order, dos, oos);

				writeInteger(this.user_id, dos, oos);

				if (this.amount_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.amount_tax);
				}

				writeInteger(this.amount_total, dos, oos);

				writeInteger(this.amount_paid, dos, oos);

				writeInteger(this.amount_return, dos, oos);

				writeInteger(this.company_id, dos, oos);

				writeInteger(this.pricelist_id, dos, oos);

				writeString(this.partner_id, dos, oos);

				writeInteger(this.sequence_number, dos, oos);

				writeInteger(this.session_id, dos, oos);

				writeInteger(this.currency_rate, dos, oos);

				writeString(this.state, dos, oos);

				writeString(this.account_move, dos, oos);

				writeString(this.procurement_group_id, dos, oos);

				writeString(this.note, dos, oos);

				writeInteger(this.nb_print, dos, oos);

				writeString(this.pos_reference, dos, oos);

				writeInteger(this.sale_journal, dos, oos);

				writeString(this.fiscal_position_id, dos, oos);

				if (this.to_invoice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.to_invoice);
				}

				if (this.to_ship == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.to_ship);
				}

				if (this.is_tipped == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_tipped);
				}

				writeInteger(this.tip_amount, dos, oos);

				writeInteger(this.create_uid, dos, oos);

				writeDate(this.create_date, dos, oos);

				writeInteger(this.write_uid, dos, oos);

				writeDate(this.write_date, dos, oos);

				writeString(this.crm_team_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.name, dos, objectOut);

				writeDate(this.date_order, dos, objectOut);

				writeInteger(this.user_id, dos, objectOut);

				if (this.amount_tax == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeFloat(this.amount_tax);
				}

				writeInteger(this.amount_total, dos, objectOut);

				writeInteger(this.amount_paid, dos, objectOut);

				writeInteger(this.amount_return, dos, objectOut);

				writeInteger(this.company_id, dos, objectOut);

				writeInteger(this.pricelist_id, dos, objectOut);

				writeString(this.partner_id, dos, objectOut);

				writeInteger(this.sequence_number, dos, objectOut);

				writeInteger(this.session_id, dos, objectOut);

				writeInteger(this.currency_rate, dos, objectOut);

				writeString(this.state, dos, objectOut);

				writeString(this.account_move, dos, objectOut);

				writeString(this.procurement_group_id, dos, objectOut);

				writeString(this.note, dos, objectOut);

				writeInteger(this.nb_print, dos, objectOut);

				writeString(this.pos_reference, dos, objectOut);

				writeInteger(this.sale_journal, dos, objectOut);

				writeString(this.fiscal_position_id, dos, objectOut);

				if (this.to_invoice == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.to_invoice);
				}

				if (this.to_ship == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.to_ship);
				}

				if (this.is_tipped == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.is_tipped);
				}

				writeInteger(this.tip_amount, dos, objectOut);

				writeInteger(this.create_uid, dos, objectOut);

				writeDate(this.create_date, dos, objectOut);

				writeInteger(this.write_uid, dos, objectOut);

				writeDate(this.write_date, dos, objectOut);

				writeString(this.crm_team_id, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",date_order=" + String.valueOf(date_order));
			sb.append(",user_id=" + String.valueOf(user_id));
			sb.append(",amount_tax=" + String.valueOf(amount_tax));
			sb.append(",amount_total=" + String.valueOf(amount_total));
			sb.append(",amount_paid=" + String.valueOf(amount_paid));
			sb.append(",amount_return=" + String.valueOf(amount_return));
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",pricelist_id=" + String.valueOf(pricelist_id));
			sb.append(",partner_id=" + partner_id);
			sb.append(",sequence_number=" + String.valueOf(sequence_number));
			sb.append(",session_id=" + String.valueOf(session_id));
			sb.append(",currency_rate=" + String.valueOf(currency_rate));
			sb.append(",state=" + state);
			sb.append(",account_move=" + account_move);
			sb.append(",procurement_group_id=" + procurement_group_id);
			sb.append(",note=" + note);
			sb.append(",nb_print=" + String.valueOf(nb_print));
			sb.append(",pos_reference=" + pos_reference);
			sb.append(",sale_journal=" + String.valueOf(sale_journal));
			sb.append(",fiscal_position_id=" + fiscal_position_id);
			sb.append(",to_invoice=" + String.valueOf(to_invoice));
			sb.append(",to_ship=" + String.valueOf(to_ship));
			sb.append(",is_tipped=" + String.valueOf(is_tipped));
			sb.append(",tip_amount=" + String.valueOf(tip_amount));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",crm_team_id=" + crm_team_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PosOrderStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				PosOrderStruct PosOrder = new PosOrderStruct();

				/**
				 * [tAdvancedHash_PosOrder begin ] start
				 */

				ok_Hash.put("tAdvancedHash_PosOrder", false);
				start_Hash.put("tAdvancedHash_PosOrder", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_PosOrder";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "PosOrder");
				}

				int tos_count_tAdvancedHash_PosOrder = 0;

				// connection name:PosOrder
				// source node:tFileInputDelimited_6 - inputs:(after_tFileInputDelimited_1)
				// outputs:(PosOrder,PosOrder) | target node:tAdvancedHash_PosOrder -
				// inputs:(PosOrder) outputs:()
				// linked node: tMap_1 -
				// inputs:(DimProduct,DimCustomer,DimStore,DimPayment,PosOrderLine,PosOrder,DimDate)
				// outputs:(SalesFact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosOrder = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct> tHash_Lookup_PosOrder = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<PosOrderStruct>getLookup(matchingModeEnum_PosOrder);

				globalMap.put("tHash_Lookup_PosOrder", tHash_Lookup_PosOrder);

				/**
				 * [tAdvancedHash_PosOrder begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try {

					Object filename_tFileInputDelimited_6 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posOrder.csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0 || random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posOrder.csv", "ISO-8859-15", ";",
								"\n", true, 1, 0, limit_tFileInputDelimited_6, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						PosOrder = null;

						PosOrder = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						PosOrder = new PosOrderStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_6 = 0;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.id = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 1;

							PosOrder.name = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 2;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"date_order", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.date_order = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 3;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.user_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"user_id", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.user_id = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 4;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.amount_tax = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"amount_tax", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.amount_tax = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 5;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.amount_total = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"amount_total", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.amount_total = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 6;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.amount_paid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"amount_paid", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.amount_paid = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 7;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.amount_return = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"amount_return", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.amount_return = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 8;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.company_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"company_id", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.company_id = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 9;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.pricelist_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"pricelist_id", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.pricelist_id = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 10;

							PosOrder.partner_id = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 11;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.sequence_number = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"sequence_number", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.sequence_number = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 12;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.session_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"session_id", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.session_id = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 13;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.currency_rate = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"currency_rate", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.currency_rate = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 14;

							PosOrder.state = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 15;

							PosOrder.account_move = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 16;

							PosOrder.procurement_group_id = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 17;

							PosOrder.note = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 18;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.nb_print = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"nb_print", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.nb_print = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 19;

							PosOrder.pos_reference = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 20;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.sale_journal = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"sale_journal", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.sale_journal = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 21;

							PosOrder.fiscal_position_id = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 22;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.to_invoice = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"to_invoice", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.to_invoice = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 23;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.to_ship = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"to_ship", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.to_ship = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 24;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.is_tipped = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"is_tipped", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.is_tipped = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 25;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.tip_amount = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tip_amount", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.tip_amount = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 26;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.create_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_uid", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.create_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 27;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_date", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.create_date = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 28;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.write_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_uid", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.write_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 29;

							temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								try {

									PosOrder.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_6) {
									globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
											ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_date", "PosOrder", temp, ex_tFileInputDelimited_6),
											ex_tFileInputDelimited_6));
								}

							} else {

								PosOrder.write_date = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 30;

							PosOrder.crm_team_id = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							PosOrder = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "PosOrder"
						if (PosOrder != null) {

							/**
							 * [tAdvancedHash_PosOrder main ] start
							 */

							currentComponent = "tAdvancedHash_PosOrder";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "PosOrder"

								);
							}

							PosOrderStruct PosOrder_HashRow = new PosOrderStruct();

							PosOrder_HashRow.id = PosOrder.id;

							PosOrder_HashRow.name = PosOrder.name;

							PosOrder_HashRow.date_order = PosOrder.date_order;

							PosOrder_HashRow.user_id = PosOrder.user_id;

							PosOrder_HashRow.amount_tax = PosOrder.amount_tax;

							PosOrder_HashRow.amount_total = PosOrder.amount_total;

							PosOrder_HashRow.amount_paid = PosOrder.amount_paid;

							PosOrder_HashRow.amount_return = PosOrder.amount_return;

							PosOrder_HashRow.company_id = PosOrder.company_id;

							PosOrder_HashRow.pricelist_id = PosOrder.pricelist_id;

							PosOrder_HashRow.partner_id = PosOrder.partner_id;

							PosOrder_HashRow.sequence_number = PosOrder.sequence_number;

							PosOrder_HashRow.session_id = PosOrder.session_id;

							PosOrder_HashRow.currency_rate = PosOrder.currency_rate;

							PosOrder_HashRow.state = PosOrder.state;

							PosOrder_HashRow.account_move = PosOrder.account_move;

							PosOrder_HashRow.procurement_group_id = PosOrder.procurement_group_id;

							PosOrder_HashRow.note = PosOrder.note;

							PosOrder_HashRow.nb_print = PosOrder.nb_print;

							PosOrder_HashRow.pos_reference = PosOrder.pos_reference;

							PosOrder_HashRow.sale_journal = PosOrder.sale_journal;

							PosOrder_HashRow.fiscal_position_id = PosOrder.fiscal_position_id;

							PosOrder_HashRow.to_invoice = PosOrder.to_invoice;

							PosOrder_HashRow.to_ship = PosOrder.to_ship;

							PosOrder_HashRow.is_tipped = PosOrder.is_tipped;

							PosOrder_HashRow.tip_amount = PosOrder.tip_amount;

							PosOrder_HashRow.create_uid = PosOrder.create_uid;

							PosOrder_HashRow.create_date = PosOrder.create_date;

							PosOrder_HashRow.write_uid = PosOrder.write_uid;

							PosOrder_HashRow.write_date = PosOrder.write_date;

							PosOrder_HashRow.crm_team_id = PosOrder.crm_team_id;

							tHash_Lookup_PosOrder.put(PosOrder_HashRow);

							tos_count_tAdvancedHash_PosOrder++;

							/**
							 * [tAdvancedHash_PosOrder main ] stop
							 */

							/**
							 * [tAdvancedHash_PosOrder process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_PosOrder";

							/**
							 * [tAdvancedHash_PosOrder process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_PosOrder process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_PosOrder";

							/**
							 * [tAdvancedHash_PosOrder process_data_end ] stop
							 */

						} // End of branch "PosOrder"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posOrder.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_PosOrder end ] start
				 */

				currentComponent = "tAdvancedHash_PosOrder";

				tHash_Lookup_PosOrder.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "PosOrder");
				}

				ok_Hash.put("tAdvancedHash_PosOrder", true);
				end_Hash.put("tAdvancedHash_PosOrder", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_PosOrder end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_PosOrder finally ] start
				 */

				currentComponent = "tAdvancedHash_PosOrder";

				/**
				 * [tAdvancedHash_PosOrder finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class DimDateStruct implements routines.system.IPersistableComparableLookupRow<DimDateStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_SalesFact = new byte[0];
		static byte[] commonByteArray_PACIFICO_SalesFact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer DateNum;

		public Integer getDateNum() {
			return this.DateNum;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer YearMonthNum;

		public Integer getYearMonthNum() {
			return this.YearMonthNum;
		}

		public String Calendar_Quarter;

		public String getCalendar_Quarter() {
			return this.Calendar_Quarter;
		}

		public Integer MonthNum;

		public Integer getMonthNum() {
			return this.MonthNum;
		}

		public String MonthName;

		public String getMonthName() {
			return this.MonthName;
		}

		public String MonthShortName;

		public String getMonthShortName() {
			return this.MonthShortName;
		}

		public Integer WeekNum;

		public Integer getWeekNum() {
			return this.WeekNum;
		}

		public Integer DayNumOfYear;

		public Integer getDayNumOfYear() {
			return this.DayNumOfYear;
		}

		public Integer DayNumOfMonth;

		public Integer getDayNumOfMonth() {
			return this.DayNumOfMonth;
		}

		public Integer DayNumOfWeek;

		public Integer getDayNumOfWeek() {
			return this.DayNumOfWeek;
		}

		public String DayName;

		public String getDayName() {
			return this.DayName;
		}

		public String DayShortName;

		public String getDayShortName() {
			return this.DayShortName;
		}

		public Integer Quarter;

		public Integer getQuarter() {
			return this.Quarter;
		}

		public Integer YearQuarterNum;

		public Integer getYearQuarterNum() {
			return this.YearQuarterNum;
		}

		public Integer DayNumOfQuarter;

		public Integer getDayNumOfQuarter() {
			return this.DayNumOfQuarter;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final DimDateStruct other = (DimDateStruct) obj;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(DimDateStruct other) {

			other.DateNum = this.DateNum;
			other.Date = this.Date;
			other.YearMonthNum = this.YearMonthNum;
			other.Calendar_Quarter = this.Calendar_Quarter;
			other.MonthNum = this.MonthNum;
			other.MonthName = this.MonthName;
			other.MonthShortName = this.MonthShortName;
			other.WeekNum = this.WeekNum;
			other.DayNumOfYear = this.DayNumOfYear;
			other.DayNumOfMonth = this.DayNumOfMonth;
			other.DayNumOfWeek = this.DayNumOfWeek;
			other.DayName = this.DayName;
			other.DayShortName = this.DayShortName;
			other.Quarter = this.Quarter;
			other.YearQuarterNum = this.YearQuarterNum;
			other.DayNumOfQuarter = this.DayNumOfQuarter;

		}

		public void copyKeysDataTo(DimDateStruct other) {

			other.Date = this.Date;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_SalesFact) {

				try {

					int length = 0;

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DateNum = readInteger(dis, ois);

				this.YearMonthNum = readInteger(dis, ois);

				this.Calendar_Quarter = readString(dis, ois);

				this.MonthNum = readInteger(dis, ois);

				this.MonthName = readString(dis, ois);

				this.MonthShortName = readString(dis, ois);

				this.WeekNum = readInteger(dis, ois);

				this.DayNumOfYear = readInteger(dis, ois);

				this.DayNumOfMonth = readInteger(dis, ois);

				this.DayNumOfWeek = readInteger(dis, ois);

				this.DayName = readString(dis, ois);

				this.DayShortName = readString(dis, ois);

				this.Quarter = readInteger(dis, ois);

				this.YearQuarterNum = readInteger(dis, ois);

				this.DayNumOfQuarter = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.DateNum = readInteger(dis, objectIn);

				this.YearMonthNum = readInteger(dis, objectIn);

				this.Calendar_Quarter = readString(dis, objectIn);

				this.MonthNum = readInteger(dis, objectIn);

				this.MonthName = readString(dis, objectIn);

				this.MonthShortName = readString(dis, objectIn);

				this.WeekNum = readInteger(dis, objectIn);

				this.DayNumOfYear = readInteger(dis, objectIn);

				this.DayNumOfMonth = readInteger(dis, objectIn);

				this.DayNumOfWeek = readInteger(dis, objectIn);

				this.DayName = readString(dis, objectIn);

				this.DayShortName = readString(dis, objectIn);

				this.Quarter = readInteger(dis, objectIn);

				this.YearQuarterNum = readInteger(dis, objectIn);

				this.DayNumOfQuarter = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.DateNum, dos, oos);

				writeInteger(this.YearMonthNum, dos, oos);

				writeString(this.Calendar_Quarter, dos, oos);

				writeInteger(this.MonthNum, dos, oos);

				writeString(this.MonthName, dos, oos);

				writeString(this.MonthShortName, dos, oos);

				writeInteger(this.WeekNum, dos, oos);

				writeInteger(this.DayNumOfYear, dos, oos);

				writeInteger(this.DayNumOfMonth, dos, oos);

				writeInteger(this.DayNumOfWeek, dos, oos);

				writeString(this.DayName, dos, oos);

				writeString(this.DayShortName, dos, oos);

				writeInteger(this.Quarter, dos, oos);

				writeInteger(this.YearQuarterNum, dos, oos);

				writeInteger(this.DayNumOfQuarter, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.DateNum, dos, objectOut);

				writeInteger(this.YearMonthNum, dos, objectOut);

				writeString(this.Calendar_Quarter, dos, objectOut);

				writeInteger(this.MonthNum, dos, objectOut);

				writeString(this.MonthName, dos, objectOut);

				writeString(this.MonthShortName, dos, objectOut);

				writeInteger(this.WeekNum, dos, objectOut);

				writeInteger(this.DayNumOfYear, dos, objectOut);

				writeInteger(this.DayNumOfMonth, dos, objectOut);

				writeInteger(this.DayNumOfWeek, dos, objectOut);

				writeString(this.DayName, dos, objectOut);

				writeString(this.DayShortName, dos, objectOut);

				writeInteger(this.Quarter, dos, objectOut);

				writeInteger(this.YearQuarterNum, dos, objectOut);

				writeInteger(this.DayNumOfQuarter, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DateNum=" + String.valueOf(DateNum));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",YearMonthNum=" + String.valueOf(YearMonthNum));
			sb.append(",Calendar_Quarter=" + Calendar_Quarter);
			sb.append(",MonthNum=" + String.valueOf(MonthNum));
			sb.append(",MonthName=" + MonthName);
			sb.append(",MonthShortName=" + MonthShortName);
			sb.append(",WeekNum=" + String.valueOf(WeekNum));
			sb.append(",DayNumOfYear=" + String.valueOf(DayNumOfYear));
			sb.append(",DayNumOfMonth=" + String.valueOf(DayNumOfMonth));
			sb.append(",DayNumOfWeek=" + String.valueOf(DayNumOfWeek));
			sb.append(",DayName=" + DayName);
			sb.append(",DayShortName=" + DayShortName);
			sb.append(",Quarter=" + String.valueOf(Quarter));
			sb.append(",YearQuarterNum=" + String.valueOf(YearQuarterNum));
			sb.append(",DayNumOfQuarter=" + String.valueOf(DayNumOfQuarter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DimDateStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				DimDateStruct DimDate = new DimDateStruct();

				/**
				 * [tAdvancedHash_DimDate begin ] start
				 */

				ok_Hash.put("tAdvancedHash_DimDate", false);
				start_Hash.put("tAdvancedHash_DimDate", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_DimDate";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DimDate");
				}

				int tos_count_tAdvancedHash_DimDate = 0;

				// connection name:DimDate
				// source node:tFileInputDelimited_7 - inputs:(after_tFileInputDelimited_1)
				// outputs:(DimDate,DimDate) | target node:tAdvancedHash_DimDate -
				// inputs:(DimDate) outputs:()
				// linked node: tMap_1 -
				// inputs:(DimProduct,DimCustomer,DimStore,DimPayment,PosOrderLine,PosOrder,DimDate)
				// outputs:(SalesFact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DimDate = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct> tHash_Lookup_DimDate = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<DimDateStruct>getLookup(matchingModeEnum_DimDate);

				globalMap.put("tHash_Lookup_DimDate", tHash_Lookup_DimDate);

				/**
				 * [tAdvancedHash_DimDate begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DateDimTemp.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DateDimTemp.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						DimDate = null;

						DimDate = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						DimDate = new DimDateStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_7 = 0;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.DateNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DateNum", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.DateNum = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 1;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Date", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.Date = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 2;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.YearMonthNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"YearMonthNum", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.YearMonthNum = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 3;

							DimDate.Calendar_Quarter = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.MonthNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MonthNum", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.MonthNum = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 5;

							DimDate.MonthName = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 6;

							DimDate.MonthShortName = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 7;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.WeekNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"WeekNum", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.WeekNum = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 8;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.DayNumOfYear = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfYear", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.DayNumOfYear = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 9;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.DayNumOfMonth = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfMonth", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.DayNumOfMonth = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 10;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.DayNumOfWeek = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfWeek", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.DayNumOfWeek = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 11;

							DimDate.DayName = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 12;

							DimDate.DayShortName = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 13;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.Quarter = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Quarter", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.Quarter = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 14;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.YearQuarterNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"YearQuarterNum", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.YearQuarterNum = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 15;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									DimDate.DayNumOfQuarter = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfQuarter", "DimDate", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								DimDate.DayNumOfQuarter = null;

							}

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							DimDate = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "DimDate"
						if (DimDate != null) {

							/**
							 * [tAdvancedHash_DimDate main ] start
							 */

							currentComponent = "tAdvancedHash_DimDate";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "DimDate"

								);
							}

							DimDateStruct DimDate_HashRow = new DimDateStruct();

							DimDate_HashRow.DateNum = DimDate.DateNum;

							DimDate_HashRow.Date = DimDate.Date;

							DimDate_HashRow.YearMonthNum = DimDate.YearMonthNum;

							DimDate_HashRow.Calendar_Quarter = DimDate.Calendar_Quarter;

							DimDate_HashRow.MonthNum = DimDate.MonthNum;

							DimDate_HashRow.MonthName = DimDate.MonthName;

							DimDate_HashRow.MonthShortName = DimDate.MonthShortName;

							DimDate_HashRow.WeekNum = DimDate.WeekNum;

							DimDate_HashRow.DayNumOfYear = DimDate.DayNumOfYear;

							DimDate_HashRow.DayNumOfMonth = DimDate.DayNumOfMonth;

							DimDate_HashRow.DayNumOfWeek = DimDate.DayNumOfWeek;

							DimDate_HashRow.DayName = DimDate.DayName;

							DimDate_HashRow.DayShortName = DimDate.DayShortName;

							DimDate_HashRow.Quarter = DimDate.Quarter;

							DimDate_HashRow.YearQuarterNum = DimDate.YearQuarterNum;

							DimDate_HashRow.DayNumOfQuarter = DimDate.DayNumOfQuarter;

							tHash_Lookup_DimDate.put(DimDate_HashRow);

							tos_count_tAdvancedHash_DimDate++;

							/**
							 * [tAdvancedHash_DimDate main ] stop
							 */

							/**
							 * [tAdvancedHash_DimDate process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_DimDate";

							/**
							 * [tAdvancedHash_DimDate process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_DimDate process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_DimDate";

							/**
							 * [tAdvancedHash_DimDate process_data_end ] stop
							 */

						} // End of branch "DimDate"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DateDimTemp.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_DimDate end ] start
				 */

				currentComponent = "tAdvancedHash_DimDate";

				tHash_Lookup_DimDate.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DimDate");
				}

				ok_Hash.put("tAdvancedHash_DimDate", true);
				end_Hash.put("tAdvancedHash_DimDate", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_DimDate end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_DimDate finally ] start
				 */

				currentComponent = "tAdvancedHash_DimDate";

				/**
				 * [tAdvancedHash_DimDate finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SalesFact SalesFactClass = new SalesFact();

		int exitCode = SalesFactClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = SalesFact.class.getClassLoader()
					.getResourceAsStream("pacifico/salesfact_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = SalesFact.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SalesFact");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeS3Connections();

	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 346819 characters generated by Talend Open Studio for Data Integration on the
 * December 5, 2022 at 11:23:30 PM CST
 ************************************************************************************************/