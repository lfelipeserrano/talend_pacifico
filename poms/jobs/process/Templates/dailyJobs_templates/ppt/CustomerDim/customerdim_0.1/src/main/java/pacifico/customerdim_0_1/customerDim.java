// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pacifico.customerdim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: customerDim Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class customerDim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "customerDim";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					customerDim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(customerDim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_resCountry_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_resCompany_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_resCountryState_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];

		public Integer customer_key;

		public Integer getCustomer_key() {
			return this.customer_key;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String company;

		public String getCompany() {
			return this.company;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String street_2;

		public String getStreet_2() {
			return this.street_2;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.customer_key = readInteger(dis);

					this.name = readString(dis);

					this.country = readString(dis);

					this.company = readString(dis);

					this.street = readString(dis);

					this.street_2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.customer_key = readInteger(dis);

					this.name = readString(dis);

					this.country = readString(dis);

					this.company = readString(dis);

					this.street = readString(dis);

					this.street_2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.customer_key, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.company, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.customer_key, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.company, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",name=" + name);
			sb.append(",country=" + country);
			sb.append(",company=" + company);
			sb.append(",street=" + street);
			sb.append(",street_2=" + street_2);
			sb.append(",city=" + city);
			sb.append(",state=" + state);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CustomerDimStruct implements routines.system.IPersistableRow<CustomerDimStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];

		public Integer customer_key;

		public Integer getCustomer_key() {
			return this.customer_key;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String company;

		public String getCompany() {
			return this.company;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String street_2;

		public String getStreet_2() {
			return this.street_2;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.customer_key = readInteger(dis);

					this.name = readString(dis);

					this.country = readString(dis);

					this.company = readString(dis);

					this.street = readString(dis);

					this.street_2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.customer_key = readInteger(dis);

					this.name = readString(dis);

					this.country = readString(dis);

					this.company = readString(dis);

					this.street = readString(dis);

					this.street_2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.customer_key, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.company, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.customer_key, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.company, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",name=" + name);
			sb.append(",country=" + country);
			sb.append(",company=" + company);
			sb.append(",street=" + street);
			sb.append(",street_2=" + street_2);
			sb.append(",city=" + city);
			sb.append(",state=" + state);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CustomerDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class resPartnerStruct implements routines.system.IPersistableRow<resPartnerStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public String display_name;

		public String getDisplay_name() {
			return this.display_name;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String parent_id;

		public String getParent_id() {
			return this.parent_id;
		}

		public String ref;

		public String getRef() {
			return this.ref;
		}

		public String lang;

		public String getLang() {
			return this.lang;
		}

		public String tz;

		public String getTz() {
			return this.tz;
		}

		public String user_id;

		public String getUser_id() {
			return this.user_id;
		}

		public String vat;

		public String getVat() {
			return this.vat;
		}

		public String website;

		public String getWebsite() {
			return this.website;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String credit_limit;

		public String getCredit_limit() {
			return this.credit_limit;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public String employee;

		public String getEmployee() {
			return this.employee;
		}

		public String function;

		public String getFunction() {
			return this.function;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String street2;

		public String getStreet2() {
			return this.street2;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state_id;

		public String getState_id() {
			return this.state_id;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String partner_latitude;

		public String getPartner_latitude() {
			return this.partner_latitude;
		}

		public String partner_longitude;

		public String getPartner_longitude() {
			return this.partner_longitude;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String mobile;

		public String getMobile() {
			return this.mobile;
		}

		public Boolean is_company;

		public Boolean getIs_company() {
			return this.is_company;
		}

		public String industry_id;

		public String getIndustry_id() {
			return this.industry_id;
		}

		public Integer color;

		public Integer getColor() {
			return this.color;
		}

		public Boolean partner_share;

		public Boolean getPartner_share() {
			return this.partner_share;
		}

		public Integer commercial_partner_id;

		public Integer getCommercial_partner_id() {
			return this.commercial_partner_id;
		}

		public String commercial_company_name;

		public String getCommercial_company_name() {
			return this.commercial_company_name;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String create_uid;

		public String getCreate_uid() {
			return this.create_uid;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public String message_main_attachment_id;

		public String getMessage_main_attachment_id() {
			return this.message_main_attachment_id;
		}

		public String email_normalized;

		public String getEmail_normalized() {
			return this.email_normalized;
		}

		public Integer message_bounce;

		public Integer getMessage_bounce() {
			return this.message_bounce;
		}

		public String signup_token;

		public String getSignup_token() {
			return this.signup_token;
		}

		public String signup_type;

		public String getSignup_type() {
			return this.signup_type;
		}

		public String signup_expiration;

		public String getSignup_expiration() {
			return this.signup_expiration;
		}

		public String team_id;

		public String getTeam_id() {
			return this.team_id;
		}

		public String partner_gid;

		public String getPartner_gid() {
			return this.partner_gid;
		}

		public String additional_info;

		public String getAdditional_info() {
			return this.additional_info;
		}

		public String phone_sanitized;

		public String getPhone_sanitized() {
			return this.phone_sanitized;
		}

		public String debit_limit;

		public String getDebit_limit() {
			return this.debit_limit;
		}

		public String last_time_entries_checked;

		public String getLast_time_entries_checked() {
			return this.last_time_entries_checked;
		}

		public String invoice_warn;

		public String getInvoice_warn() {
			return this.invoice_warn;
		}

		public String invoice_warn_msg;

		public String getInvoice_warn_msg() {
			return this.invoice_warn_msg;
		}

		public Integer supplier_rank;

		public Integer getSupplier_rank() {
			return this.supplier_rank;
		}

		public Integer customer_rank;

		public Integer getCustomer_rank() {
			return this.customer_rank;
		}

		public String sale_warn;

		public String getSale_warn() {
			return this.sale_warn;
		}

		public String sale_warn_msg;

		public String getSale_warn_msg() {
			return this.sale_warn_msg;
		}

		public String picking_warn;

		public String getPicking_warn() {
			return this.picking_warn;
		}

		public String picking_warn_msg;

		public String getPicking_warn_msg() {
			return this.picking_warn_msg;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.company_id = readInteger(dis);

					this.create_date = readDate(dis);

					this.display_name = readString(dis);

					this.date = readString(dis);

					this.title = readString(dis);

					this.parent_id = readString(dis);

					this.ref = readString(dis);

					this.lang = readString(dis);

					this.tz = readString(dis);

					this.user_id = readString(dis);

					this.vat = readString(dis);

					this.website = readString(dis);

					this.comment = readString(dis);

					this.credit_limit = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.employee = readString(dis);

					this.function = readString(dis);

					this.type = readString(dis);

					this.street = readString(dis);

					this.street2 = readString(dis);

					this.zip = readString(dis);

					this.city = readString(dis);

					this.state_id = readString(dis);

					this.country_id = readInteger(dis);

					this.partner_latitude = readString(dis);

					this.partner_longitude = readString(dis);

					this.email = readString(dis);

					this.phone = readString(dis);

					this.mobile = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_company = null;
					} else {
						this.is_company = dis.readBoolean();
					}

					this.industry_id = readString(dis);

					this.color = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.partner_share = null;
					} else {
						this.partner_share = dis.readBoolean();
					}

					this.commercial_partner_id = readInteger(dis);

					this.commercial_company_name = readString(dis);

					this.company_name = readString(dis);

					this.create_uid = readString(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.message_main_attachment_id = readString(dis);

					this.email_normalized = readString(dis);

					this.message_bounce = readInteger(dis);

					this.signup_token = readString(dis);

					this.signup_type = readString(dis);

					this.signup_expiration = readString(dis);

					this.team_id = readString(dis);

					this.partner_gid = readString(dis);

					this.additional_info = readString(dis);

					this.phone_sanitized = readString(dis);

					this.debit_limit = readString(dis);

					this.last_time_entries_checked = readString(dis);

					this.invoice_warn = readString(dis);

					this.invoice_warn_msg = readString(dis);

					this.supplier_rank = readInteger(dis);

					this.customer_rank = readInteger(dis);

					this.sale_warn = readString(dis);

					this.sale_warn_msg = readString(dis);

					this.picking_warn = readString(dis);

					this.picking_warn_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.company_id = readInteger(dis);

					this.create_date = readDate(dis);

					this.display_name = readString(dis);

					this.date = readString(dis);

					this.title = readString(dis);

					this.parent_id = readString(dis);

					this.ref = readString(dis);

					this.lang = readString(dis);

					this.tz = readString(dis);

					this.user_id = readString(dis);

					this.vat = readString(dis);

					this.website = readString(dis);

					this.comment = readString(dis);

					this.credit_limit = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.employee = readString(dis);

					this.function = readString(dis);

					this.type = readString(dis);

					this.street = readString(dis);

					this.street2 = readString(dis);

					this.zip = readString(dis);

					this.city = readString(dis);

					this.state_id = readString(dis);

					this.country_id = readInteger(dis);

					this.partner_latitude = readString(dis);

					this.partner_longitude = readString(dis);

					this.email = readString(dis);

					this.phone = readString(dis);

					this.mobile = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_company = null;
					} else {
						this.is_company = dis.readBoolean();
					}

					this.industry_id = readString(dis);

					this.color = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.partner_share = null;
					} else {
						this.partner_share = dis.readBoolean();
					}

					this.commercial_partner_id = readInteger(dis);

					this.commercial_company_name = readString(dis);

					this.company_name = readString(dis);

					this.create_uid = readString(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.message_main_attachment_id = readString(dis);

					this.email_normalized = readString(dis);

					this.message_bounce = readInteger(dis);

					this.signup_token = readString(dis);

					this.signup_type = readString(dis);

					this.signup_expiration = readString(dis);

					this.team_id = readString(dis);

					this.partner_gid = readString(dis);

					this.additional_info = readString(dis);

					this.phone_sanitized = readString(dis);

					this.debit_limit = readString(dis);

					this.last_time_entries_checked = readString(dis);

					this.invoice_warn = readString(dis);

					this.invoice_warn_msg = readString(dis);

					this.supplier_rank = readInteger(dis);

					this.customer_rank = readInteger(dis);

					this.sale_warn = readString(dis);

					this.sale_warn_msg = readString(dis);

					this.picking_warn = readString(dis);

					this.picking_warn_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// String

				writeString(this.display_name, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.parent_id, dos);

				// String

				writeString(this.ref, dos);

				// String

				writeString(this.lang, dos);

				// String

				writeString(this.tz, dos);

				// String

				writeString(this.user_id, dos);

				// String

				writeString(this.vat, dos);

				// String

				writeString(this.website, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.credit_limit, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// String

				writeString(this.employee, dos);

				// String

				writeString(this.function, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street2, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state_id, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.partner_latitude, dos);

				// String

				writeString(this.partner_longitude, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.mobile, dos);

				// Boolean

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				// String

				writeString(this.industry_id, dos);

				// Integer

				writeInteger(this.color, dos);

				// Boolean

				if (this.partner_share == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.partner_share);
				}

				// Integer

				writeInteger(this.commercial_partner_id, dos);

				// String

				writeString(this.commercial_company_name, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.create_uid, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// String

				writeString(this.message_main_attachment_id, dos);

				// String

				writeString(this.email_normalized, dos);

				// Integer

				writeInteger(this.message_bounce, dos);

				// String

				writeString(this.signup_token, dos);

				// String

				writeString(this.signup_type, dos);

				// String

				writeString(this.signup_expiration, dos);

				// String

				writeString(this.team_id, dos);

				// String

				writeString(this.partner_gid, dos);

				// String

				writeString(this.additional_info, dos);

				// String

				writeString(this.phone_sanitized, dos);

				// String

				writeString(this.debit_limit, dos);

				// String

				writeString(this.last_time_entries_checked, dos);

				// String

				writeString(this.invoice_warn, dos);

				// String

				writeString(this.invoice_warn_msg, dos);

				// Integer

				writeInteger(this.supplier_rank, dos);

				// Integer

				writeInteger(this.customer_rank, dos);

				// String

				writeString(this.sale_warn, dos);

				// String

				writeString(this.sale_warn_msg, dos);

				// String

				writeString(this.picking_warn, dos);

				// String

				writeString(this.picking_warn_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// String

				writeString(this.display_name, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.parent_id, dos);

				// String

				writeString(this.ref, dos);

				// String

				writeString(this.lang, dos);

				// String

				writeString(this.tz, dos);

				// String

				writeString(this.user_id, dos);

				// String

				writeString(this.vat, dos);

				// String

				writeString(this.website, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.credit_limit, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// String

				writeString(this.employee, dos);

				// String

				writeString(this.function, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street2, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state_id, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.partner_latitude, dos);

				// String

				writeString(this.partner_longitude, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.mobile, dos);

				// Boolean

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				// String

				writeString(this.industry_id, dos);

				// Integer

				writeInteger(this.color, dos);

				// Boolean

				if (this.partner_share == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.partner_share);
				}

				// Integer

				writeInteger(this.commercial_partner_id, dos);

				// String

				writeString(this.commercial_company_name, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.create_uid, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// String

				writeString(this.message_main_attachment_id, dos);

				// String

				writeString(this.email_normalized, dos);

				// Integer

				writeInteger(this.message_bounce, dos);

				// String

				writeString(this.signup_token, dos);

				// String

				writeString(this.signup_type, dos);

				// String

				writeString(this.signup_expiration, dos);

				// String

				writeString(this.team_id, dos);

				// String

				writeString(this.partner_gid, dos);

				// String

				writeString(this.additional_info, dos);

				// String

				writeString(this.phone_sanitized, dos);

				// String

				writeString(this.debit_limit, dos);

				// String

				writeString(this.last_time_entries_checked, dos);

				// String

				writeString(this.invoice_warn, dos);

				// String

				writeString(this.invoice_warn_msg, dos);

				// Integer

				writeInteger(this.supplier_rank, dos);

				// Integer

				writeInteger(this.customer_rank, dos);

				// String

				writeString(this.sale_warn, dos);

				// String

				writeString(this.sale_warn_msg, dos);

				// String

				writeString(this.picking_warn, dos);

				// String

				writeString(this.picking_warn_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",display_name=" + display_name);
			sb.append(",date=" + date);
			sb.append(",title=" + title);
			sb.append(",parent_id=" + parent_id);
			sb.append(",ref=" + ref);
			sb.append(",lang=" + lang);
			sb.append(",tz=" + tz);
			sb.append(",user_id=" + user_id);
			sb.append(",vat=" + vat);
			sb.append(",website=" + website);
			sb.append(",comment=" + comment);
			sb.append(",credit_limit=" + credit_limit);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",employee=" + employee);
			sb.append(",function=" + function);
			sb.append(",type=" + type);
			sb.append(",street=" + street);
			sb.append(",street2=" + street2);
			sb.append(",zip=" + zip);
			sb.append(",city=" + city);
			sb.append(",state_id=" + state_id);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",partner_latitude=" + partner_latitude);
			sb.append(",partner_longitude=" + partner_longitude);
			sb.append(",email=" + email);
			sb.append(",phone=" + phone);
			sb.append(",mobile=" + mobile);
			sb.append(",is_company=" + String.valueOf(is_company));
			sb.append(",industry_id=" + industry_id);
			sb.append(",color=" + String.valueOf(color));
			sb.append(",partner_share=" + String.valueOf(partner_share));
			sb.append(",commercial_partner_id=" + String.valueOf(commercial_partner_id));
			sb.append(",commercial_company_name=" + commercial_company_name);
			sb.append(",company_name=" + company_name);
			sb.append(",create_uid=" + create_uid);
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",message_main_attachment_id=" + message_main_attachment_id);
			sb.append(",email_normalized=" + email_normalized);
			sb.append(",message_bounce=" + String.valueOf(message_bounce));
			sb.append(",signup_token=" + signup_token);
			sb.append(",signup_type=" + signup_type);
			sb.append(",signup_expiration=" + signup_expiration);
			sb.append(",team_id=" + team_id);
			sb.append(",partner_gid=" + partner_gid);
			sb.append(",additional_info=" + additional_info);
			sb.append(",phone_sanitized=" + phone_sanitized);
			sb.append(",debit_limit=" + debit_limit);
			sb.append(",last_time_entries_checked=" + last_time_entries_checked);
			sb.append(",invoice_warn=" + invoice_warn);
			sb.append(",invoice_warn_msg=" + invoice_warn_msg);
			sb.append(",supplier_rank=" + String.valueOf(supplier_rank));
			sb.append(",customer_rank=" + String.valueOf(customer_rank));
			sb.append(",sale_warn=" + sale_warn);
			sb.append(",sale_warn_msg=" + sale_warn_msg);
			sb.append(",picking_warn=" + picking_warn);
			sb.append(",picking_warn_msg=" + picking_warn_msg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(resPartnerStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public String display_name;

		public String getDisplay_name() {
			return this.display_name;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String parent_id;

		public String getParent_id() {
			return this.parent_id;
		}

		public String ref;

		public String getRef() {
			return this.ref;
		}

		public String lang;

		public String getLang() {
			return this.lang;
		}

		public String tz;

		public String getTz() {
			return this.tz;
		}

		public String user_id;

		public String getUser_id() {
			return this.user_id;
		}

		public String vat;

		public String getVat() {
			return this.vat;
		}

		public String website;

		public String getWebsite() {
			return this.website;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String credit_limit;

		public String getCredit_limit() {
			return this.credit_limit;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public String employee;

		public String getEmployee() {
			return this.employee;
		}

		public String function;

		public String getFunction() {
			return this.function;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String street2;

		public String getStreet2() {
			return this.street2;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state_id;

		public String getState_id() {
			return this.state_id;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String partner_latitude;

		public String getPartner_latitude() {
			return this.partner_latitude;
		}

		public String partner_longitude;

		public String getPartner_longitude() {
			return this.partner_longitude;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String mobile;

		public String getMobile() {
			return this.mobile;
		}

		public Boolean is_company;

		public Boolean getIs_company() {
			return this.is_company;
		}

		public String industry_id;

		public String getIndustry_id() {
			return this.industry_id;
		}

		public Integer color;

		public Integer getColor() {
			return this.color;
		}

		public Boolean partner_share;

		public Boolean getPartner_share() {
			return this.partner_share;
		}

		public Integer commercial_partner_id;

		public Integer getCommercial_partner_id() {
			return this.commercial_partner_id;
		}

		public String commercial_company_name;

		public String getCommercial_company_name() {
			return this.commercial_company_name;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String create_uid;

		public String getCreate_uid() {
			return this.create_uid;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public String message_main_attachment_id;

		public String getMessage_main_attachment_id() {
			return this.message_main_attachment_id;
		}

		public String email_normalized;

		public String getEmail_normalized() {
			return this.email_normalized;
		}

		public Integer message_bounce;

		public Integer getMessage_bounce() {
			return this.message_bounce;
		}

		public String signup_token;

		public String getSignup_token() {
			return this.signup_token;
		}

		public String signup_type;

		public String getSignup_type() {
			return this.signup_type;
		}

		public String signup_expiration;

		public String getSignup_expiration() {
			return this.signup_expiration;
		}

		public String team_id;

		public String getTeam_id() {
			return this.team_id;
		}

		public String partner_gid;

		public String getPartner_gid() {
			return this.partner_gid;
		}

		public String additional_info;

		public String getAdditional_info() {
			return this.additional_info;
		}

		public String phone_sanitized;

		public String getPhone_sanitized() {
			return this.phone_sanitized;
		}

		public String debit_limit;

		public String getDebit_limit() {
			return this.debit_limit;
		}

		public String last_time_entries_checked;

		public String getLast_time_entries_checked() {
			return this.last_time_entries_checked;
		}

		public String invoice_warn;

		public String getInvoice_warn() {
			return this.invoice_warn;
		}

		public String invoice_warn_msg;

		public String getInvoice_warn_msg() {
			return this.invoice_warn_msg;
		}

		public Integer supplier_rank;

		public Integer getSupplier_rank() {
			return this.supplier_rank;
		}

		public Integer customer_rank;

		public Integer getCustomer_rank() {
			return this.customer_rank;
		}

		public String sale_warn;

		public String getSale_warn() {
			return this.sale_warn;
		}

		public String sale_warn_msg;

		public String getSale_warn_msg() {
			return this.sale_warn_msg;
		}

		public String picking_warn;

		public String getPicking_warn() {
			return this.picking_warn;
		}

		public String picking_warn_msg;

		public String getPicking_warn_msg() {
			return this.picking_warn_msg;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_customerDim.length) {
					if (length < 1024 && commonByteArray_PACIFICO_customerDim.length == 0) {
						commonByteArray_PACIFICO_customerDim = new byte[1024];
					} else {
						commonByteArray_PACIFICO_customerDim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_customerDim, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_customerDim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.company_id = readInteger(dis);

					this.create_date = readDate(dis);

					this.display_name = readString(dis);

					this.date = readString(dis);

					this.title = readString(dis);

					this.parent_id = readString(dis);

					this.ref = readString(dis);

					this.lang = readString(dis);

					this.tz = readString(dis);

					this.user_id = readString(dis);

					this.vat = readString(dis);

					this.website = readString(dis);

					this.comment = readString(dis);

					this.credit_limit = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.employee = readString(dis);

					this.function = readString(dis);

					this.type = readString(dis);

					this.street = readString(dis);

					this.street2 = readString(dis);

					this.zip = readString(dis);

					this.city = readString(dis);

					this.state_id = readString(dis);

					this.country_id = readInteger(dis);

					this.partner_latitude = readString(dis);

					this.partner_longitude = readString(dis);

					this.email = readString(dis);

					this.phone = readString(dis);

					this.mobile = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_company = null;
					} else {
						this.is_company = dis.readBoolean();
					}

					this.industry_id = readString(dis);

					this.color = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.partner_share = null;
					} else {
						this.partner_share = dis.readBoolean();
					}

					this.commercial_partner_id = readInteger(dis);

					this.commercial_company_name = readString(dis);

					this.company_name = readString(dis);

					this.create_uid = readString(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.message_main_attachment_id = readString(dis);

					this.email_normalized = readString(dis);

					this.message_bounce = readInteger(dis);

					this.signup_token = readString(dis);

					this.signup_type = readString(dis);

					this.signup_expiration = readString(dis);

					this.team_id = readString(dis);

					this.partner_gid = readString(dis);

					this.additional_info = readString(dis);

					this.phone_sanitized = readString(dis);

					this.debit_limit = readString(dis);

					this.last_time_entries_checked = readString(dis);

					this.invoice_warn = readString(dis);

					this.invoice_warn_msg = readString(dis);

					this.supplier_rank = readInteger(dis);

					this.customer_rank = readInteger(dis);

					this.sale_warn = readString(dis);

					this.sale_warn_msg = readString(dis);

					this.picking_warn = readString(dis);

					this.picking_warn_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.company_id = readInteger(dis);

					this.create_date = readDate(dis);

					this.display_name = readString(dis);

					this.date = readString(dis);

					this.title = readString(dis);

					this.parent_id = readString(dis);

					this.ref = readString(dis);

					this.lang = readString(dis);

					this.tz = readString(dis);

					this.user_id = readString(dis);

					this.vat = readString(dis);

					this.website = readString(dis);

					this.comment = readString(dis);

					this.credit_limit = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.employee = readString(dis);

					this.function = readString(dis);

					this.type = readString(dis);

					this.street = readString(dis);

					this.street2 = readString(dis);

					this.zip = readString(dis);

					this.city = readString(dis);

					this.state_id = readString(dis);

					this.country_id = readInteger(dis);

					this.partner_latitude = readString(dis);

					this.partner_longitude = readString(dis);

					this.email = readString(dis);

					this.phone = readString(dis);

					this.mobile = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_company = null;
					} else {
						this.is_company = dis.readBoolean();
					}

					this.industry_id = readString(dis);

					this.color = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.partner_share = null;
					} else {
						this.partner_share = dis.readBoolean();
					}

					this.commercial_partner_id = readInteger(dis);

					this.commercial_company_name = readString(dis);

					this.company_name = readString(dis);

					this.create_uid = readString(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.message_main_attachment_id = readString(dis);

					this.email_normalized = readString(dis);

					this.message_bounce = readInteger(dis);

					this.signup_token = readString(dis);

					this.signup_type = readString(dis);

					this.signup_expiration = readString(dis);

					this.team_id = readString(dis);

					this.partner_gid = readString(dis);

					this.additional_info = readString(dis);

					this.phone_sanitized = readString(dis);

					this.debit_limit = readString(dis);

					this.last_time_entries_checked = readString(dis);

					this.invoice_warn = readString(dis);

					this.invoice_warn_msg = readString(dis);

					this.supplier_rank = readInteger(dis);

					this.customer_rank = readInteger(dis);

					this.sale_warn = readString(dis);

					this.sale_warn_msg = readString(dis);

					this.picking_warn = readString(dis);

					this.picking_warn_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// String

				writeString(this.display_name, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.parent_id, dos);

				// String

				writeString(this.ref, dos);

				// String

				writeString(this.lang, dos);

				// String

				writeString(this.tz, dos);

				// String

				writeString(this.user_id, dos);

				// String

				writeString(this.vat, dos);

				// String

				writeString(this.website, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.credit_limit, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// String

				writeString(this.employee, dos);

				// String

				writeString(this.function, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street2, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state_id, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.partner_latitude, dos);

				// String

				writeString(this.partner_longitude, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.mobile, dos);

				// Boolean

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				// String

				writeString(this.industry_id, dos);

				// Integer

				writeInteger(this.color, dos);

				// Boolean

				if (this.partner_share == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.partner_share);
				}

				// Integer

				writeInteger(this.commercial_partner_id, dos);

				// String

				writeString(this.commercial_company_name, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.create_uid, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// String

				writeString(this.message_main_attachment_id, dos);

				// String

				writeString(this.email_normalized, dos);

				// Integer

				writeInteger(this.message_bounce, dos);

				// String

				writeString(this.signup_token, dos);

				// String

				writeString(this.signup_type, dos);

				// String

				writeString(this.signup_expiration, dos);

				// String

				writeString(this.team_id, dos);

				// String

				writeString(this.partner_gid, dos);

				// String

				writeString(this.additional_info, dos);

				// String

				writeString(this.phone_sanitized, dos);

				// String

				writeString(this.debit_limit, dos);

				// String

				writeString(this.last_time_entries_checked, dos);

				// String

				writeString(this.invoice_warn, dos);

				// String

				writeString(this.invoice_warn_msg, dos);

				// Integer

				writeInteger(this.supplier_rank, dos);

				// Integer

				writeInteger(this.customer_rank, dos);

				// String

				writeString(this.sale_warn, dos);

				// String

				writeString(this.sale_warn_msg, dos);

				// String

				writeString(this.picking_warn, dos);

				// String

				writeString(this.picking_warn_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// String

				writeString(this.display_name, dos);

				// String

				writeString(this.date, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.parent_id, dos);

				// String

				writeString(this.ref, dos);

				// String

				writeString(this.lang, dos);

				// String

				writeString(this.tz, dos);

				// String

				writeString(this.user_id, dos);

				// String

				writeString(this.vat, dos);

				// String

				writeString(this.website, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.credit_limit, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// String

				writeString(this.employee, dos);

				// String

				writeString(this.function, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street2, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state_id, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.partner_latitude, dos);

				// String

				writeString(this.partner_longitude, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.mobile, dos);

				// Boolean

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				// String

				writeString(this.industry_id, dos);

				// Integer

				writeInteger(this.color, dos);

				// Boolean

				if (this.partner_share == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.partner_share);
				}

				// Integer

				writeInteger(this.commercial_partner_id, dos);

				// String

				writeString(this.commercial_company_name, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.create_uid, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// String

				writeString(this.message_main_attachment_id, dos);

				// String

				writeString(this.email_normalized, dos);

				// Integer

				writeInteger(this.message_bounce, dos);

				// String

				writeString(this.signup_token, dos);

				// String

				writeString(this.signup_type, dos);

				// String

				writeString(this.signup_expiration, dos);

				// String

				writeString(this.team_id, dos);

				// String

				writeString(this.partner_gid, dos);

				// String

				writeString(this.additional_info, dos);

				// String

				writeString(this.phone_sanitized, dos);

				// String

				writeString(this.debit_limit, dos);

				// String

				writeString(this.last_time_entries_checked, dos);

				// String

				writeString(this.invoice_warn, dos);

				// String

				writeString(this.invoice_warn_msg, dos);

				// Integer

				writeInteger(this.supplier_rank, dos);

				// Integer

				writeInteger(this.customer_rank, dos);

				// String

				writeString(this.sale_warn, dos);

				// String

				writeString(this.sale_warn_msg, dos);

				// String

				writeString(this.picking_warn, dos);

				// String

				writeString(this.picking_warn_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",display_name=" + display_name);
			sb.append(",date=" + date);
			sb.append(",title=" + title);
			sb.append(",parent_id=" + parent_id);
			sb.append(",ref=" + ref);
			sb.append(",lang=" + lang);
			sb.append(",tz=" + tz);
			sb.append(",user_id=" + user_id);
			sb.append(",vat=" + vat);
			sb.append(",website=" + website);
			sb.append(",comment=" + comment);
			sb.append(",credit_limit=" + credit_limit);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",employee=" + employee);
			sb.append(",function=" + function);
			sb.append(",type=" + type);
			sb.append(",street=" + street);
			sb.append(",street2=" + street2);
			sb.append(",zip=" + zip);
			sb.append(",city=" + city);
			sb.append(",state_id=" + state_id);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",partner_latitude=" + partner_latitude);
			sb.append(",partner_longitude=" + partner_longitude);
			sb.append(",email=" + email);
			sb.append(",phone=" + phone);
			sb.append(",mobile=" + mobile);
			sb.append(",is_company=" + String.valueOf(is_company));
			sb.append(",industry_id=" + industry_id);
			sb.append(",color=" + String.valueOf(color));
			sb.append(",partner_share=" + String.valueOf(partner_share));
			sb.append(",commercial_partner_id=" + String.valueOf(commercial_partner_id));
			sb.append(",commercial_company_name=" + commercial_company_name);
			sb.append(",company_name=" + company_name);
			sb.append(",create_uid=" + create_uid);
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",message_main_attachment_id=" + message_main_attachment_id);
			sb.append(",email_normalized=" + email_normalized);
			sb.append(",message_bounce=" + String.valueOf(message_bounce));
			sb.append(",signup_token=" + signup_token);
			sb.append(",signup_type=" + signup_type);
			sb.append(",signup_expiration=" + signup_expiration);
			sb.append(",team_id=" + team_id);
			sb.append(",partner_gid=" + partner_gid);
			sb.append(",additional_info=" + additional_info);
			sb.append(",phone_sanitized=" + phone_sanitized);
			sb.append(",debit_limit=" + debit_limit);
			sb.append(",last_time_entries_checked=" + last_time_entries_checked);
			sb.append(",invoice_warn=" + invoice_warn);
			sb.append(",invoice_warn_msg=" + invoice_warn_msg);
			sb.append(",supplier_rank=" + String.valueOf(supplier_rank));
			sb.append(",customer_rank=" + String.valueOf(customer_rank));
			sb.append(",sale_warn=" + sale_warn);
			sb.append(",sale_warn_msg=" + sale_warn_msg);
			sb.append(",picking_warn=" + picking_warn);
			sb.append(",picking_warn_msg=" + picking_warn_msg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_4Process(globalMap);

				resPartnerStruct resPartner = new resPartnerStruct();
				CustomerDimStruct CustomerDim = new CustomerDimStruct();
				CustomerDimStruct row1 = CustomerDim;

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimCustomer.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("customer_key");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("name");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("country");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("company");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("street");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("street_2");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("city");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("state");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "CustomerDim");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[8];

					public void addRow(String[] row) {

						for (int i = 0; i < 8; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 7 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "customer_key", "name", "country", "company", "street", "street_2",
						"city", "state", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "resPartner");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStruct> tHash_Lookup_resCountry = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStruct>) globalMap
						.get("tHash_Lookup_resCountry"));

				resCountryStruct resCountryHashKey = new resCountryStruct();
				resCountryStruct resCountryDefault = new resCountryStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStateStruct> tHash_Lookup_resCountryState = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStateStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStateStruct>) globalMap
						.get("tHash_Lookup_resCountryState"));

				resCountryStateStruct resCountryStateHashKey = new resCountryStateStruct();
				resCountryStateStruct resCountryStateDefault = new resCountryStateStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCompanyStruct> tHash_Lookup_resCompany = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCompanyStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCompanyStruct>) globalMap
						.get("tHash_Lookup_resCompany"));

				resCompanyStruct resCompanyHashKey = new resCompanyStruct();
				resCompanyStruct resCompanyDefault = new resCompanyStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				CustomerDimStruct CustomerDim_tmp = new CustomerDimStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resPartner.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resPartner.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						resPartner = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						resPartner = new resPartnerStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.id = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							resPartner.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.company_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"company_id", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.company_id = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_date", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.create_date = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							resPartner.display_name = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							resPartner.date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							resPartner.title = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							resPartner.parent_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							resPartner.ref = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							resPartner.lang = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							resPartner.tz = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							resPartner.user_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							resPartner.vat = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							resPartner.website = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							resPartner.comment = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							resPartner.credit_limit = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.active = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"active", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.active = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 17;

							resPartner.employee = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							resPartner.function = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							resPartner.type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							resPartner.street = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							resPartner.street2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							resPartner.zip = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							resPartner.city = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							resPartner.state_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.country_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"country_id", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.country_id = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 26;

							resPartner.partner_latitude = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							resPartner.partner_longitude = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 28;

							resPartner.email = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 29;

							resPartner.phone = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 30;

							resPartner.mobile = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 31;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.is_company = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"is_company", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.is_company = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 32;

							resPartner.industry_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 33;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.color = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"color", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.color = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 34;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.partner_share = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"partner_share", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.partner_share = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 35;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.commercial_partner_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"commercial_partner_id", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.commercial_partner_id = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 36;

							resPartner.commercial_company_name = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 37;

							resPartner.company_name = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 38;

							resPartner.create_uid = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 39;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.write_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_uid", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.write_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 40;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_date", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.write_date = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 41;

							resPartner.message_main_attachment_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 42;

							resPartner.email_normalized = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 43;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.message_bounce = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"message_bounce", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.message_bounce = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 44;

							resPartner.signup_token = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 45;

							resPartner.signup_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 46;

							resPartner.signup_expiration = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 47;

							resPartner.team_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 48;

							resPartner.partner_gid = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 49;

							resPartner.additional_info = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 50;

							resPartner.phone_sanitized = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 51;

							resPartner.debit_limit = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 52;

							resPartner.last_time_entries_checked = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 53;

							resPartner.invoice_warn = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 54;

							resPartner.invoice_warn_msg = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 55;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.supplier_rank = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"supplier_rank", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.supplier_rank = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 56;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									resPartner.customer_rank = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"customer_rank", "resPartner", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								resPartner.customer_rank = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 57;

							resPartner.sale_warn = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 58;

							resPartner.sale_warn_msg = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 59;

							resPartner.picking_warn = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 60;

							resPartner.picking_warn_msg = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							resPartner = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "resPartner"
						if (resPartner != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "resPartner"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "resCountry"
							///////////////////////////////////////////////

							boolean forceLoopresCountry = false;

							resCountryStruct resCountryObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								resCountryHashKey.id = resPartner.country_id;

								resCountryHashKey.hashCodeDirty = true;

								tHash_Lookup_resCountry.lookup(resCountryHashKey);

								if (!tHash_Lookup_resCountry.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_resCountry != null
									&& tHash_Lookup_resCountry.getCount(resCountryHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'resCountry' and it contains more one result from keys : resCountry.id = '" +
								// resCountryHashKey.id + "'");
							} // G 071

							resCountryStruct resCountry = null;

							resCountryStruct fromLookup_resCountry = null;
							resCountry = resCountryDefault;

							if (tHash_Lookup_resCountry != null && tHash_Lookup_resCountry.hasNext()) { // G 099

								fromLookup_resCountry = tHash_Lookup_resCountry.next();

							} // G 099

							if (fromLookup_resCountry != null) {
								resCountry = fromLookup_resCountry;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "resCountryState"
							///////////////////////////////////////////////

							boolean forceLoopresCountryState = false;

							resCountryStateStruct resCountryStateObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								resCountryStateHashKey.id = resCountry.id;

								resCountryStateHashKey.hashCodeDirty = true;

								tHash_Lookup_resCountryState.lookup(resCountryStateHashKey);

								if (!tHash_Lookup_resCountryState.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_resCountryState != null
									&& tHash_Lookup_resCountryState.getCount(resCountryStateHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'resCountryState' and it contains more one result from keys :
								// resCountryState.id = '" + resCountryStateHashKey.id + "'");
							} // G 071

							resCountryStateStruct resCountryState = null;

							resCountryStateStruct fromLookup_resCountryState = null;
							resCountryState = resCountryStateDefault;

							if (tHash_Lookup_resCountryState != null && tHash_Lookup_resCountryState.hasNext()) { // G
																													// 099

								fromLookup_resCountryState = tHash_Lookup_resCountryState.next();

							} // G 099

							if (fromLookup_resCountryState != null) {
								resCountryState = fromLookup_resCountryState;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "resCompany"
							///////////////////////////////////////////////

							boolean forceLoopresCompany = false;

							resCompanyStruct resCompanyObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								resCompanyHashKey.id = resPartner.company_id;

								resCompanyHashKey.hashCodeDirty = true;

								tHash_Lookup_resCompany.lookup(resCompanyHashKey);

								if (!tHash_Lookup_resCompany.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_resCompany != null
									&& tHash_Lookup_resCompany.getCount(resCompanyHashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'resCompany' and it contains more one result from keys : resCompany.id = '" +
								// resCompanyHashKey.id + "'");
							} // G 071

							resCompanyStruct resCompany = null;

							resCompanyStruct fromLookup_resCompany = null;
							resCompany = resCompanyDefault;

							if (tHash_Lookup_resCompany != null && tHash_Lookup_resCompany.hasNext()) { // G 099

								fromLookup_resCompany = tHash_Lookup_resCompany.next();

							} // G 099

							if (fromLookup_resCompany != null) {
								resCompany = fromLookup_resCompany;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								CustomerDim = null;

								if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'CustomerDim'
									CustomerDim_tmp.customer_key = Numeric.sequence("CustomerDimSeq", 1, 1);
									CustomerDim_tmp.name = resPartner.name;
									CustomerDim_tmp.country = resCountry.name;
									CustomerDim_tmp.company = resCompany.name;
									CustomerDim_tmp.street = resPartner.street;
									CustomerDim_tmp.street_2 = resPartner.street2;
									CustomerDim_tmp.city = resPartner.city;
									CustomerDim_tmp.state = resCountryState.name;
									CustomerDim = CustomerDim_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "CustomerDim"
							if (CustomerDim != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "CustomerDim"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[8];

								if (CustomerDim.customer_key != null) { //
									row_tLogRow_1[0] = String.valueOf(CustomerDim.customer_key);

								} //

								if (CustomerDim.name != null) { //
									row_tLogRow_1[1] = String.valueOf(CustomerDim.name);

								} //

								if (CustomerDim.country != null) { //
									row_tLogRow_1[2] = String.valueOf(CustomerDim.country);

								} //

								if (CustomerDim.company != null) { //
									row_tLogRow_1[3] = String.valueOf(CustomerDim.company);

								} //

								if (CustomerDim.street != null) { //
									row_tLogRow_1[4] = String.valueOf(CustomerDim.street);

								} //

								if (CustomerDim.street_2 != null) { //
									row_tLogRow_1[5] = String.valueOf(CustomerDim.street_2);

								} //

								if (CustomerDim.city != null) { //
									row_tLogRow_1[6] = String.valueOf(CustomerDim.city);

								} //

								if (CustomerDim.state != null) { //
									row_tLogRow_1[7] = String.valueOf(CustomerDim.state);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								row1 = CustomerDim;

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row1"

									);
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								if (row1.customer_key != null) {
									sb_tFileOutputDelimited_1.append(row1.customer_key);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.name != null) {
									sb_tFileOutputDelimited_1.append(row1.name);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.country != null) {
									sb_tFileOutputDelimited_1.append(row1.country);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.company != null) {
									sb_tFileOutputDelimited_1.append(row1.company);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.street != null) {
									sb_tFileOutputDelimited_1.append(row1.street);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.street_2 != null) {
									sb_tFileOutputDelimited_1.append(row1.street_2);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.city != null) {
									sb_tFileOutputDelimited_1.append(row1.city);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row1.state != null) {
									sb_tFileOutputDelimited_1.append(row1.state);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "CustomerDim"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "resPartner"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resPartner.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_resCountry != null) {
					tHash_Lookup_resCountry.endGet();
				}
				globalMap.remove("tHash_Lookup_resCountry");

				if (tHash_Lookup_resCountryState != null) {
					tHash_Lookup_resCountryState.endGet();
				}
				globalMap.remove("tHash_Lookup_resCountryState");

				if (tHash_Lookup_resCompany != null) {
					tHash_Lookup_resCompany.endGet();
				}
				globalMap.remove("tHash_Lookup_resCompany");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "resPartner");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "CustomerDim");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Connection_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_resCountry");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_resCompany");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_resCountryState");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:4u/UYK4B4md5IERlg6IgpzkXNfR8QfhY3XGGhlZOvnQt9YZygqYI7kqhhb44yvdVdLktaJuQUYV2OjVvfNHnMfw1Ssc=");

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIAVMNG53PS4LMU54AJ", decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder
						.standard();

				final boolean useRegionEndpoint_tS3Connection_1 = false;
				final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
				final boolean enableAccelerateMode_tS3Connection_1 = false;
				final boolean enablePathStyleAccess_tS3Connection_1 = false;

				if (useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null
						&& !regionEndpoint_tS3Connection_1.isEmpty()) {
					builder_tS3Connection_1
							.withEndpointConfiguration(
									new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(
											regionEndpoint_tS3Connection_1, null))
							.withForceGlobalBucketAccessEnabled(true);
				} else {
					builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
							.withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try
																		// again in the correct region
				}

				if (enableAccelerateMode_tS3Connection_1) {
					builder_tS3Connection_1.withAccelerateModeEnabled(true);
				}

				builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1)
						.withClientConfiguration(cc_tS3Connection_1);

				if (useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
					builder_tS3Connection_1.enablePathStyleAccess();
				}

				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();

				// This method is just for test connection.
				conn_tS3Connection_1.getS3AccountOwner();

				globalMap.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Put_1Process(globalMap);

				/**
				 * [tS3Connection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_1 begin ] start
				 */

				ok_Hash.put("tS3Put_1", false);
				start_Hash.put("tS3Put_1", System.currentTimeMillis());

				currentComponent = "tS3Put_1";

				int tos_count_tS3Put_1 = 0;

				String millisecTime_tS3Put_1 = null;

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_1 = "DimCustomer.csv";

				int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
				if (partSizeInBytes_tS3Put_1 < 5 << 20) {

					partSizeInBytes_tS3Put_1 = 5 << 20;
				}

				Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimCustomer.csv";

				boolean useStream_tS3Put_1 = false;
				java.io.InputStream uploadStream_tS3Put_1 = null;

				com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;

				try {

					if (fileOrStream_tS3Put_1 instanceof String) {
						useStream_tS3Put_1 = false;
					} else if (fileOrStream_tS3Put_1 instanceof java.io.InputStream) {
						useStream_tS3Put_1 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_1) {
						java.io.File inputFile_tS3Put_1 = new java.io.File((String) fileOrStream_tS3Put_1);

						long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;

						tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder.standard()
								.withMinimumUploadPartSize((long) partSizeInBytes_tS3Put_1)
								.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
								.withS3Client(conn_tS3Put_1).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"libreriapacifico/presentation", key_tS3Put_1, inputFile_tS3Put_1)
										.withMetadata(objectMetadata_tS3Put_1);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1
								.upload(putRequest_tS3Put_1);

						upload_tS3Put_1.waitForCompletion();

					} else {
						java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream) fileOrStream_tS3Put_1);

						class S3StreamUtil {
							// read content to buffer as many as possible
							public int readFully(final java.io.InputStream input, final byte[] buffer)
									throws java.io.IOException {
								return readFully(input, buffer, 0, buffer.length);
							}

							public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset,
									final int length) throws java.io.IOException {
								if (length < 0) {
									throw new java.lang.IllegalArgumentException(
											"Length must not be negative: " + length);
								}

								int remaining = length;
								while (remaining > 0) {
									final int location = length - remaining;
									final int count = input.read(buffer, offset + location, remaining);
									if (count == -1) {
										break;
									}
									remaining -= count;
								}
								return length - remaining;
							}
						}

						S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
						byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
						long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
								buffer_tS3Put_1);

						boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;

						if (!multiUpload_tS3Put_1) {
							objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1, 0,
									Long.valueOf(curPartSize_tS3Put_1).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"libreriapacifico/presentation", key_tS3Put_1, uploadStream_tS3Put_1,
									objectMetadata_tS3Put_1);

							conn_tS3Put_1.putObject(putRequest_tS3Put_1);
						} else {
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"libreriapacifico/presentation", key_tS3Put_1, objectMetadata_tS3Put_1);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1
									.initiateMultipartUpload(putRequest_tS3Put_1);
							String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
							int partNumber_tS3Put_1 = 1;
							boolean streamHasNext_tS3Put_1 = true;
							byte[] probeAvailability_tS3Put_1 = new byte[1];
							try {
								while (streamHasNext_tS3Put_1) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("libreriapacifico/presentation").withKey(key_tS3Put_1)
											.withUploadId(uploadId_tS3Put_1).withPartNumber(partNumber_tS3Put_1)
											.withPartSize(curPartSize_tS3Put_1);
									uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
									streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
											probeAvailability_tS3Put_1));
									if (!streamHasNext_tS3Put_1) {
										uploadRequest_tS3Put_1.setLastPart(true);
									}

									partTags_tS3Put_1
											.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
									partNumber_tS3Put_1++;

									if (uploadStream_tS3Put_1 != null) {
										uploadStream_tS3Put_1.close();
									}
									buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
									curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
											buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1 - 1);
									buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
									probeAvailability_tS3Put_1 = new byte[1];
									uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"libreriapacifico/presentation", key_tS3Put_1, uploadId_tS3Put_1,
										partTags_tS3Put_1);
								conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
							} catch (java.lang.Exception uploadException_tS3Put_1) {
								globalMap.put("tS3Put_1_ERROR_MESSAGE", uploadException_tS3Put_1.getMessage());
								conn_tS3Put_1.abortMultipartUpload(
										new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"libreriapacifico/presentation", key_tS3Put_1, uploadId_tS3Put_1));
								throw uploadException_tS3Put_1;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_1) {
					globalMap.put("tS3Put_1_ERROR_MESSAGE", e_tS3Put_1.getMessage());

					System.err.println(e_tS3Put_1.getMessage());

				} finally {
					if (useStream_tS3Put_1 && uploadStream_tS3Put_1 != null) {
						uploadStream_tS3Put_1.close();
					}

					if (tm_tS3Put_1 != null) {
						tm_tS3Put_1.shutdownNow(false);
					}

				}

				/**
				 * [tS3Put_1 begin ] stop
				 */

				/**
				 * [tS3Put_1 main ] start
				 */

				currentComponent = "tS3Put_1";

				tos_count_tS3Put_1++;

				/**
				 * [tS3Put_1 main ] stop
				 */

				/**
				 * [tS3Put_1 process_data_begin ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_1 process_data_end ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_end ] stop
				 */

				/**
				 * [tS3Put_1 end ] start
				 */

				currentComponent = "tS3Put_1";

				ok_Hash.put("tS3Put_1", true);
				end_Hash.put("tS3Put_1", System.currentTimeMillis());

				/**
				 * [tS3Put_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_1 finally ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}

	public static class resCountryStruct implements routines.system.IPersistableComparableLookupRow<resCountryStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String address_view_id;

		public String getAddress_view_id() {
			return this.address_view_id;
		}

		public String currency_id;

		public String getCurrency_id() {
			return this.currency_id;
		}

		public String phone_code;

		public String getPhone_code() {
			return this.phone_code;
		}

		public String name_position;

		public String getName_position() {
			return this.name_position;
		}

		public String vat_label;

		public String getVat_label() {
			return this.vat_label;
		}

		public String state_required;

		public String getState_required() {
			return this.state_required;
		}

		public String zip_required;

		public String getZip_required() {
			return this.zip_required;
		}

		public String create_uid;

		public String getCreate_uid() {
			return this.create_uid;
		}

		public String create_date;

		public String getCreate_date() {
			return this.create_date;
		}

		public String write_uid;

		public String getWrite_uid() {
			return this.write_uid;
		}

		public String write_date;

		public String getWrite_date() {
			return this.write_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final resCountryStruct other = (resCountryStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(resCountryStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.code = this.code;
			other.address_view_id = this.address_view_id;
			other.currency_id = this.currency_id;
			other.phone_code = this.phone_code;
			other.name_position = this.name_position;
			other.vat_label = this.vat_label;
			other.state_required = this.state_required;
			other.zip_required = this.zip_required;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_uid = this.write_uid;
			other.write_date = this.write_date;

		}

		public void copyKeysDataTo(resCountryStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.code = readString(dis, ois);

				this.address_view_id = readString(dis, ois);

				this.currency_id = readString(dis, ois);

				this.phone_code = readString(dis, ois);

				this.name_position = readString(dis, ois);

				this.vat_label = readString(dis, ois);

				this.state_required = readString(dis, ois);

				this.zip_required = readString(dis, ois);

				this.create_uid = readString(dis, ois);

				this.create_date = readString(dis, ois);

				this.write_uid = readString(dis, ois);

				this.write_date = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.name = readString(dis, objectIn);

				this.code = readString(dis, objectIn);

				this.address_view_id = readString(dis, objectIn);

				this.currency_id = readString(dis, objectIn);

				this.phone_code = readString(dis, objectIn);

				this.name_position = readString(dis, objectIn);

				this.vat_label = readString(dis, objectIn);

				this.state_required = readString(dis, objectIn);

				this.zip_required = readString(dis, objectIn);

				this.create_uid = readString(dis, objectIn);

				this.create_date = readString(dis, objectIn);

				this.write_uid = readString(dis, objectIn);

				this.write_date = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.code, dos, oos);

				writeString(this.address_view_id, dos, oos);

				writeString(this.currency_id, dos, oos);

				writeString(this.phone_code, dos, oos);

				writeString(this.name_position, dos, oos);

				writeString(this.vat_label, dos, oos);

				writeString(this.state_required, dos, oos);

				writeString(this.zip_required, dos, oos);

				writeString(this.create_uid, dos, oos);

				writeString(this.create_date, dos, oos);

				writeString(this.write_uid, dos, oos);

				writeString(this.write_date, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.name, dos, objectOut);

				writeString(this.code, dos, objectOut);

				writeString(this.address_view_id, dos, objectOut);

				writeString(this.currency_id, dos, objectOut);

				writeString(this.phone_code, dos, objectOut);

				writeString(this.name_position, dos, objectOut);

				writeString(this.vat_label, dos, objectOut);

				writeString(this.state_required, dos, objectOut);

				writeString(this.zip_required, dos, objectOut);

				writeString(this.create_uid, dos, objectOut);

				writeString(this.create_date, dos, objectOut);

				writeString(this.write_uid, dos, objectOut);

				writeString(this.write_date, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",code=" + code);
			sb.append(",address_view_id=" + address_view_id);
			sb.append(",currency_id=" + currency_id);
			sb.append(",phone_code=" + phone_code);
			sb.append(",name_position=" + name_position);
			sb.append(",vat_label=" + vat_label);
			sb.append(",state_required=" + state_required);
			sb.append(",zip_required=" + zip_required);
			sb.append(",create_uid=" + create_uid);
			sb.append(",create_date=" + create_date);
			sb.append(",write_uid=" + write_uid);
			sb.append(",write_date=" + write_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(resCountryStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				resCountryStruct resCountry = new resCountryStruct();

				/**
				 * [tAdvancedHash_resCountry begin ] start
				 */

				ok_Hash.put("tAdvancedHash_resCountry", false);
				start_Hash.put("tAdvancedHash_resCountry", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_resCountry";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "resCountry");
				}

				int tos_count_tAdvancedHash_resCountry = 0;

				// connection name:resCountry
				// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_2)
				// outputs:(resCountry,resCountry) | target node:tAdvancedHash_resCountry -
				// inputs:(resCountry) outputs:()
				// linked node: tMap_1 -
				// inputs:(resPartner,resCountry,resCompany,resCountryState)
				// outputs:(CustomerDim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_resCountry = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStruct> tHash_Lookup_resCountry = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<resCountryStruct>getLookup(matchingModeEnum_resCountry);

				globalMap.put("tHash_Lookup_resCountry", tHash_Lookup_resCountry);

				/**
				 * [tAdvancedHash_resCountry begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCountry.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCountry.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						resCountry = null;

						resCountry = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						resCountry = new resCountryStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									resCountry.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "resCountry", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								resCountry.id = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							resCountry.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							resCountry.code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							resCountry.address_view_id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							resCountry.currency_id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							resCountry.phone_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							resCountry.name_position = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							resCountry.vat_label = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							resCountry.state_required = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							resCountry.zip_required = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							resCountry.create_uid = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							resCountry.create_date = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							resCountry.write_uid = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							resCountry.write_date = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							resCountry = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "resCountry"
						if (resCountry != null) {

							/**
							 * [tAdvancedHash_resCountry main ] start
							 */

							currentComponent = "tAdvancedHash_resCountry";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "resCountry"

								);
							}

							resCountryStruct resCountry_HashRow = new resCountryStruct();

							resCountry_HashRow.id = resCountry.id;

							resCountry_HashRow.name = resCountry.name;

							resCountry_HashRow.code = resCountry.code;

							resCountry_HashRow.address_view_id = resCountry.address_view_id;

							resCountry_HashRow.currency_id = resCountry.currency_id;

							resCountry_HashRow.phone_code = resCountry.phone_code;

							resCountry_HashRow.name_position = resCountry.name_position;

							resCountry_HashRow.vat_label = resCountry.vat_label;

							resCountry_HashRow.state_required = resCountry.state_required;

							resCountry_HashRow.zip_required = resCountry.zip_required;

							resCountry_HashRow.create_uid = resCountry.create_uid;

							resCountry_HashRow.create_date = resCountry.create_date;

							resCountry_HashRow.write_uid = resCountry.write_uid;

							resCountry_HashRow.write_date = resCountry.write_date;

							tHash_Lookup_resCountry.put(resCountry_HashRow);

							tos_count_tAdvancedHash_resCountry++;

							/**
							 * [tAdvancedHash_resCountry main ] stop
							 */

							/**
							 * [tAdvancedHash_resCountry process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_resCountry";

							/**
							 * [tAdvancedHash_resCountry process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_resCountry process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_resCountry";

							/**
							 * [tAdvancedHash_resCountry process_data_end ] stop
							 */

						} // End of branch "resCountry"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCountry.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_resCountry end ] start
				 */

				currentComponent = "tAdvancedHash_resCountry";

				tHash_Lookup_resCountry.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "resCountry");
				}

				ok_Hash.put("tAdvancedHash_resCountry", true);
				end_Hash.put("tAdvancedHash_resCountry", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_resCountry end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_resCountry finally ] start
				 */

				currentComponent = "tAdvancedHash_resCountry";

				/**
				 * [tAdvancedHash_resCountry finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class resCompanyStruct implements routines.system.IPersistableComparableLookupRow<resCompanyStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public Integer currency_id;

		public Integer getCurrency_id() {
			return this.currency_id;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public String parent_id;

		public String getParent_id() {
			return this.parent_id;
		}

		public String report_header;

		public String getReport_header() {
			return this.report_header;
		}

		public String report_footer;

		public String getReport_footer() {
			return this.report_footer;
		}

		public String company_details;

		public String getCompany_details() {
			return this.company_details;
		}

		public String logo_web;

		public String getLogo_web() {
			return this.logo_web;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Integer phone;

		public Integer getPhone() {
			return this.phone;
		}

		public String mobile;

		public String getMobile() {
			return this.mobile;
		}

		public String company_registry;

		public String getCompany_registry() {
			return this.company_registry;
		}

		public Integer paperformat_id;

		public Integer getPaperformat_id() {
			return this.paperformat_id;
		}

		public String external_report_layout_id;

		public String getExternal_report_layout_id() {
			return this.external_report_layout_id;
		}

		public String base_onboarding_company_state;

		public String getBase_onboarding_company_state() {
			return this.base_onboarding_company_state;
		}

		public String font;

		public String getFont() {
			return this.font;
		}

		public String primary_color;

		public String getPrimary_color() {
			return this.primary_color;
		}

		public String secondary_color;

		public String getSecondary_color() {
			return this.secondary_color;
		}

		public String layout_background;

		public String getLayout_background() {
			return this.layout_background;
		}

		public String create_uid;

		public String getCreate_uid() {
			return this.create_uid;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer resource_calendar_id;

		public Integer getResource_calendar_id() {
			return this.resource_calendar_id;
		}

		public String partner_gid;

		public String getPartner_gid() {
			return this.partner_gid;
		}

		public Boolean iap_enrich_auto_done;

		public Boolean getIap_enrich_auto_done() {
			return this.iap_enrich_auto_done;
		}

		public Boolean snailmail_color;

		public Boolean getSnailmail_color() {
			return this.snailmail_color;
		}

		public String snailmail_cover;

		public String getSnailmail_cover() {
			return this.snailmail_cover;
		}

		public String snailmail_duplex;

		public String getSnailmail_duplex() {
			return this.snailmail_duplex;
		}

		public Integer fiscalyear_last_day;

		public Integer getFiscalyear_last_day() {
			return this.fiscalyear_last_day;
		}

		public Integer fiscalyear_last_month;

		public Integer getFiscalyear_last_month() {
			return this.fiscalyear_last_month;
		}

		public String period_lock_date;

		public String getPeriod_lock_date() {
			return this.period_lock_date;
		}

		public String fiscalyear_lock_date;

		public String getFiscalyear_lock_date() {
			return this.fiscalyear_lock_date;
		}

		public String tax_lock_date;

		public String getTax_lock_date() {
			return this.tax_lock_date;
		}

		public Integer transfer_account_id;

		public Integer getTransfer_account_id() {
			return this.transfer_account_id;
		}

		public Boolean expects_chart_of_accounts;

		public Boolean getExpects_chart_of_accounts() {
			return this.expects_chart_of_accounts;
		}

		public Integer chart_template_id;

		public Integer getChart_template_id() {
			return this.chart_template_id;
		}

		public Integer bank_account_code_prefix;

		public Integer getBank_account_code_prefix() {
			return this.bank_account_code_prefix;
		}

		public Integer cash_account_code_prefix;

		public Integer getCash_account_code_prefix() {
			return this.cash_account_code_prefix;
		}

		public Integer default_cash_difference_income_account_id;

		public Integer getDefault_cash_difference_income_account_id() {
			return this.default_cash_difference_income_account_id;
		}

		public Integer default_cash_difference_expense_account_id;

		public Integer getDefault_cash_difference_expense_account_id() {
			return this.default_cash_difference_expense_account_id;
		}

		public Integer account_journal_suspense_account_id;

		public Integer getAccount_journal_suspense_account_id() {
			return this.account_journal_suspense_account_id;
		}

		public Integer account_journal_payment_debit_account_id;

		public Integer getAccount_journal_payment_debit_account_id() {
			return this.account_journal_payment_debit_account_id;
		}

		public Integer account_journal_payment_credit_account_id;

		public Integer getAccount_journal_payment_credit_account_id() {
			return this.account_journal_payment_credit_account_id;
		}

		public Integer transfer_account_code_prefix;

		public Integer getTransfer_account_code_prefix() {
			return this.transfer_account_code_prefix;
		}

		public Integer account_sale_tax_id;

		public Integer getAccount_sale_tax_id() {
			return this.account_sale_tax_id;
		}

		public Integer account_purchase_tax_id;

		public Integer getAccount_purchase_tax_id() {
			return this.account_purchase_tax_id;
		}

		public String tax_calculation_rounding_method;

		public String getTax_calculation_rounding_method() {
			return this.tax_calculation_rounding_method;
		}

		public Integer currency_exchange_journal_id;

		public Integer getCurrency_exchange_journal_id() {
			return this.currency_exchange_journal_id;
		}

		public Integer income_currency_exchange_account_id;

		public Integer getIncome_currency_exchange_account_id() {
			return this.income_currency_exchange_account_id;
		}

		public Integer expense_currency_exchange_account_id;

		public Integer getExpense_currency_exchange_account_id() {
			return this.expense_currency_exchange_account_id;
		}

		public Boolean anglo_saxon_accounting;

		public Boolean getAnglo_saxon_accounting() {
			return this.anglo_saxon_accounting;
		}

		public Integer property_stock_account_input_categ_id;

		public Integer getProperty_stock_account_input_categ_id() {
			return this.property_stock_account_input_categ_id;
		}

		public Integer property_stock_account_output_categ_id;

		public Integer getProperty_stock_account_output_categ_id() {
			return this.property_stock_account_output_categ_id;
		}

		public Integer property_stock_valuation_account_id;

		public Integer getProperty_stock_valuation_account_id() {
			return this.property_stock_valuation_account_id;
		}

		public String incoterm_id;

		public String getIncoterm_id() {
			return this.incoterm_id;
		}

		public String qr_code;

		public String getQr_code() {
			return this.qr_code;
		}

		public Boolean invoice_is_email;

		public Boolean getInvoice_is_email() {
			return this.invoice_is_email;
		}

		public Boolean invoice_is_print;

		public Boolean getInvoice_is_print() {
			return this.invoice_is_print;
		}

		public String account_opening_move_id;

		public String getAccount_opening_move_id() {
			return this.account_opening_move_id;
		}

		public java.util.Date account_opening_date;

		public java.util.Date getAccount_opening_date() {
			return this.account_opening_date;
		}

		public String account_setup_bank_data_state;

		public String getAccount_setup_bank_data_state() {
			return this.account_setup_bank_data_state;
		}

		public String account_setup_fy_data_state;

		public String getAccount_setup_fy_data_state() {
			return this.account_setup_fy_data_state;
		}

		public String account_setup_coa_state;

		public String getAccount_setup_coa_state() {
			return this.account_setup_coa_state;
		}

		public String account_setup_taxes_state;

		public String getAccount_setup_taxes_state() {
			return this.account_setup_taxes_state;
		}

		public String account_onboarding_invoice_layout_state;

		public String getAccount_onboarding_invoice_layout_state() {
			return this.account_onboarding_invoice_layout_state;
		}

		public String account_onboarding_create_invoice_state;

		public String getAccount_onboarding_create_invoice_state() {
			return this.account_onboarding_create_invoice_state;
		}

		public String account_onboarding_sale_tax_state;

		public String getAccount_onboarding_sale_tax_state() {
			return this.account_onboarding_sale_tax_state;
		}

		public String account_invoice_onboarding_state;

		public String getAccount_invoice_onboarding_state() {
			return this.account_invoice_onboarding_state;
		}

		public String account_dashboard_onboarding_state;

		public String getAccount_dashboard_onboarding_state() {
			return this.account_dashboard_onboarding_state;
		}

		public String invoice_terms;

		public String getInvoice_terms() {
			return this.invoice_terms;
		}

		public String terms_type;

		public String getTerms_type() {
			return this.terms_type;
		}

		public String invoice_terms_html;

		public String getInvoice_terms_html() {
			return this.invoice_terms_html;
		}

		public String account_setup_bill_state;

		public String getAccount_setup_bill_state() {
			return this.account_setup_bill_state;
		}

		public Integer account_default_pos_receivable_account_id;

		public Integer getAccount_default_pos_receivable_account_id() {
			return this.account_default_pos_receivable_account_id;
		}

		public String expense_accrual_account_id;

		public String getExpense_accrual_account_id() {
			return this.expense_accrual_account_id;
		}

		public String revenue_accrual_account_id;

		public String getRevenue_accrual_account_id() {
			return this.revenue_accrual_account_id;
		}

		public String automatic_entry_default_journal_id;

		public String getAutomatic_entry_default_journal_id() {
			return this.automatic_entry_default_journal_id;
		}

		public Integer account_fiscal_country_id;

		public Integer getAccount_fiscal_country_id() {
			return this.account_fiscal_country_id;
		}

		public String tax_exigibility;

		public String getTax_exigibility() {
			return this.tax_exigibility;
		}

		public Integer tax_cash_basis_journal_id;

		public Integer getTax_cash_basis_journal_id() {
			return this.tax_cash_basis_journal_id;
		}

		public String account_cash_basis_base_account_id;

		public String getAccount_cash_basis_base_account_id() {
			return this.account_cash_basis_base_account_id;
		}

		public String payment_acquirer_onboarding_state;

		public String getPayment_acquirer_onboarding_state() {
			return this.payment_acquirer_onboarding_state;
		}

		public String payment_onboarding_payment_method;

		public String getPayment_onboarding_payment_method() {
			return this.payment_onboarding_payment_method;
		}

		public String invoice_is_snailmail;

		public String getInvoice_is_snailmail() {
			return this.invoice_is_snailmail;
		}

		public Boolean portal_confirmation_sign;

		public Boolean getPortal_confirmation_sign() {
			return this.portal_confirmation_sign;
		}

		public Boolean portal_confirmation_pay;

		public Boolean getPortal_confirmation_pay() {
			return this.portal_confirmation_pay;
		}

		public Integer quotation_validity_days;

		public Integer getQuotation_validity_days() {
			return this.quotation_validity_days;
		}

		public String sale_quotation_onboarding_state;

		public String getSale_quotation_onboarding_state() {
			return this.sale_quotation_onboarding_state;
		}

		public String sale_onboarding_order_confirmation_state;

		public String getSale_onboarding_order_confirmation_state() {
			return this.sale_onboarding_order_confirmation_state;
		}

		public String sale_onboarding_sample_quotation_state;

		public String getSale_onboarding_sample_quotation_state() {
			return this.sale_onboarding_sample_quotation_state;
		}

		public String sale_onboarding_payment_method;

		public String getSale_onboarding_payment_method() {
			return this.sale_onboarding_payment_method;
		}

		public String sale_order_template_id;

		public String getSale_order_template_id() {
			return this.sale_order_template_id;
		}

		public Integer nomenclature_id;

		public Integer getNomenclature_id() {
			return this.nomenclature_id;
		}

		public Integer internal_transit_location_id;

		public Integer getInternal_transit_location_id() {
			return this.internal_transit_location_id;
		}

		public String stock_move_email_validation;

		public String getStock_move_email_validation() {
			return this.stock_move_email_validation;
		}

		public Integer stock_mail_confirmation_template_id;

		public Integer getStock_mail_confirmation_template_id() {
			return this.stock_mail_confirmation_template_id;
		}

		public Integer annual_inventory_month;

		public Integer getAnnual_inventory_month() {
			return this.annual_inventory_month;
		}

		public Integer annual_inventory_day;

		public Integer getAnnual_inventory_day() {
			return this.annual_inventory_day;
		}

		public Boolean stock_move_sms_validation;

		public Boolean getStock_move_sms_validation() {
			return this.stock_move_sms_validation;
		}

		public Integer stock_sms_confirmation_template_id;

		public Integer getStock_sms_confirmation_template_id() {
			return this.stock_sms_confirmation_template_id;
		}

		public String has_received_warning_stock_sms;

		public String getHas_received_warning_stock_sms() {
			return this.has_received_warning_stock_sms;
		}

		public String point_of_sale_update_stock_quantities;

		public String getPoint_of_sale_update_stock_quantities() {
			return this.point_of_sale_update_stock_quantities;
		}

		public Float security_lead;

		public Float getSecurity_lead() {
			return this.security_lead;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final resCompanyStruct other = (resCompanyStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(resCompanyStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.partner_id = this.partner_id;
			other.currency_id = this.currency_id;
			other.sequence = this.sequence;
			other.create_date = this.create_date;
			other.parent_id = this.parent_id;
			other.report_header = this.report_header;
			other.report_footer = this.report_footer;
			other.company_details = this.company_details;
			other.logo_web = this.logo_web;
			other.email = this.email;
			other.phone = this.phone;
			other.mobile = this.mobile;
			other.company_registry = this.company_registry;
			other.paperformat_id = this.paperformat_id;
			other.external_report_layout_id = this.external_report_layout_id;
			other.base_onboarding_company_state = this.base_onboarding_company_state;
			other.font = this.font;
			other.primary_color = this.primary_color;
			other.secondary_color = this.secondary_color;
			other.layout_background = this.layout_background;
			other.create_uid = this.create_uid;
			other.write_uid = this.write_uid;
			other.write_date = this.write_date;
			other.resource_calendar_id = this.resource_calendar_id;
			other.partner_gid = this.partner_gid;
			other.iap_enrich_auto_done = this.iap_enrich_auto_done;
			other.snailmail_color = this.snailmail_color;
			other.snailmail_cover = this.snailmail_cover;
			other.snailmail_duplex = this.snailmail_duplex;
			other.fiscalyear_last_day = this.fiscalyear_last_day;
			other.fiscalyear_last_month = this.fiscalyear_last_month;
			other.period_lock_date = this.period_lock_date;
			other.fiscalyear_lock_date = this.fiscalyear_lock_date;
			other.tax_lock_date = this.tax_lock_date;
			other.transfer_account_id = this.transfer_account_id;
			other.expects_chart_of_accounts = this.expects_chart_of_accounts;
			other.chart_template_id = this.chart_template_id;
			other.bank_account_code_prefix = this.bank_account_code_prefix;
			other.cash_account_code_prefix = this.cash_account_code_prefix;
			other.default_cash_difference_income_account_id = this.default_cash_difference_income_account_id;
			other.default_cash_difference_expense_account_id = this.default_cash_difference_expense_account_id;
			other.account_journal_suspense_account_id = this.account_journal_suspense_account_id;
			other.account_journal_payment_debit_account_id = this.account_journal_payment_debit_account_id;
			other.account_journal_payment_credit_account_id = this.account_journal_payment_credit_account_id;
			other.transfer_account_code_prefix = this.transfer_account_code_prefix;
			other.account_sale_tax_id = this.account_sale_tax_id;
			other.account_purchase_tax_id = this.account_purchase_tax_id;
			other.tax_calculation_rounding_method = this.tax_calculation_rounding_method;
			other.currency_exchange_journal_id = this.currency_exchange_journal_id;
			other.income_currency_exchange_account_id = this.income_currency_exchange_account_id;
			other.expense_currency_exchange_account_id = this.expense_currency_exchange_account_id;
			other.anglo_saxon_accounting = this.anglo_saxon_accounting;
			other.property_stock_account_input_categ_id = this.property_stock_account_input_categ_id;
			other.property_stock_account_output_categ_id = this.property_stock_account_output_categ_id;
			other.property_stock_valuation_account_id = this.property_stock_valuation_account_id;
			other.incoterm_id = this.incoterm_id;
			other.qr_code = this.qr_code;
			other.invoice_is_email = this.invoice_is_email;
			other.invoice_is_print = this.invoice_is_print;
			other.account_opening_move_id = this.account_opening_move_id;
			other.account_opening_date = this.account_opening_date;
			other.account_setup_bank_data_state = this.account_setup_bank_data_state;
			other.account_setup_fy_data_state = this.account_setup_fy_data_state;
			other.account_setup_coa_state = this.account_setup_coa_state;
			other.account_setup_taxes_state = this.account_setup_taxes_state;
			other.account_onboarding_invoice_layout_state = this.account_onboarding_invoice_layout_state;
			other.account_onboarding_create_invoice_state = this.account_onboarding_create_invoice_state;
			other.account_onboarding_sale_tax_state = this.account_onboarding_sale_tax_state;
			other.account_invoice_onboarding_state = this.account_invoice_onboarding_state;
			other.account_dashboard_onboarding_state = this.account_dashboard_onboarding_state;
			other.invoice_terms = this.invoice_terms;
			other.terms_type = this.terms_type;
			other.invoice_terms_html = this.invoice_terms_html;
			other.account_setup_bill_state = this.account_setup_bill_state;
			other.account_default_pos_receivable_account_id = this.account_default_pos_receivable_account_id;
			other.expense_accrual_account_id = this.expense_accrual_account_id;
			other.revenue_accrual_account_id = this.revenue_accrual_account_id;
			other.automatic_entry_default_journal_id = this.automatic_entry_default_journal_id;
			other.account_fiscal_country_id = this.account_fiscal_country_id;
			other.tax_exigibility = this.tax_exigibility;
			other.tax_cash_basis_journal_id = this.tax_cash_basis_journal_id;
			other.account_cash_basis_base_account_id = this.account_cash_basis_base_account_id;
			other.payment_acquirer_onboarding_state = this.payment_acquirer_onboarding_state;
			other.payment_onboarding_payment_method = this.payment_onboarding_payment_method;
			other.invoice_is_snailmail = this.invoice_is_snailmail;
			other.portal_confirmation_sign = this.portal_confirmation_sign;
			other.portal_confirmation_pay = this.portal_confirmation_pay;
			other.quotation_validity_days = this.quotation_validity_days;
			other.sale_quotation_onboarding_state = this.sale_quotation_onboarding_state;
			other.sale_onboarding_order_confirmation_state = this.sale_onboarding_order_confirmation_state;
			other.sale_onboarding_sample_quotation_state = this.sale_onboarding_sample_quotation_state;
			other.sale_onboarding_payment_method = this.sale_onboarding_payment_method;
			other.sale_order_template_id = this.sale_order_template_id;
			other.nomenclature_id = this.nomenclature_id;
			other.internal_transit_location_id = this.internal_transit_location_id;
			other.stock_move_email_validation = this.stock_move_email_validation;
			other.stock_mail_confirmation_template_id = this.stock_mail_confirmation_template_id;
			other.annual_inventory_month = this.annual_inventory_month;
			other.annual_inventory_day = this.annual_inventory_day;
			other.stock_move_sms_validation = this.stock_move_sms_validation;
			other.stock_sms_confirmation_template_id = this.stock_sms_confirmation_template_id;
			other.has_received_warning_stock_sms = this.has_received_warning_stock_sms;
			other.point_of_sale_update_stock_quantities = this.point_of_sale_update_stock_quantities;
			other.security_lead = this.security_lead;

		}

		public void copyKeysDataTo(resCompanyStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.partner_id = readInteger(dis, ois);

				this.currency_id = readInteger(dis, ois);

				this.sequence = readString(dis, ois);

				this.create_date = readDate(dis, ois);

				this.parent_id = readString(dis, ois);

				this.report_header = readString(dis, ois);

				this.report_footer = readString(dis, ois);

				this.company_details = readString(dis, ois);

				this.logo_web = readString(dis, ois);

				this.email = readString(dis, ois);

				this.phone = readInteger(dis, ois);

				this.mobile = readString(dis, ois);

				this.company_registry = readString(dis, ois);

				this.paperformat_id = readInteger(dis, ois);

				this.external_report_layout_id = readString(dis, ois);

				this.base_onboarding_company_state = readString(dis, ois);

				this.font = readString(dis, ois);

				this.primary_color = readString(dis, ois);

				this.secondary_color = readString(dis, ois);

				this.layout_background = readString(dis, ois);

				this.create_uid = readString(dis, ois);

				this.write_uid = readInteger(dis, ois);

				this.write_date = readDate(dis, ois);

				this.resource_calendar_id = readInteger(dis, ois);

				this.partner_gid = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.iap_enrich_auto_done = null;
				} else {
					this.iap_enrich_auto_done = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.snailmail_color = null;
				} else {
					this.snailmail_color = dis.readBoolean();
				}

				this.snailmail_cover = readString(dis, ois);

				this.snailmail_duplex = readString(dis, ois);

				this.fiscalyear_last_day = readInteger(dis, ois);

				this.fiscalyear_last_month = readInteger(dis, ois);

				this.period_lock_date = readString(dis, ois);

				this.fiscalyear_lock_date = readString(dis, ois);

				this.tax_lock_date = readString(dis, ois);

				this.transfer_account_id = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.expects_chart_of_accounts = null;
				} else {
					this.expects_chart_of_accounts = dis.readBoolean();
				}

				this.chart_template_id = readInteger(dis, ois);

				this.bank_account_code_prefix = readInteger(dis, ois);

				this.cash_account_code_prefix = readInteger(dis, ois);

				this.default_cash_difference_income_account_id = readInteger(dis, ois);

				this.default_cash_difference_expense_account_id = readInteger(dis, ois);

				this.account_journal_suspense_account_id = readInteger(dis, ois);

				this.account_journal_payment_debit_account_id = readInteger(dis, ois);

				this.account_journal_payment_credit_account_id = readInteger(dis, ois);

				this.transfer_account_code_prefix = readInteger(dis, ois);

				this.account_sale_tax_id = readInteger(dis, ois);

				this.account_purchase_tax_id = readInteger(dis, ois);

				this.tax_calculation_rounding_method = readString(dis, ois);

				this.currency_exchange_journal_id = readInteger(dis, ois);

				this.income_currency_exchange_account_id = readInteger(dis, ois);

				this.expense_currency_exchange_account_id = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.anglo_saxon_accounting = null;
				} else {
					this.anglo_saxon_accounting = dis.readBoolean();
				}

				this.property_stock_account_input_categ_id = readInteger(dis, ois);

				this.property_stock_account_output_categ_id = readInteger(dis, ois);

				this.property_stock_valuation_account_id = readInteger(dis, ois);

				this.incoterm_id = readString(dis, ois);

				this.qr_code = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.invoice_is_email = null;
				} else {
					this.invoice_is_email = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.invoice_is_print = null;
				} else {
					this.invoice_is_print = dis.readBoolean();
				}

				this.account_opening_move_id = readString(dis, ois);

				this.account_opening_date = readDate(dis, ois);

				this.account_setup_bank_data_state = readString(dis, ois);

				this.account_setup_fy_data_state = readString(dis, ois);

				this.account_setup_coa_state = readString(dis, ois);

				this.account_setup_taxes_state = readString(dis, ois);

				this.account_onboarding_invoice_layout_state = readString(dis, ois);

				this.account_onboarding_create_invoice_state = readString(dis, ois);

				this.account_onboarding_sale_tax_state = readString(dis, ois);

				this.account_invoice_onboarding_state = readString(dis, ois);

				this.account_dashboard_onboarding_state = readString(dis, ois);

				this.invoice_terms = readString(dis, ois);

				this.terms_type = readString(dis, ois);

				this.invoice_terms_html = readString(dis, ois);

				this.account_setup_bill_state = readString(dis, ois);

				this.account_default_pos_receivable_account_id = readInteger(dis, ois);

				this.expense_accrual_account_id = readString(dis, ois);

				this.revenue_accrual_account_id = readString(dis, ois);

				this.automatic_entry_default_journal_id = readString(dis, ois);

				this.account_fiscal_country_id = readInteger(dis, ois);

				this.tax_exigibility = readString(dis, ois);

				this.tax_cash_basis_journal_id = readInteger(dis, ois);

				this.account_cash_basis_base_account_id = readString(dis, ois);

				this.payment_acquirer_onboarding_state = readString(dis, ois);

				this.payment_onboarding_payment_method = readString(dis, ois);

				this.invoice_is_snailmail = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.portal_confirmation_sign = null;
				} else {
					this.portal_confirmation_sign = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.portal_confirmation_pay = null;
				} else {
					this.portal_confirmation_pay = dis.readBoolean();
				}

				this.quotation_validity_days = readInteger(dis, ois);

				this.sale_quotation_onboarding_state = readString(dis, ois);

				this.sale_onboarding_order_confirmation_state = readString(dis, ois);

				this.sale_onboarding_sample_quotation_state = readString(dis, ois);

				this.sale_onboarding_payment_method = readString(dis, ois);

				this.sale_order_template_id = readString(dis, ois);

				this.nomenclature_id = readInteger(dis, ois);

				this.internal_transit_location_id = readInteger(dis, ois);

				this.stock_move_email_validation = readString(dis, ois);

				this.stock_mail_confirmation_template_id = readInteger(dis, ois);

				this.annual_inventory_month = readInteger(dis, ois);

				this.annual_inventory_day = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.stock_move_sms_validation = null;
				} else {
					this.stock_move_sms_validation = dis.readBoolean();
				}

				this.stock_sms_confirmation_template_id = readInteger(dis, ois);

				this.has_received_warning_stock_sms = readString(dis, ois);

				this.point_of_sale_update_stock_quantities = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.security_lead = null;
				} else {
					this.security_lead = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.name = readString(dis, objectIn);

				this.partner_id = readInteger(dis, objectIn);

				this.currency_id = readInteger(dis, objectIn);

				this.sequence = readString(dis, objectIn);

				this.create_date = readDate(dis, objectIn);

				this.parent_id = readString(dis, objectIn);

				this.report_header = readString(dis, objectIn);

				this.report_footer = readString(dis, objectIn);

				this.company_details = readString(dis, objectIn);

				this.logo_web = readString(dis, objectIn);

				this.email = readString(dis, objectIn);

				this.phone = readInteger(dis, objectIn);

				this.mobile = readString(dis, objectIn);

				this.company_registry = readString(dis, objectIn);

				this.paperformat_id = readInteger(dis, objectIn);

				this.external_report_layout_id = readString(dis, objectIn);

				this.base_onboarding_company_state = readString(dis, objectIn);

				this.font = readString(dis, objectIn);

				this.primary_color = readString(dis, objectIn);

				this.secondary_color = readString(dis, objectIn);

				this.layout_background = readString(dis, objectIn);

				this.create_uid = readString(dis, objectIn);

				this.write_uid = readInteger(dis, objectIn);

				this.write_date = readDate(dis, objectIn);

				this.resource_calendar_id = readInteger(dis, objectIn);

				this.partner_gid = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.iap_enrich_auto_done = null;
				} else {
					this.iap_enrich_auto_done = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.snailmail_color = null;
				} else {
					this.snailmail_color = objectIn.readBoolean();
				}

				this.snailmail_cover = readString(dis, objectIn);

				this.snailmail_duplex = readString(dis, objectIn);

				this.fiscalyear_last_day = readInteger(dis, objectIn);

				this.fiscalyear_last_month = readInteger(dis, objectIn);

				this.period_lock_date = readString(dis, objectIn);

				this.fiscalyear_lock_date = readString(dis, objectIn);

				this.tax_lock_date = readString(dis, objectIn);

				this.transfer_account_id = readInteger(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.expects_chart_of_accounts = null;
				} else {
					this.expects_chart_of_accounts = objectIn.readBoolean();
				}

				this.chart_template_id = readInteger(dis, objectIn);

				this.bank_account_code_prefix = readInteger(dis, objectIn);

				this.cash_account_code_prefix = readInteger(dis, objectIn);

				this.default_cash_difference_income_account_id = readInteger(dis, objectIn);

				this.default_cash_difference_expense_account_id = readInteger(dis, objectIn);

				this.account_journal_suspense_account_id = readInteger(dis, objectIn);

				this.account_journal_payment_debit_account_id = readInteger(dis, objectIn);

				this.account_journal_payment_credit_account_id = readInteger(dis, objectIn);

				this.transfer_account_code_prefix = readInteger(dis, objectIn);

				this.account_sale_tax_id = readInteger(dis, objectIn);

				this.account_purchase_tax_id = readInteger(dis, objectIn);

				this.tax_calculation_rounding_method = readString(dis, objectIn);

				this.currency_exchange_journal_id = readInteger(dis, objectIn);

				this.income_currency_exchange_account_id = readInteger(dis, objectIn);

				this.expense_currency_exchange_account_id = readInteger(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.anglo_saxon_accounting = null;
				} else {
					this.anglo_saxon_accounting = objectIn.readBoolean();
				}

				this.property_stock_account_input_categ_id = readInteger(dis, objectIn);

				this.property_stock_account_output_categ_id = readInteger(dis, objectIn);

				this.property_stock_valuation_account_id = readInteger(dis, objectIn);

				this.incoterm_id = readString(dis, objectIn);

				this.qr_code = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.invoice_is_email = null;
				} else {
					this.invoice_is_email = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.invoice_is_print = null;
				} else {
					this.invoice_is_print = objectIn.readBoolean();
				}

				this.account_opening_move_id = readString(dis, objectIn);

				this.account_opening_date = readDate(dis, objectIn);

				this.account_setup_bank_data_state = readString(dis, objectIn);

				this.account_setup_fy_data_state = readString(dis, objectIn);

				this.account_setup_coa_state = readString(dis, objectIn);

				this.account_setup_taxes_state = readString(dis, objectIn);

				this.account_onboarding_invoice_layout_state = readString(dis, objectIn);

				this.account_onboarding_create_invoice_state = readString(dis, objectIn);

				this.account_onboarding_sale_tax_state = readString(dis, objectIn);

				this.account_invoice_onboarding_state = readString(dis, objectIn);

				this.account_dashboard_onboarding_state = readString(dis, objectIn);

				this.invoice_terms = readString(dis, objectIn);

				this.terms_type = readString(dis, objectIn);

				this.invoice_terms_html = readString(dis, objectIn);

				this.account_setup_bill_state = readString(dis, objectIn);

				this.account_default_pos_receivable_account_id = readInteger(dis, objectIn);

				this.expense_accrual_account_id = readString(dis, objectIn);

				this.revenue_accrual_account_id = readString(dis, objectIn);

				this.automatic_entry_default_journal_id = readString(dis, objectIn);

				this.account_fiscal_country_id = readInteger(dis, objectIn);

				this.tax_exigibility = readString(dis, objectIn);

				this.tax_cash_basis_journal_id = readInteger(dis, objectIn);

				this.account_cash_basis_base_account_id = readString(dis, objectIn);

				this.payment_acquirer_onboarding_state = readString(dis, objectIn);

				this.payment_onboarding_payment_method = readString(dis, objectIn);

				this.invoice_is_snailmail = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.portal_confirmation_sign = null;
				} else {
					this.portal_confirmation_sign = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.portal_confirmation_pay = null;
				} else {
					this.portal_confirmation_pay = objectIn.readBoolean();
				}

				this.quotation_validity_days = readInteger(dis, objectIn);

				this.sale_quotation_onboarding_state = readString(dis, objectIn);

				this.sale_onboarding_order_confirmation_state = readString(dis, objectIn);

				this.sale_onboarding_sample_quotation_state = readString(dis, objectIn);

				this.sale_onboarding_payment_method = readString(dis, objectIn);

				this.sale_order_template_id = readString(dis, objectIn);

				this.nomenclature_id = readInteger(dis, objectIn);

				this.internal_transit_location_id = readInteger(dis, objectIn);

				this.stock_move_email_validation = readString(dis, objectIn);

				this.stock_mail_confirmation_template_id = readInteger(dis, objectIn);

				this.annual_inventory_month = readInteger(dis, objectIn);

				this.annual_inventory_day = readInteger(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.stock_move_sms_validation = null;
				} else {
					this.stock_move_sms_validation = objectIn.readBoolean();
				}

				this.stock_sms_confirmation_template_id = readInteger(dis, objectIn);

				this.has_received_warning_stock_sms = readString(dis, objectIn);

				this.point_of_sale_update_stock_quantities = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.security_lead = null;
				} else {
					this.security_lead = objectIn.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeInteger(this.partner_id, dos, oos);

				writeInteger(this.currency_id, dos, oos);

				writeString(this.sequence, dos, oos);

				writeDate(this.create_date, dos, oos);

				writeString(this.parent_id, dos, oos);

				writeString(this.report_header, dos, oos);

				writeString(this.report_footer, dos, oos);

				writeString(this.company_details, dos, oos);

				writeString(this.logo_web, dos, oos);

				writeString(this.email, dos, oos);

				writeInteger(this.phone, dos, oos);

				writeString(this.mobile, dos, oos);

				writeString(this.company_registry, dos, oos);

				writeInteger(this.paperformat_id, dos, oos);

				writeString(this.external_report_layout_id, dos, oos);

				writeString(this.base_onboarding_company_state, dos, oos);

				writeString(this.font, dos, oos);

				writeString(this.primary_color, dos, oos);

				writeString(this.secondary_color, dos, oos);

				writeString(this.layout_background, dos, oos);

				writeString(this.create_uid, dos, oos);

				writeInteger(this.write_uid, dos, oos);

				writeDate(this.write_date, dos, oos);

				writeInteger(this.resource_calendar_id, dos, oos);

				writeString(this.partner_gid, dos, oos);

				if (this.iap_enrich_auto_done == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.iap_enrich_auto_done);
				}

				if (this.snailmail_color == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.snailmail_color);
				}

				writeString(this.snailmail_cover, dos, oos);

				writeString(this.snailmail_duplex, dos, oos);

				writeInteger(this.fiscalyear_last_day, dos, oos);

				writeInteger(this.fiscalyear_last_month, dos, oos);

				writeString(this.period_lock_date, dos, oos);

				writeString(this.fiscalyear_lock_date, dos, oos);

				writeString(this.tax_lock_date, dos, oos);

				writeInteger(this.transfer_account_id, dos, oos);

				if (this.expects_chart_of_accounts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.expects_chart_of_accounts);
				}

				writeInteger(this.chart_template_id, dos, oos);

				writeInteger(this.bank_account_code_prefix, dos, oos);

				writeInteger(this.cash_account_code_prefix, dos, oos);

				writeInteger(this.default_cash_difference_income_account_id, dos, oos);

				writeInteger(this.default_cash_difference_expense_account_id, dos, oos);

				writeInteger(this.account_journal_suspense_account_id, dos, oos);

				writeInteger(this.account_journal_payment_debit_account_id, dos, oos);

				writeInteger(this.account_journal_payment_credit_account_id, dos, oos);

				writeInteger(this.transfer_account_code_prefix, dos, oos);

				writeInteger(this.account_sale_tax_id, dos, oos);

				writeInteger(this.account_purchase_tax_id, dos, oos);

				writeString(this.tax_calculation_rounding_method, dos, oos);

				writeInteger(this.currency_exchange_journal_id, dos, oos);

				writeInteger(this.income_currency_exchange_account_id, dos, oos);

				writeInteger(this.expense_currency_exchange_account_id, dos, oos);

				if (this.anglo_saxon_accounting == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.anglo_saxon_accounting);
				}

				writeInteger(this.property_stock_account_input_categ_id, dos, oos);

				writeInteger(this.property_stock_account_output_categ_id, dos, oos);

				writeInteger(this.property_stock_valuation_account_id, dos, oos);

				writeString(this.incoterm_id, dos, oos);

				writeString(this.qr_code, dos, oos);

				if (this.invoice_is_email == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.invoice_is_email);
				}

				if (this.invoice_is_print == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.invoice_is_print);
				}

				writeString(this.account_opening_move_id, dos, oos);

				writeDate(this.account_opening_date, dos, oos);

				writeString(this.account_setup_bank_data_state, dos, oos);

				writeString(this.account_setup_fy_data_state, dos, oos);

				writeString(this.account_setup_coa_state, dos, oos);

				writeString(this.account_setup_taxes_state, dos, oos);

				writeString(this.account_onboarding_invoice_layout_state, dos, oos);

				writeString(this.account_onboarding_create_invoice_state, dos, oos);

				writeString(this.account_onboarding_sale_tax_state, dos, oos);

				writeString(this.account_invoice_onboarding_state, dos, oos);

				writeString(this.account_dashboard_onboarding_state, dos, oos);

				writeString(this.invoice_terms, dos, oos);

				writeString(this.terms_type, dos, oos);

				writeString(this.invoice_terms_html, dos, oos);

				writeString(this.account_setup_bill_state, dos, oos);

				writeInteger(this.account_default_pos_receivable_account_id, dos, oos);

				writeString(this.expense_accrual_account_id, dos, oos);

				writeString(this.revenue_accrual_account_id, dos, oos);

				writeString(this.automatic_entry_default_journal_id, dos, oos);

				writeInteger(this.account_fiscal_country_id, dos, oos);

				writeString(this.tax_exigibility, dos, oos);

				writeInteger(this.tax_cash_basis_journal_id, dos, oos);

				writeString(this.account_cash_basis_base_account_id, dos, oos);

				writeString(this.payment_acquirer_onboarding_state, dos, oos);

				writeString(this.payment_onboarding_payment_method, dos, oos);

				writeString(this.invoice_is_snailmail, dos, oos);

				if (this.portal_confirmation_sign == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.portal_confirmation_sign);
				}

				if (this.portal_confirmation_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.portal_confirmation_pay);
				}

				writeInteger(this.quotation_validity_days, dos, oos);

				writeString(this.sale_quotation_onboarding_state, dos, oos);

				writeString(this.sale_onboarding_order_confirmation_state, dos, oos);

				writeString(this.sale_onboarding_sample_quotation_state, dos, oos);

				writeString(this.sale_onboarding_payment_method, dos, oos);

				writeString(this.sale_order_template_id, dos, oos);

				writeInteger(this.nomenclature_id, dos, oos);

				writeInteger(this.internal_transit_location_id, dos, oos);

				writeString(this.stock_move_email_validation, dos, oos);

				writeInteger(this.stock_mail_confirmation_template_id, dos, oos);

				writeInteger(this.annual_inventory_month, dos, oos);

				writeInteger(this.annual_inventory_day, dos, oos);

				if (this.stock_move_sms_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stock_move_sms_validation);
				}

				writeInteger(this.stock_sms_confirmation_template_id, dos, oos);

				writeString(this.has_received_warning_stock_sms, dos, oos);

				writeString(this.point_of_sale_update_stock_quantities, dos, oos);

				if (this.security_lead == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.security_lead);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.name, dos, objectOut);

				writeInteger(this.partner_id, dos, objectOut);

				writeInteger(this.currency_id, dos, objectOut);

				writeString(this.sequence, dos, objectOut);

				writeDate(this.create_date, dos, objectOut);

				writeString(this.parent_id, dos, objectOut);

				writeString(this.report_header, dos, objectOut);

				writeString(this.report_footer, dos, objectOut);

				writeString(this.company_details, dos, objectOut);

				writeString(this.logo_web, dos, objectOut);

				writeString(this.email, dos, objectOut);

				writeInteger(this.phone, dos, objectOut);

				writeString(this.mobile, dos, objectOut);

				writeString(this.company_registry, dos, objectOut);

				writeInteger(this.paperformat_id, dos, objectOut);

				writeString(this.external_report_layout_id, dos, objectOut);

				writeString(this.base_onboarding_company_state, dos, objectOut);

				writeString(this.font, dos, objectOut);

				writeString(this.primary_color, dos, objectOut);

				writeString(this.secondary_color, dos, objectOut);

				writeString(this.layout_background, dos, objectOut);

				writeString(this.create_uid, dos, objectOut);

				writeInteger(this.write_uid, dos, objectOut);

				writeDate(this.write_date, dos, objectOut);

				writeInteger(this.resource_calendar_id, dos, objectOut);

				writeString(this.partner_gid, dos, objectOut);

				if (this.iap_enrich_auto_done == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.iap_enrich_auto_done);
				}

				if (this.snailmail_color == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.snailmail_color);
				}

				writeString(this.snailmail_cover, dos, objectOut);

				writeString(this.snailmail_duplex, dos, objectOut);

				writeInteger(this.fiscalyear_last_day, dos, objectOut);

				writeInteger(this.fiscalyear_last_month, dos, objectOut);

				writeString(this.period_lock_date, dos, objectOut);

				writeString(this.fiscalyear_lock_date, dos, objectOut);

				writeString(this.tax_lock_date, dos, objectOut);

				writeInteger(this.transfer_account_id, dos, objectOut);

				if (this.expects_chart_of_accounts == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.expects_chart_of_accounts);
				}

				writeInteger(this.chart_template_id, dos, objectOut);

				writeInteger(this.bank_account_code_prefix, dos, objectOut);

				writeInteger(this.cash_account_code_prefix, dos, objectOut);

				writeInteger(this.default_cash_difference_income_account_id, dos, objectOut);

				writeInteger(this.default_cash_difference_expense_account_id, dos, objectOut);

				writeInteger(this.account_journal_suspense_account_id, dos, objectOut);

				writeInteger(this.account_journal_payment_debit_account_id, dos, objectOut);

				writeInteger(this.account_journal_payment_credit_account_id, dos, objectOut);

				writeInteger(this.transfer_account_code_prefix, dos, objectOut);

				writeInteger(this.account_sale_tax_id, dos, objectOut);

				writeInteger(this.account_purchase_tax_id, dos, objectOut);

				writeString(this.tax_calculation_rounding_method, dos, objectOut);

				writeInteger(this.currency_exchange_journal_id, dos, objectOut);

				writeInteger(this.income_currency_exchange_account_id, dos, objectOut);

				writeInteger(this.expense_currency_exchange_account_id, dos, objectOut);

				if (this.anglo_saxon_accounting == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.anglo_saxon_accounting);
				}

				writeInteger(this.property_stock_account_input_categ_id, dos, objectOut);

				writeInteger(this.property_stock_account_output_categ_id, dos, objectOut);

				writeInteger(this.property_stock_valuation_account_id, dos, objectOut);

				writeString(this.incoterm_id, dos, objectOut);

				writeString(this.qr_code, dos, objectOut);

				if (this.invoice_is_email == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.invoice_is_email);
				}

				if (this.invoice_is_print == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.invoice_is_print);
				}

				writeString(this.account_opening_move_id, dos, objectOut);

				writeDate(this.account_opening_date, dos, objectOut);

				writeString(this.account_setup_bank_data_state, dos, objectOut);

				writeString(this.account_setup_fy_data_state, dos, objectOut);

				writeString(this.account_setup_coa_state, dos, objectOut);

				writeString(this.account_setup_taxes_state, dos, objectOut);

				writeString(this.account_onboarding_invoice_layout_state, dos, objectOut);

				writeString(this.account_onboarding_create_invoice_state, dos, objectOut);

				writeString(this.account_onboarding_sale_tax_state, dos, objectOut);

				writeString(this.account_invoice_onboarding_state, dos, objectOut);

				writeString(this.account_dashboard_onboarding_state, dos, objectOut);

				writeString(this.invoice_terms, dos, objectOut);

				writeString(this.terms_type, dos, objectOut);

				writeString(this.invoice_terms_html, dos, objectOut);

				writeString(this.account_setup_bill_state, dos, objectOut);

				writeInteger(this.account_default_pos_receivable_account_id, dos, objectOut);

				writeString(this.expense_accrual_account_id, dos, objectOut);

				writeString(this.revenue_accrual_account_id, dos, objectOut);

				writeString(this.automatic_entry_default_journal_id, dos, objectOut);

				writeInteger(this.account_fiscal_country_id, dos, objectOut);

				writeString(this.tax_exigibility, dos, objectOut);

				writeInteger(this.tax_cash_basis_journal_id, dos, objectOut);

				writeString(this.account_cash_basis_base_account_id, dos, objectOut);

				writeString(this.payment_acquirer_onboarding_state, dos, objectOut);

				writeString(this.payment_onboarding_payment_method, dos, objectOut);

				writeString(this.invoice_is_snailmail, dos, objectOut);

				if (this.portal_confirmation_sign == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.portal_confirmation_sign);
				}

				if (this.portal_confirmation_pay == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.portal_confirmation_pay);
				}

				writeInteger(this.quotation_validity_days, dos, objectOut);

				writeString(this.sale_quotation_onboarding_state, dos, objectOut);

				writeString(this.sale_onboarding_order_confirmation_state, dos, objectOut);

				writeString(this.sale_onboarding_sample_quotation_state, dos, objectOut);

				writeString(this.sale_onboarding_payment_method, dos, objectOut);

				writeString(this.sale_order_template_id, dos, objectOut);

				writeInteger(this.nomenclature_id, dos, objectOut);

				writeInteger(this.internal_transit_location_id, dos, objectOut);

				writeString(this.stock_move_email_validation, dos, objectOut);

				writeInteger(this.stock_mail_confirmation_template_id, dos, objectOut);

				writeInteger(this.annual_inventory_month, dos, objectOut);

				writeInteger(this.annual_inventory_day, dos, objectOut);

				if (this.stock_move_sms_validation == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.stock_move_sms_validation);
				}

				writeInteger(this.stock_sms_confirmation_template_id, dos, objectOut);

				writeString(this.has_received_warning_stock_sms, dos, objectOut);

				writeString(this.point_of_sale_update_stock_quantities, dos, objectOut);

				if (this.security_lead == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeFloat(this.security_lead);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",currency_id=" + String.valueOf(currency_id));
			sb.append(",sequence=" + sequence);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",parent_id=" + parent_id);
			sb.append(",report_header=" + report_header);
			sb.append(",report_footer=" + report_footer);
			sb.append(",company_details=" + company_details);
			sb.append(",logo_web=" + logo_web);
			sb.append(",email=" + email);
			sb.append(",phone=" + String.valueOf(phone));
			sb.append(",mobile=" + mobile);
			sb.append(",company_registry=" + company_registry);
			sb.append(",paperformat_id=" + String.valueOf(paperformat_id));
			sb.append(",external_report_layout_id=" + external_report_layout_id);
			sb.append(",base_onboarding_company_state=" + base_onboarding_company_state);
			sb.append(",font=" + font);
			sb.append(",primary_color=" + primary_color);
			sb.append(",secondary_color=" + secondary_color);
			sb.append(",layout_background=" + layout_background);
			sb.append(",create_uid=" + create_uid);
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",resource_calendar_id=" + String.valueOf(resource_calendar_id));
			sb.append(",partner_gid=" + partner_gid);
			sb.append(",iap_enrich_auto_done=" + String.valueOf(iap_enrich_auto_done));
			sb.append(",snailmail_color=" + String.valueOf(snailmail_color));
			sb.append(",snailmail_cover=" + snailmail_cover);
			sb.append(",snailmail_duplex=" + snailmail_duplex);
			sb.append(",fiscalyear_last_day=" + String.valueOf(fiscalyear_last_day));
			sb.append(",fiscalyear_last_month=" + String.valueOf(fiscalyear_last_month));
			sb.append(",period_lock_date=" + period_lock_date);
			sb.append(",fiscalyear_lock_date=" + fiscalyear_lock_date);
			sb.append(",tax_lock_date=" + tax_lock_date);
			sb.append(",transfer_account_id=" + String.valueOf(transfer_account_id));
			sb.append(",expects_chart_of_accounts=" + String.valueOf(expects_chart_of_accounts));
			sb.append(",chart_template_id=" + String.valueOf(chart_template_id));
			sb.append(",bank_account_code_prefix=" + String.valueOf(bank_account_code_prefix));
			sb.append(",cash_account_code_prefix=" + String.valueOf(cash_account_code_prefix));
			sb.append(",default_cash_difference_income_account_id="
					+ String.valueOf(default_cash_difference_income_account_id));
			sb.append(",default_cash_difference_expense_account_id="
					+ String.valueOf(default_cash_difference_expense_account_id));
			sb.append(",account_journal_suspense_account_id=" + String.valueOf(account_journal_suspense_account_id));
			sb.append(",account_journal_payment_debit_account_id="
					+ String.valueOf(account_journal_payment_debit_account_id));
			sb.append(",account_journal_payment_credit_account_id="
					+ String.valueOf(account_journal_payment_credit_account_id));
			sb.append(",transfer_account_code_prefix=" + String.valueOf(transfer_account_code_prefix));
			sb.append(",account_sale_tax_id=" + String.valueOf(account_sale_tax_id));
			sb.append(",account_purchase_tax_id=" + String.valueOf(account_purchase_tax_id));
			sb.append(",tax_calculation_rounding_method=" + tax_calculation_rounding_method);
			sb.append(",currency_exchange_journal_id=" + String.valueOf(currency_exchange_journal_id));
			sb.append(",income_currency_exchange_account_id=" + String.valueOf(income_currency_exchange_account_id));
			sb.append(",expense_currency_exchange_account_id=" + String.valueOf(expense_currency_exchange_account_id));
			sb.append(",anglo_saxon_accounting=" + String.valueOf(anglo_saxon_accounting));
			sb.append(
					",property_stock_account_input_categ_id=" + String.valueOf(property_stock_account_input_categ_id));
			sb.append(",property_stock_account_output_categ_id="
					+ String.valueOf(property_stock_account_output_categ_id));
			sb.append(",property_stock_valuation_account_id=" + String.valueOf(property_stock_valuation_account_id));
			sb.append(",incoterm_id=" + incoterm_id);
			sb.append(",qr_code=" + qr_code);
			sb.append(",invoice_is_email=" + String.valueOf(invoice_is_email));
			sb.append(",invoice_is_print=" + String.valueOf(invoice_is_print));
			sb.append(",account_opening_move_id=" + account_opening_move_id);
			sb.append(",account_opening_date=" + String.valueOf(account_opening_date));
			sb.append(",account_setup_bank_data_state=" + account_setup_bank_data_state);
			sb.append(",account_setup_fy_data_state=" + account_setup_fy_data_state);
			sb.append(",account_setup_coa_state=" + account_setup_coa_state);
			sb.append(",account_setup_taxes_state=" + account_setup_taxes_state);
			sb.append(",account_onboarding_invoice_layout_state=" + account_onboarding_invoice_layout_state);
			sb.append(",account_onboarding_create_invoice_state=" + account_onboarding_create_invoice_state);
			sb.append(",account_onboarding_sale_tax_state=" + account_onboarding_sale_tax_state);
			sb.append(",account_invoice_onboarding_state=" + account_invoice_onboarding_state);
			sb.append(",account_dashboard_onboarding_state=" + account_dashboard_onboarding_state);
			sb.append(",invoice_terms=" + invoice_terms);
			sb.append(",terms_type=" + terms_type);
			sb.append(",invoice_terms_html=" + invoice_terms_html);
			sb.append(",account_setup_bill_state=" + account_setup_bill_state);
			sb.append(",account_default_pos_receivable_account_id="
					+ String.valueOf(account_default_pos_receivable_account_id));
			sb.append(",expense_accrual_account_id=" + expense_accrual_account_id);
			sb.append(",revenue_accrual_account_id=" + revenue_accrual_account_id);
			sb.append(",automatic_entry_default_journal_id=" + automatic_entry_default_journal_id);
			sb.append(",account_fiscal_country_id=" + String.valueOf(account_fiscal_country_id));
			sb.append(",tax_exigibility=" + tax_exigibility);
			sb.append(",tax_cash_basis_journal_id=" + String.valueOf(tax_cash_basis_journal_id));
			sb.append(",account_cash_basis_base_account_id=" + account_cash_basis_base_account_id);
			sb.append(",payment_acquirer_onboarding_state=" + payment_acquirer_onboarding_state);
			sb.append(",payment_onboarding_payment_method=" + payment_onboarding_payment_method);
			sb.append(",invoice_is_snailmail=" + invoice_is_snailmail);
			sb.append(",portal_confirmation_sign=" + String.valueOf(portal_confirmation_sign));
			sb.append(",portal_confirmation_pay=" + String.valueOf(portal_confirmation_pay));
			sb.append(",quotation_validity_days=" + String.valueOf(quotation_validity_days));
			sb.append(",sale_quotation_onboarding_state=" + sale_quotation_onboarding_state);
			sb.append(",sale_onboarding_order_confirmation_state=" + sale_onboarding_order_confirmation_state);
			sb.append(",sale_onboarding_sample_quotation_state=" + sale_onboarding_sample_quotation_state);
			sb.append(",sale_onboarding_payment_method=" + sale_onboarding_payment_method);
			sb.append(",sale_order_template_id=" + sale_order_template_id);
			sb.append(",nomenclature_id=" + String.valueOf(nomenclature_id));
			sb.append(",internal_transit_location_id=" + String.valueOf(internal_transit_location_id));
			sb.append(",stock_move_email_validation=" + stock_move_email_validation);
			sb.append(",stock_mail_confirmation_template_id=" + String.valueOf(stock_mail_confirmation_template_id));
			sb.append(",annual_inventory_month=" + String.valueOf(annual_inventory_month));
			sb.append(",annual_inventory_day=" + String.valueOf(annual_inventory_day));
			sb.append(",stock_move_sms_validation=" + String.valueOf(stock_move_sms_validation));
			sb.append(",stock_sms_confirmation_template_id=" + String.valueOf(stock_sms_confirmation_template_id));
			sb.append(",has_received_warning_stock_sms=" + has_received_warning_stock_sms);
			sb.append(",point_of_sale_update_stock_quantities=" + point_of_sale_update_stock_quantities);
			sb.append(",security_lead=" + String.valueOf(security_lead));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(resCompanyStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				resCompanyStruct resCompany = new resCompanyStruct();

				/**
				 * [tAdvancedHash_resCompany begin ] start
				 */

				ok_Hash.put("tAdvancedHash_resCompany", false);
				start_Hash.put("tAdvancedHash_resCompany", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_resCompany";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "resCompany");
				}

				int tos_count_tAdvancedHash_resCompany = 0;

				// connection name:resCompany
				// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_2)
				// outputs:(resCompany,resCompany) | target node:tAdvancedHash_resCompany -
				// inputs:(resCompany) outputs:()
				// linked node: tMap_1 -
				// inputs:(resPartner,resCountry,resCompany,resCountryState)
				// outputs:(CustomerDim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_resCompany = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCompanyStruct> tHash_Lookup_resCompany = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<resCompanyStruct>getLookup(matchingModeEnum_resCompany);

				globalMap.put("tHash_Lookup_resCompany", tHash_Lookup_resCompany);

				/**
				 * [tAdvancedHash_resCompany begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_3 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							resCompanyStruct resCompany) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_3 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_3 = 0;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "resCompany", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 1;

						resCompany.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 2;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.partner_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.partner_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 3;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.currency_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.currency_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 4;

						resCompany.sequence = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 5;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.create_date = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 6;

						resCompany.parent_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 7;

						resCompany.report_header = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 8;

						resCompany.report_footer = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 9;

						resCompany.company_details = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 10;

						resCompany.logo_web = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 11;

						resCompany.email = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 12;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.phone = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"phone", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.phone = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 13;

						resCompany.mobile = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 14;

						resCompany.company_registry = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 15;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.paperformat_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"paperformat_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.paperformat_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 16;

						resCompany.external_report_layout_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 17;

						resCompany.base_onboarding_company_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 18;

						resCompany.font = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 19;

						resCompany.primary_color = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 20;

						resCompany.secondary_color = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 21;

						resCompany.layout_background = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 22;

						resCompany.create_uid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 23;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.write_uid = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.write_uid = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 24;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.write_date = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 25;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.resource_calendar_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"resource_calendar_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.resource_calendar_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 26;

						resCompany.partner_gid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 27;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.iap_enrich_auto_done = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iap_enrich_auto_done", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.iap_enrich_auto_done = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 28;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.snailmail_color = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"snailmail_color", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.snailmail_color = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 29;

						resCompany.snailmail_cover = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 30;

						resCompany.snailmail_duplex = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 31;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.fiscalyear_last_day = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_day", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.fiscalyear_last_day = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 32;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.fiscalyear_last_month = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_month", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.fiscalyear_last_month = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 33;

						resCompany.period_lock_date = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 34;

						resCompany.fiscalyear_lock_date = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 35;

						resCompany.tax_lock_date = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 36;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.transfer_account_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.transfer_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 37;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.expects_chart_of_accounts = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expects_chart_of_accounts", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.expects_chart_of_accounts = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 38;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.chart_template_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"chart_template_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.chart_template_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 39;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.bank_account_code_prefix = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"bank_account_code_prefix", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.bank_account_code_prefix = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 40;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.cash_account_code_prefix = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"cash_account_code_prefix", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.cash_account_code_prefix = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 41;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.default_cash_difference_income_account_id = ParserUtils
										.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_income_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.default_cash_difference_income_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 42;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.default_cash_difference_expense_account_id = ParserUtils
										.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_expense_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.default_cash_difference_expense_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 43;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_journal_suspense_account_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_suspense_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_journal_suspense_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 44;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_journal_payment_debit_account_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_debit_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_journal_payment_debit_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 45;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_journal_payment_credit_account_id = ParserUtils
										.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_credit_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_journal_payment_credit_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 46;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.transfer_account_code_prefix = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_code_prefix", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.transfer_account_code_prefix = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 47;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_sale_tax_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_sale_tax_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_sale_tax_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 48;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_purchase_tax_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_purchase_tax_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_purchase_tax_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 49;

						resCompany.tax_calculation_rounding_method = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 50;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.currency_exchange_journal_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_exchange_journal_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.currency_exchange_journal_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 51;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.income_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"income_currency_exchange_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.income_currency_exchange_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 52;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.expense_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expense_currency_exchange_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.expense_currency_exchange_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 53;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.anglo_saxon_accounting = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"anglo_saxon_accounting", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.anglo_saxon_accounting = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 54;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.property_stock_account_input_categ_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_input_categ_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.property_stock_account_input_categ_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 55;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.property_stock_account_output_categ_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_output_categ_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.property_stock_account_output_categ_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 56;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.property_stock_valuation_account_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_valuation_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.property_stock_valuation_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 57;

						resCompany.incoterm_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 58;

						resCompany.qr_code = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 59;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.invoice_is_email = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_email", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.invoice_is_email = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 60;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.invoice_is_print = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_print", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.invoice_is_print = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 61;

						resCompany.account_opening_move_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 62;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_opening_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_opening_date", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_opening_date = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 63;

						resCompany.account_setup_bank_data_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 64;

						resCompany.account_setup_fy_data_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 65;

						resCompany.account_setup_coa_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 66;

						resCompany.account_setup_taxes_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 67;

						resCompany.account_onboarding_invoice_layout_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 68;

						resCompany.account_onboarding_create_invoice_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 69;

						resCompany.account_onboarding_sale_tax_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 70;

						resCompany.account_invoice_onboarding_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 71;

						resCompany.account_dashboard_onboarding_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 72;

						resCompany.invoice_terms = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 73;

						resCompany.terms_type = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 74;

						resCompany.invoice_terms_html = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 75;

						resCompany.account_setup_bill_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 76;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_default_pos_receivable_account_id = ParserUtils
										.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_default_pos_receivable_account_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_default_pos_receivable_account_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 77;

						resCompany.expense_accrual_account_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 78;

						resCompany.revenue_accrual_account_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 79;

						resCompany.automatic_entry_default_journal_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 80;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.account_fiscal_country_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_fiscal_country_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.account_fiscal_country_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 81;

						resCompany.tax_exigibility = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 82;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.tax_cash_basis_journal_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_cash_basis_journal_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.tax_cash_basis_journal_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 83;

						resCompany.account_cash_basis_base_account_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 84;

						resCompany.payment_acquirer_onboarding_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 85;

						resCompany.payment_onboarding_payment_method = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 86;

						resCompany.invoice_is_snailmail = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 87;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.portal_confirmation_sign = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_sign", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.portal_confirmation_sign = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 88;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.portal_confirmation_pay = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_pay", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.portal_confirmation_pay = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 89;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.quotation_validity_days = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"quotation_validity_days", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.quotation_validity_days = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 90;

						resCompany.sale_quotation_onboarding_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 91;

						resCompany.sale_onboarding_order_confirmation_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 92;

						resCompany.sale_onboarding_sample_quotation_state = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 93;

						resCompany.sale_onboarding_payment_method = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 94;

						resCompany.sale_order_template_id = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 95;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.nomenclature_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nomenclature_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.nomenclature_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 96;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.internal_transit_location_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"internal_transit_location_id", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.internal_transit_location_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 97;

						resCompany.stock_move_email_validation = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 98;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.stock_mail_confirmation_template_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_mail_confirmation_template_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.stock_mail_confirmation_template_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 99;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.annual_inventory_month = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_month", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.annual_inventory_month = null;

						}

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							resCompanyStruct resCompany) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_3 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_3 = 100;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.annual_inventory_day = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_day", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.annual_inventory_day = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 101;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.stock_move_sms_validation = ParserUtils.parseTo_Boolean(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_move_sms_validation", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.stock_move_sms_validation = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 102;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.stock_sms_confirmation_template_id = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_sms_confirmation_template_id", "resCompany", temp,
										ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.stock_sms_confirmation_template_id = null;

						}

						columnIndexWithD_tFileInputDelimited_3 = 103;

						resCompany.has_received_warning_stock_sms = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 104;

						resCompany.point_of_sale_update_stock_quantities = fid_tFileInputDelimited_3
								.get(columnIndexWithD_tFileInputDelimited_3);

						columnIndexWithD_tFileInputDelimited_3 = 105;

						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if (temp.length() > 0) {

							try {

								resCompany.security_lead = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_3) {
								globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
										ex_tFileInputDelimited_3.getMessage());
								rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"security_lead", "resCompany", temp, ex_tFileInputDelimited_3),
										ex_tFileInputDelimited_3));
							}

						} else {

							resCompany.security_lead = null;

						}

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,
							resCompanyStruct resCompany) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_3, resCompany);

						valueToConn_1(fid_tFileInputDelimited_3, resCompany);

					}

				}
				RowHelper_tFileInputDelimited_3 rowHelper_tFileInputDelimited_3 = new RowHelper_tFileInputDelimited_3();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCompany.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCompany.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						resCompany = null;

						resCompany = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						resCompany = new resCompanyStruct();
						try {

							rowHelper_tFileInputDelimited_3.valueToConn(fid_tFileInputDelimited_3, resCompany);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							resCompany = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "resCompany"
						if (resCompany != null) {

							/**
							 * [tAdvancedHash_resCompany main ] start
							 */

							currentComponent = "tAdvancedHash_resCompany";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "resCompany"

								);
							}

							resCompanyStruct resCompany_HashRow = new resCompanyStruct();

							resCompany_HashRow.id = resCompany.id;

							resCompany_HashRow.name = resCompany.name;

							resCompany_HashRow.partner_id = resCompany.partner_id;

							resCompany_HashRow.currency_id = resCompany.currency_id;

							resCompany_HashRow.sequence = resCompany.sequence;

							resCompany_HashRow.create_date = resCompany.create_date;

							resCompany_HashRow.parent_id = resCompany.parent_id;

							resCompany_HashRow.report_header = resCompany.report_header;

							resCompany_HashRow.report_footer = resCompany.report_footer;

							resCompany_HashRow.company_details = resCompany.company_details;

							resCompany_HashRow.logo_web = resCompany.logo_web;

							resCompany_HashRow.email = resCompany.email;

							resCompany_HashRow.phone = resCompany.phone;

							resCompany_HashRow.mobile = resCompany.mobile;

							resCompany_HashRow.company_registry = resCompany.company_registry;

							resCompany_HashRow.paperformat_id = resCompany.paperformat_id;

							resCompany_HashRow.external_report_layout_id = resCompany.external_report_layout_id;

							resCompany_HashRow.base_onboarding_company_state = resCompany.base_onboarding_company_state;

							resCompany_HashRow.font = resCompany.font;

							resCompany_HashRow.primary_color = resCompany.primary_color;

							resCompany_HashRow.secondary_color = resCompany.secondary_color;

							resCompany_HashRow.layout_background = resCompany.layout_background;

							resCompany_HashRow.create_uid = resCompany.create_uid;

							resCompany_HashRow.write_uid = resCompany.write_uid;

							resCompany_HashRow.write_date = resCompany.write_date;

							resCompany_HashRow.resource_calendar_id = resCompany.resource_calendar_id;

							resCompany_HashRow.partner_gid = resCompany.partner_gid;

							resCompany_HashRow.iap_enrich_auto_done = resCompany.iap_enrich_auto_done;

							resCompany_HashRow.snailmail_color = resCompany.snailmail_color;

							resCompany_HashRow.snailmail_cover = resCompany.snailmail_cover;

							resCompany_HashRow.snailmail_duplex = resCompany.snailmail_duplex;

							resCompany_HashRow.fiscalyear_last_day = resCompany.fiscalyear_last_day;

							resCompany_HashRow.fiscalyear_last_month = resCompany.fiscalyear_last_month;

							resCompany_HashRow.period_lock_date = resCompany.period_lock_date;

							resCompany_HashRow.fiscalyear_lock_date = resCompany.fiscalyear_lock_date;

							resCompany_HashRow.tax_lock_date = resCompany.tax_lock_date;

							resCompany_HashRow.transfer_account_id = resCompany.transfer_account_id;

							resCompany_HashRow.expects_chart_of_accounts = resCompany.expects_chart_of_accounts;

							resCompany_HashRow.chart_template_id = resCompany.chart_template_id;

							resCompany_HashRow.bank_account_code_prefix = resCompany.bank_account_code_prefix;

							resCompany_HashRow.cash_account_code_prefix = resCompany.cash_account_code_prefix;

							resCompany_HashRow.default_cash_difference_income_account_id = resCompany.default_cash_difference_income_account_id;

							resCompany_HashRow.default_cash_difference_expense_account_id = resCompany.default_cash_difference_expense_account_id;

							resCompany_HashRow.account_journal_suspense_account_id = resCompany.account_journal_suspense_account_id;

							resCompany_HashRow.account_journal_payment_debit_account_id = resCompany.account_journal_payment_debit_account_id;

							resCompany_HashRow.account_journal_payment_credit_account_id = resCompany.account_journal_payment_credit_account_id;

							resCompany_HashRow.transfer_account_code_prefix = resCompany.transfer_account_code_prefix;

							resCompany_HashRow.account_sale_tax_id = resCompany.account_sale_tax_id;

							resCompany_HashRow.account_purchase_tax_id = resCompany.account_purchase_tax_id;

							resCompany_HashRow.tax_calculation_rounding_method = resCompany.tax_calculation_rounding_method;

							resCompany_HashRow.currency_exchange_journal_id = resCompany.currency_exchange_journal_id;

							resCompany_HashRow.income_currency_exchange_account_id = resCompany.income_currency_exchange_account_id;

							resCompany_HashRow.expense_currency_exchange_account_id = resCompany.expense_currency_exchange_account_id;

							resCompany_HashRow.anglo_saxon_accounting = resCompany.anglo_saxon_accounting;

							resCompany_HashRow.property_stock_account_input_categ_id = resCompany.property_stock_account_input_categ_id;

							resCompany_HashRow.property_stock_account_output_categ_id = resCompany.property_stock_account_output_categ_id;

							resCompany_HashRow.property_stock_valuation_account_id = resCompany.property_stock_valuation_account_id;

							resCompany_HashRow.incoterm_id = resCompany.incoterm_id;

							resCompany_HashRow.qr_code = resCompany.qr_code;

							resCompany_HashRow.invoice_is_email = resCompany.invoice_is_email;

							resCompany_HashRow.invoice_is_print = resCompany.invoice_is_print;

							resCompany_HashRow.account_opening_move_id = resCompany.account_opening_move_id;

							resCompany_HashRow.account_opening_date = resCompany.account_opening_date;

							resCompany_HashRow.account_setup_bank_data_state = resCompany.account_setup_bank_data_state;

							resCompany_HashRow.account_setup_fy_data_state = resCompany.account_setup_fy_data_state;

							resCompany_HashRow.account_setup_coa_state = resCompany.account_setup_coa_state;

							resCompany_HashRow.account_setup_taxes_state = resCompany.account_setup_taxes_state;

							resCompany_HashRow.account_onboarding_invoice_layout_state = resCompany.account_onboarding_invoice_layout_state;

							resCompany_HashRow.account_onboarding_create_invoice_state = resCompany.account_onboarding_create_invoice_state;

							resCompany_HashRow.account_onboarding_sale_tax_state = resCompany.account_onboarding_sale_tax_state;

							resCompany_HashRow.account_invoice_onboarding_state = resCompany.account_invoice_onboarding_state;

							resCompany_HashRow.account_dashboard_onboarding_state = resCompany.account_dashboard_onboarding_state;

							resCompany_HashRow.invoice_terms = resCompany.invoice_terms;

							resCompany_HashRow.terms_type = resCompany.terms_type;

							resCompany_HashRow.invoice_terms_html = resCompany.invoice_terms_html;

							resCompany_HashRow.account_setup_bill_state = resCompany.account_setup_bill_state;

							resCompany_HashRow.account_default_pos_receivable_account_id = resCompany.account_default_pos_receivable_account_id;

							resCompany_HashRow.expense_accrual_account_id = resCompany.expense_accrual_account_id;

							resCompany_HashRow.revenue_accrual_account_id = resCompany.revenue_accrual_account_id;

							resCompany_HashRow.automatic_entry_default_journal_id = resCompany.automatic_entry_default_journal_id;

							resCompany_HashRow.account_fiscal_country_id = resCompany.account_fiscal_country_id;

							resCompany_HashRow.tax_exigibility = resCompany.tax_exigibility;

							resCompany_HashRow.tax_cash_basis_journal_id = resCompany.tax_cash_basis_journal_id;

							resCompany_HashRow.account_cash_basis_base_account_id = resCompany.account_cash_basis_base_account_id;

							resCompany_HashRow.payment_acquirer_onboarding_state = resCompany.payment_acquirer_onboarding_state;

							resCompany_HashRow.payment_onboarding_payment_method = resCompany.payment_onboarding_payment_method;

							resCompany_HashRow.invoice_is_snailmail = resCompany.invoice_is_snailmail;

							resCompany_HashRow.portal_confirmation_sign = resCompany.portal_confirmation_sign;

							resCompany_HashRow.portal_confirmation_pay = resCompany.portal_confirmation_pay;

							resCompany_HashRow.quotation_validity_days = resCompany.quotation_validity_days;

							resCompany_HashRow.sale_quotation_onboarding_state = resCompany.sale_quotation_onboarding_state;

							resCompany_HashRow.sale_onboarding_order_confirmation_state = resCompany.sale_onboarding_order_confirmation_state;

							resCompany_HashRow.sale_onboarding_sample_quotation_state = resCompany.sale_onboarding_sample_quotation_state;

							resCompany_HashRow.sale_onboarding_payment_method = resCompany.sale_onboarding_payment_method;

							resCompany_HashRow.sale_order_template_id = resCompany.sale_order_template_id;

							resCompany_HashRow.nomenclature_id = resCompany.nomenclature_id;

							resCompany_HashRow.internal_transit_location_id = resCompany.internal_transit_location_id;

							resCompany_HashRow.stock_move_email_validation = resCompany.stock_move_email_validation;

							resCompany_HashRow.stock_mail_confirmation_template_id = resCompany.stock_mail_confirmation_template_id;

							resCompany_HashRow.annual_inventory_month = resCompany.annual_inventory_month;

							resCompany_HashRow.annual_inventory_day = resCompany.annual_inventory_day;

							resCompany_HashRow.stock_move_sms_validation = resCompany.stock_move_sms_validation;

							resCompany_HashRow.stock_sms_confirmation_template_id = resCompany.stock_sms_confirmation_template_id;

							resCompany_HashRow.has_received_warning_stock_sms = resCompany.has_received_warning_stock_sms;

							resCompany_HashRow.point_of_sale_update_stock_quantities = resCompany.point_of_sale_update_stock_quantities;

							resCompany_HashRow.security_lead = resCompany.security_lead;

							tHash_Lookup_resCompany.put(resCompany_HashRow);

							tos_count_tAdvancedHash_resCompany++;

							/**
							 * [tAdvancedHash_resCompany main ] stop
							 */

							/**
							 * [tAdvancedHash_resCompany process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_resCompany";

							/**
							 * [tAdvancedHash_resCompany process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_resCompany process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_resCompany";

							/**
							 * [tAdvancedHash_resCompany process_data_end ] stop
							 */

						} // End of branch "resCompany"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCompany.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_resCompany end ] start
				 */

				currentComponent = "tAdvancedHash_resCompany";

				tHash_Lookup_resCompany.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "resCompany");
				}

				ok_Hash.put("tAdvancedHash_resCompany", true);
				end_Hash.put("tAdvancedHash_resCompany", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_resCompany end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_resCompany finally ] start
				 */

				currentComponent = "tAdvancedHash_resCompany";

				/**
				 * [tAdvancedHash_resCompany finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class resCountryStateStruct
			implements routines.system.IPersistableComparableLookupRow<resCountryStateStruct> {
		final static byte[] commonByteArrayLock_PACIFICO_customerDim = new byte[0];
		static byte[] commonByteArray_PACIFICO_customerDim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final resCountryStateStruct other = (resCountryStateStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(resCountryStateStruct other) {

			other.id = this.id;
			other.country_id = this.country_id;
			other.name = this.name;
			other.code = this.code;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_uid = this.write_uid;
			other.write_date = this.write_date;

		}

		public void copyKeysDataTo(resCountryStateStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_customerDim) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.country_id = readInteger(dis, ois);

				this.name = readString(dis, ois);

				this.code = readString(dis, ois);

				this.create_uid = readInteger(dis, ois);

				this.create_date = readDate(dis, ois);

				this.write_uid = readInteger(dis, ois);

				this.write_date = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.country_id = readInteger(dis, objectIn);

				this.name = readString(dis, objectIn);

				this.code = readString(dis, objectIn);

				this.create_uid = readInteger(dis, objectIn);

				this.create_date = readDate(dis, objectIn);

				this.write_uid = readInteger(dis, objectIn);

				this.write_date = readDate(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.country_id, dos, oos);

				writeString(this.name, dos, oos);

				writeString(this.code, dos, oos);

				writeInteger(this.create_uid, dos, oos);

				writeDate(this.create_date, dos, oos);

				writeInteger(this.write_uid, dos, oos);

				writeDate(this.write_date, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.country_id, dos, objectOut);

				writeString(this.name, dos, objectOut);

				writeString(this.code, dos, objectOut);

				writeInteger(this.create_uid, dos, objectOut);

				writeDate(this.create_date, dos, objectOut);

				writeInteger(this.write_uid, dos, objectOut);

				writeDate(this.write_date, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",name=" + name);
			sb.append(",code=" + code);
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(resCountryStateStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				resCountryStateStruct resCountryState = new resCountryStateStruct();

				/**
				 * [tAdvancedHash_resCountryState begin ] start
				 */

				ok_Hash.put("tAdvancedHash_resCountryState", false);
				start_Hash.put("tAdvancedHash_resCountryState", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_resCountryState";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "resCountryState");
				}

				int tos_count_tAdvancedHash_resCountryState = 0;

				// connection name:resCountryState
				// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_2)
				// outputs:(resCountryState,resCountryState) | target
				// node:tAdvancedHash_resCountryState - inputs:(resCountryState) outputs:()
				// linked node: tMap_1 -
				// inputs:(resPartner,resCountry,resCompany,resCountryState)
				// outputs:(CustomerDim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_resCountryState = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<resCountryStateStruct> tHash_Lookup_resCountryState = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<resCountryStateStruct>getLookup(matchingModeEnum_resCountryState);

				globalMap.put("tHash_Lookup_resCountryState", tHash_Lookup_resCountryState);

				/**
				 * [tAdvancedHash_resCountryState begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCountryState.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCountryState.csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						resCountryState = null;

						resCountryState = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						resCountryState = new resCountryStateStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									resCountryState.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "resCountryState", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								resCountryState.id = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 1;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									resCountryState.country_id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"country_id", "resCountryState", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								resCountryState.country_id = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 2;

							resCountryState.name = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							resCountryState.code = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									resCountryState.create_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_uid", "resCountryState", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								resCountryState.create_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 5;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									resCountryState.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"create_date", "resCountryState", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								resCountryState.create_date = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 6;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									resCountryState.write_uid = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_uid", "resCountryState", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								resCountryState.write_uid = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 7;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									resCountryState.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"write_date", "resCountryState", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								resCountryState.write_date = null;

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							resCountryState = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "resCountryState"
						if (resCountryState != null) {

							/**
							 * [tAdvancedHash_resCountryState main ] start
							 */

							currentComponent = "tAdvancedHash_resCountryState";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "resCountryState"

								);
							}

							resCountryStateStruct resCountryState_HashRow = new resCountryStateStruct();

							resCountryState_HashRow.id = resCountryState.id;

							resCountryState_HashRow.country_id = resCountryState.country_id;

							resCountryState_HashRow.name = resCountryState.name;

							resCountryState_HashRow.code = resCountryState.code;

							resCountryState_HashRow.create_uid = resCountryState.create_uid;

							resCountryState_HashRow.create_date = resCountryState.create_date;

							resCountryState_HashRow.write_uid = resCountryState.write_uid;

							resCountryState_HashRow.write_date = resCountryState.write_date;

							tHash_Lookup_resCountryState.put(resCountryState_HashRow);

							tos_count_tAdvancedHash_resCountryState++;

							/**
							 * [tAdvancedHash_resCountryState main ] stop
							 */

							/**
							 * [tAdvancedHash_resCountryState process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_resCountryState";

							/**
							 * [tAdvancedHash_resCountryState process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_resCountryState process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_resCountryState";

							/**
							 * [tAdvancedHash_resCountryState process_data_end ] stop
							 */

						} // End of branch "resCountryState"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/resCountryState.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_resCountryState end ] start
				 */

				currentComponent = "tAdvancedHash_resCountryState";

				tHash_Lookup_resCountryState.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "resCountryState");
				}

				ok_Hash.put("tAdvancedHash_resCountryState", true);
				end_Hash.put("tAdvancedHash_resCountryState", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_resCountryState end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_resCountryState finally ] start
				 */

				currentComponent = "tAdvancedHash_resCountryState";

				/**
				 * [tAdvancedHash_resCountryState finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final customerDim customerDimClass = new customerDim();

		int exitCode = customerDimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = customerDim.class.getClassLoader()
					.getResourceAsStream("pacifico/customerdim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = customerDim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : customerDim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeS3Connections();

	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 397764 characters generated by Talend Open Studio for Data Integration on the
 * December 3, 2022 at 11:54:39 PM CST
 ************************************************************************************************/