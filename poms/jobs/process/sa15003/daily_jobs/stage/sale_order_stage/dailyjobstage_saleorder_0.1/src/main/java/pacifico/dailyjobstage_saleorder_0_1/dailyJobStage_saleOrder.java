// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.dailyjobstage_saleorder_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dailyJobStage_saleOrder Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class dailyJobStage_saleOrder implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dailyJobStage_saleOrder";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dailyJobStage_saleOrder.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dailyJobStage_saleOrder.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_saleOrder.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_saleOrder.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_saleOrder, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.campaign_id = readString(dis);
					
					this.source_id = readString(dis);
					
					this.medium_id = readString(dis);
					
					this.message_main_attachment_id = readString(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
						this.partner_id = readInteger(dis);
					
						this.partner_invoice_id = readInteger(dis);
					
						this.partner_shipping_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.analytic_account_id = readString(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = readInteger(dis);
					
						this.amount_tax = readInteger(dis);
					
						this.amount_total = readInteger(dis);
					
						this.currency_rate = readInteger(dis);
					
					this.payment_term_id = readString(dis);
					
					this.fiscal_position_id = readString(dis);
					
						this.company_id = readInteger(dis);
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readString(dis);
					
					this.commitment_date = readString(dis);
					
					this.show_update_pricelist = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_template_id = readString(dis);
					
					this.incoterm = readString(dis);
					
					this.picking_policy = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.procurement_group_id = readString(dis);
					
					this.effective_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.campaign_id,dos);
					
					// String
				
						writeString(this.source_id,dos);
					
					// String
				
						writeString(this.medium_id,dos);
					
					// String
				
						writeString(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// String
				
						writeString(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.partner_invoice_id,dos);
					
					// Integer
				
						writeInteger(this.partner_shipping_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// Integer
				
						writeInteger(this.amount_untaxed,dos);
					
					// Integer
				
						writeInteger(this.amount_tax,dos);
					
					// Integer
				
						writeInteger(this.amount_total,dos);
					
					// Integer
				
						writeInteger(this.currency_rate,dos);
					
					// String
				
						writeString(this.payment_term_id,dos);
					
					// String
				
						writeString(this.fiscal_position_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// String
				
						writeString(this.signed_on,dos);
					
					// String
				
						writeString(this.commitment_date,dos);
					
					// String
				
						writeString(this.show_update_pricelist,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// String
				
						writeString(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.procurement_group_id,dos);
					
					// String
				
						writeString(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		row5Struct row5 = new row5Struct();

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out1Struct row3 = out1;
out1Struct row4 = out1;

			row6Struct row6 = new row6Struct();
row6Struct row7 = row6;





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageOut.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"US-ASCII"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("campaign_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("source_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("medium_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message_main_attachment_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("access_token");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("name");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("client_order_ref");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("reference");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("state");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("date_order");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("validity_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("require_signature");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("require_payment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("create_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("user_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_invoice_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_shipping_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pricelist_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("currency_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("analytic_account_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("invoice_status");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("note");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_untaxed");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_tax");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_total");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("currency_rate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("payment_term_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("fiscal_position_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("company_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("team_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("signed_by");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("signed_on");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("commitment_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("show_update_pricelist");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("create_uid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("write_uid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("write_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("sale_order_template_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("incoterm");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("picking_policy");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("warehouse_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("procurement_group_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("effective_date");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[46];

        public void addRow(String[] row) {

            for (int i = 0; i < 46; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 45 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 45 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[45] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"id","campaign_id","source_id","medium_id","message_main_attachment_id","access_token","name","origin","client_order_ref","reference","state","date_order","validity_date","require_signature","require_payment","create_date","user_id","partner_id","partner_invoice_id","partner_shipping_id","pricelist_id","currency_id","analytic_account_id","invoice_status","note","amount_untaxed","amount_tax","amount_total","currency_rate","payment_term_id","fiscal_position_id","company_id","team_id","signed_by","signed_on","commitment_date","show_update_pricelist","create_uid","write_uid","write_date","sale_order_template_id","incoterm","picking_policy","warehouse_id","procurement_group_id","effective_date",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5","row4");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row5 = new row5Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row5.campaign_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							row5.source_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row5.medium_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row5.message_main_attachment_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							row5.access_token = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
							row5.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
							row5.origin = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
							row5.client_order_ref = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							row5.reference = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
							row5.state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row5.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
							row5.validity_date = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.require_signature = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"require_signature", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.require_signature = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.require_payment = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"require_payment", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.require_payment = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 15;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row5.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 16;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 17;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.partner_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.partner_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 18;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.partner_invoice_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_invoice_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.partner_invoice_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 19;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.partner_shipping_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_shipping_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.partner_shipping_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 20;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 21;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.currency_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.currency_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 22;
					
							row5.analytic_account_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 23;
					
							row5.invoice_status = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 24;
					
							row5.note = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 25;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.amount_untaxed = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_untaxed", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.amount_untaxed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 26;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.amount_tax = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 27;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 28;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 29;
					
							row5.payment_term_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 30;
					
							row5.fiscal_position_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 31;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 32;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.team_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"team_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.team_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 33;
					
							row5.signed_by = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 34;
					
							row5.signed_on = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 35;
					
							row5.commitment_date = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 36;
					
							row5.show_update_pricelist = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 37;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 38;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 39;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row5.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 40;
					
							row5.sale_order_template_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 41;
					
							row5.incoterm = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 42;
					
							row5.picking_policy = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 43;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.warehouse_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"warehouse_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.warehouse_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 44;
					
							row5.procurement_group_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 45;
					
							row5.effective_date = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row5"
									
							);
						}
						
//////////
 

// for output
			row6 = new row6Struct();
								
			row6.id = row5.id;								
			row6.campaign_id = row5.campaign_id;								
			row6.source_id = row5.source_id;								
			row6.medium_id = row5.medium_id;								
			row6.message_main_attachment_id = row5.message_main_attachment_id;								
			row6.access_token = row5.access_token;								
			row6.name = row5.name;								
			row6.origin = row5.origin;								
			row6.client_order_ref = row5.client_order_ref;								
			row6.reference = row5.reference;								
			row6.state = row5.state;								
			row6.date_order = row5.date_order;								
			row6.validity_date = row5.validity_date;								
			row6.require_signature = row5.require_signature;								
			row6.require_payment = row5.require_payment;								
			row6.create_date = row5.create_date;								
			row6.user_id = row5.user_id;								
			row6.partner_id = row5.partner_id;								
			row6.partner_invoice_id = row5.partner_invoice_id;								
			row6.partner_shipping_id = row5.partner_shipping_id;								
			row6.pricelist_id = row5.pricelist_id;								
			row6.currency_id = row5.currency_id;								
			row6.analytic_account_id = row5.analytic_account_id;								
			row6.invoice_status = row5.invoice_status;								
			row6.note = row5.note;								
			row6.amount_untaxed = row5.amount_untaxed;								
			row6.amount_tax = row5.amount_tax;								
			row6.amount_total = row5.amount_total;								
			row6.currency_rate = row5.currency_rate;								
			row6.payment_term_id = row5.payment_term_id;								
			row6.fiscal_position_id = row5.fiscal_position_id;								
			row6.company_id = row5.company_id;								
			row6.team_id = row5.team_id;								
			row6.signed_by = row5.signed_by;								
			row6.signed_on = row5.signed_on;								
			row6.commitment_date = row5.commitment_date;								
			row6.show_update_pricelist = row5.show_update_pricelist;								
			row6.create_uid = row5.create_uid;								
			row6.write_uid = row5.write_uid;								
			row6.write_date = row5.write_date;								
			row6.sale_order_template_id = row5.sale_order_template_id;								
			row6.incoterm = row5.incoterm;								
			row6.picking_policy = row5.picking_policy;								
			row6.warehouse_id = row5.warehouse_id;								
			row6.procurement_group_id = row5.procurement_group_id;								
			row6.effective_date = row5.effective_date;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[46];
   				
	    		if(row6.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row6.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.campaign_id != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row6.campaign_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.source_id != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row6.source_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.medium_id != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row6.medium_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.message_main_attachment_id != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row6.message_main_attachment_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.access_token != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row6.access_token)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.name != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row6.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.origin != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row6.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.client_order_ref != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row6.client_order_ref)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.reference != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row6.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.state != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row6.state)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.date_order != null) { //              
                 row_tLogRow_1[11]=    						
								FormatterUtils.format_Date(row6.date_order, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row6.validity_date != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row6.validity_date)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.require_signature != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row6.require_signature)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.require_payment != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row6.require_payment)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.create_date != null) { //              
                 row_tLogRow_1[15]=    						
								FormatterUtils.format_Date(row6.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row6.user_id != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(row6.user_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.partner_id != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(row6.partner_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.partner_invoice_id != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(row6.partner_invoice_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.partner_shipping_id != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(row6.partner_shipping_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.pricelist_id != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(row6.pricelist_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.currency_id != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(row6.currency_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.analytic_account_id != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(row6.analytic_account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.invoice_status != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(row6.invoice_status)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.note != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(row6.note)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.amount_untaxed != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(row6.amount_untaxed)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.amount_tax != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(row6.amount_tax)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.amount_total != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(row6.amount_total)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.currency_rate != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(row6.currency_rate)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.payment_term_id != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(row6.payment_term_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.fiscal_position_id != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(row6.fiscal_position_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.company_id != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(row6.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.team_id != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(row6.team_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.signed_by != null) { //              
                 row_tLogRow_1[33]=    						    
				                String.valueOf(row6.signed_by)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.signed_on != null) { //              
                 row_tLogRow_1[34]=    						    
				                String.valueOf(row6.signed_on)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.commitment_date != null) { //              
                 row_tLogRow_1[35]=    						    
				                String.valueOf(row6.commitment_date)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.show_update_pricelist != null) { //              
                 row_tLogRow_1[36]=    						    
				                String.valueOf(row6.show_update_pricelist)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.create_uid != null) { //              
                 row_tLogRow_1[37]=    						    
				                String.valueOf(row6.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.write_uid != null) { //              
                 row_tLogRow_1[38]=    						    
				                String.valueOf(row6.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.write_date != null) { //              
                 row_tLogRow_1[39]=    						
								FormatterUtils.format_Date(row6.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row6.sale_order_template_id != null) { //              
                 row_tLogRow_1[40]=    						    
				                String.valueOf(row6.sale_order_template_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.incoterm != null) { //              
                 row_tLogRow_1[41]=    						    
				                String.valueOf(row6.incoterm)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.picking_policy != null) { //              
                 row_tLogRow_1[42]=    						    
				                String.valueOf(row6.picking_policy)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.warehouse_id != null) { //              
                 row_tLogRow_1[43]=    						    
				                String.valueOf(row6.warehouse_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.procurement_group_id != null) { //              
                 row_tLogRow_1[44]=    						    
				                String.valueOf(row6.procurement_group_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.effective_date != null) { //              
                 row_tLogRow_1[45]=    						    
				                String.valueOf(row6.effective_date)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row7 = row6;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row7.id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.campaign_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.campaign_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.source_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.source_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.medium_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.medium_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.message_main_attachment_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.message_main_attachment_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.access_token != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.access_token
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.client_order_ref != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.client_order_ref
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.reference != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.reference
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.state != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.date_order != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.date_order, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.validity_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.validity_date
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.require_signature != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.require_signature
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.require_payment != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.require_payment
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.create_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.user_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.user_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.partner_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.partner_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.partner_invoice_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.partner_invoice_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.partner_shipping_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.partner_shipping_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.pricelist_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.pricelist_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.currency_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.currency_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.analytic_account_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.analytic_account_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.invoice_status != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.invoice_status
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.note != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.note
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.amount_untaxed != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.amount_untaxed
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.amount_tax != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.amount_tax
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.amount_total != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.amount_total
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.currency_rate != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.currency_rate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.payment_term_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.payment_term_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.fiscal_position_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.company_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.company_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.team_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.team_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.signed_by != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.signed_by
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.signed_on != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.signed_on
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.commitment_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.commitment_date
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.show_update_pricelist != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.show_update_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.create_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.write_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.write_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.sale_order_template_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.sale_order_template_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.incoterm != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.incoterm
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.picking_policy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.warehouse_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.procurement_group_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.procurement_group_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.effective_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.effective_date
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/delta.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[46];

        public void addRow(String[] row) {

            for (int i = 0; i < 46; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 45 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 45 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[45] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"id","campaign_id","source_id","medium_id","message_main_attachment_id","access_token","name","origin","client_order_ref","reference","state","date_order","validity_date","require_signature","require_payment","create_date","user_id","partner_id","partner_invoice_id","partner_shipping_id","pricelist_id","currency_id","analytic_account_id","invoice_status","note","amount_untaxed","amount_tax","amount_total","currency_rate","payment_term_id","fiscal_position_id","company_id","team_id","signed_by","signed_on","commitment_date","show_update_pricelist","create_uid","write_uid","write_date","sale_order_template_id","incoterm","picking_policy","warehouse_id","procurement_group_id","effective_date",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw.csv", "ISO-8859-15",";","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.campaign_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.source_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.medium_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.message_main_attachment_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.access_token = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.origin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.client_order_ref = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.reference = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.validity_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.require_signature = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"require_signature", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.require_signature = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.require_payment = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"require_payment", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.require_payment = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.partner_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.partner_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.partner_invoice_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_invoice_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.partner_invoice_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.partner_shipping_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_shipping_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.partner_shipping_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.currency_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.currency_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row1.analytic_account_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row1.invoice_status = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row1.note = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.amount_untaxed = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_untaxed", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.amount_untaxed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.amount_tax = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row1.payment_term_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row1.fiscal_position_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.team_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"team_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.team_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row1.signed_by = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row1.signed_on = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row1.commitment_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row1.show_update_pricelist = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row1.sale_order_template_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row1.incoterm = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row1.picking_policy = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.warehouse_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"warehouse_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.warehouse_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row1.procurement_group_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row1.effective_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.id =  row1.id ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.id = '" + row2HashKey.id + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out1'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out1_tmp.id = row1.id ;
out1_tmp.campaign_id = row1.campaign_id ;
out1_tmp.source_id = row1.source_id ;
out1_tmp.medium_id = row1.medium_id ;
out1_tmp.message_main_attachment_id = row1.message_main_attachment_id ;
out1_tmp.access_token = row1.access_token ;
out1_tmp.name = row1.name ;
out1_tmp.origin = row1.origin ;
out1_tmp.client_order_ref = row1.client_order_ref ;
out1_tmp.reference = row1.reference ;
out1_tmp.state = row1.state ;
out1_tmp.date_order = row1.date_order ;
out1_tmp.validity_date = row1.validity_date ;
out1_tmp.require_signature = row1.require_signature ;
out1_tmp.require_payment = row1.require_payment ;
out1_tmp.create_date = row1.create_date ;
out1_tmp.user_id = row1.user_id ;
out1_tmp.partner_id = row1.partner_id ;
out1_tmp.partner_invoice_id = row1.partner_invoice_id ;
out1_tmp.partner_shipping_id = row1.partner_shipping_id ;
out1_tmp.pricelist_id = row1.pricelist_id ;
out1_tmp.currency_id = row1.currency_id ;
out1_tmp.analytic_account_id = row1.analytic_account_id ;
out1_tmp.invoice_status = row1.invoice_status ;
out1_tmp.note = row1.note ;
out1_tmp.amount_untaxed = row1.amount_untaxed ;
out1_tmp.amount_tax = row1.amount_tax ;
out1_tmp.amount_total = row1.amount_total ;
out1_tmp.currency_rate = row1.currency_rate ;
out1_tmp.payment_term_id = row1.payment_term_id ;
out1_tmp.fiscal_position_id = row1.fiscal_position_id ;
out1_tmp.company_id = row1.company_id ;
out1_tmp.team_id = row1.team_id ;
out1_tmp.signed_by = row1.signed_by ;
out1_tmp.signed_on = row1.signed_on ;
out1_tmp.commitment_date = row1.commitment_date ;
out1_tmp.show_update_pricelist = row1.show_update_pricelist ;
out1_tmp.create_uid = row1.create_uid ;
out1_tmp.write_uid = row1.write_uid ;
out1_tmp.write_date = row1.write_date ;
out1_tmp.sale_order_template_id = row1.sale_order_template_id ;
out1_tmp.incoterm = row1.incoterm ;
out1_tmp.picking_policy = row1.picking_policy ;
out1_tmp.warehouse_id = row1.warehouse_id ;
out1_tmp.procurement_group_id = row1.procurement_group_id ;
out1_tmp.effective_date = row1.effective_date ;
out1 = out1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[46];
   				
	    		if(out1.id != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(out1.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.campaign_id != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(out1.campaign_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.source_id != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(out1.source_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.medium_id != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(out1.medium_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.message_main_attachment_id != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(out1.message_main_attachment_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.access_token != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(out1.access_token)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.name != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(out1.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.origin != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(out1.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.client_order_ref != null) { //              
                 row_tLogRow_2[8]=    						    
				                String.valueOf(out1.client_order_ref)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.reference != null) { //              
                 row_tLogRow_2[9]=    						    
				                String.valueOf(out1.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.state != null) { //              
                 row_tLogRow_2[10]=    						    
				                String.valueOf(out1.state)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.date_order != null) { //              
                 row_tLogRow_2[11]=    						
								FormatterUtils.format_Date(out1.date_order, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(out1.validity_date != null) { //              
                 row_tLogRow_2[12]=    						    
				                String.valueOf(out1.validity_date)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.require_signature != null) { //              
                 row_tLogRow_2[13]=    						    
				                String.valueOf(out1.require_signature)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.require_payment != null) { //              
                 row_tLogRow_2[14]=    						    
				                String.valueOf(out1.require_payment)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.create_date != null) { //              
                 row_tLogRow_2[15]=    						
								FormatterUtils.format_Date(out1.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(out1.user_id != null) { //              
                 row_tLogRow_2[16]=    						    
				                String.valueOf(out1.user_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.partner_id != null) { //              
                 row_tLogRow_2[17]=    						    
				                String.valueOf(out1.partner_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.partner_invoice_id != null) { //              
                 row_tLogRow_2[18]=    						    
				                String.valueOf(out1.partner_invoice_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.partner_shipping_id != null) { //              
                 row_tLogRow_2[19]=    						    
				                String.valueOf(out1.partner_shipping_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.pricelist_id != null) { //              
                 row_tLogRow_2[20]=    						    
				                String.valueOf(out1.pricelist_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.currency_id != null) { //              
                 row_tLogRow_2[21]=    						    
				                String.valueOf(out1.currency_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.analytic_account_id != null) { //              
                 row_tLogRow_2[22]=    						    
				                String.valueOf(out1.analytic_account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.invoice_status != null) { //              
                 row_tLogRow_2[23]=    						    
				                String.valueOf(out1.invoice_status)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.note != null) { //              
                 row_tLogRow_2[24]=    						    
				                String.valueOf(out1.note)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.amount_untaxed != null) { //              
                 row_tLogRow_2[25]=    						    
				                String.valueOf(out1.amount_untaxed)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.amount_tax != null) { //              
                 row_tLogRow_2[26]=    						    
				                String.valueOf(out1.amount_tax)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.amount_total != null) { //              
                 row_tLogRow_2[27]=    						    
				                String.valueOf(out1.amount_total)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.currency_rate != null) { //              
                 row_tLogRow_2[28]=    						    
				                String.valueOf(out1.currency_rate)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.payment_term_id != null) { //              
                 row_tLogRow_2[29]=    						    
				                String.valueOf(out1.payment_term_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.fiscal_position_id != null) { //              
                 row_tLogRow_2[30]=    						    
				                String.valueOf(out1.fiscal_position_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.company_id != null) { //              
                 row_tLogRow_2[31]=    						    
				                String.valueOf(out1.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.team_id != null) { //              
                 row_tLogRow_2[32]=    						    
				                String.valueOf(out1.team_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.signed_by != null) { //              
                 row_tLogRow_2[33]=    						    
				                String.valueOf(out1.signed_by)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.signed_on != null) { //              
                 row_tLogRow_2[34]=    						    
				                String.valueOf(out1.signed_on)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.commitment_date != null) { //              
                 row_tLogRow_2[35]=    						    
				                String.valueOf(out1.commitment_date)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.show_update_pricelist != null) { //              
                 row_tLogRow_2[36]=    						    
				                String.valueOf(out1.show_update_pricelist)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.create_uid != null) { //              
                 row_tLogRow_2[37]=    						    
				                String.valueOf(out1.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.write_uid != null) { //              
                 row_tLogRow_2[38]=    						    
				                String.valueOf(out1.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.write_date != null) { //              
                 row_tLogRow_2[39]=    						
								FormatterUtils.format_Date(out1.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(out1.sale_order_template_id != null) { //              
                 row_tLogRow_2[40]=    						    
				                String.valueOf(out1.sale_order_template_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.incoterm != null) { //              
                 row_tLogRow_2[41]=    						    
				                String.valueOf(out1.incoterm)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.picking_policy != null) { //              
                 row_tLogRow_2[42]=    						    
				                String.valueOf(out1.picking_policy)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.warehouse_id != null) { //              
                 row_tLogRow_2[43]=    						    
				                String.valueOf(out1.warehouse_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.procurement_group_id != null) { //              
                 row_tLogRow_2[44]=    						    
				                String.valueOf(out1.procurement_group_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out1.effective_date != null) { //              
                 row_tLogRow_2[45]=    						    
				                String.valueOf(out1.effective_date)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = out1;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row3.id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.campaign_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.campaign_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.source_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.source_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.medium_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.medium_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.message_main_attachment_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.message_main_attachment_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.access_token != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.access_token
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.client_order_ref != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.client_order_ref
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.reference != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.reference
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.state != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.state
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.date_order != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row3.date_order, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.validity_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.validity_date
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.require_signature != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.require_signature
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.require_payment != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.require_payment
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.create_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row3.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.user_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.user_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.partner_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.partner_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.partner_invoice_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.partner_invoice_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.partner_shipping_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.partner_shipping_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.pricelist_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.pricelist_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.currency_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.currency_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.analytic_account_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.analytic_account_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.invoice_status != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.invoice_status
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.note != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.note
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.amount_untaxed != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.amount_untaxed
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.amount_tax != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.amount_tax
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.amount_total != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.amount_total
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.currency_rate != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.currency_rate
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.payment_term_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.payment_term_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.fiscal_position_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.company_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.company_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.team_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.team_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.signed_by != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.signed_by
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.signed_on != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.signed_on
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.commitment_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.commitment_date
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.show_update_pricelist != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.show_update_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.create_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.write_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.write_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row3.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.sale_order_template_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.sale_order_template_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.incoterm != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.incoterm
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.picking_policy != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.warehouse_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.procurement_group_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.procurement_group_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.effective_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.effective_date
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 
     row4 = row3;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row4"
									
							);
						}
						
//////////
 

// for output
			row6 = new row6Struct();
								
			row6.id = row4.id;								
			row6.campaign_id = row4.campaign_id;								
			row6.source_id = row4.source_id;								
			row6.medium_id = row4.medium_id;								
			row6.message_main_attachment_id = row4.message_main_attachment_id;								
			row6.access_token = row4.access_token;								
			row6.name = row4.name;								
			row6.origin = row4.origin;								
			row6.client_order_ref = row4.client_order_ref;								
			row6.reference = row4.reference;								
			row6.state = row4.state;								
			row6.date_order = row4.date_order;								
			row6.validity_date = row4.validity_date;								
			row6.require_signature = row4.require_signature;								
			row6.require_payment = row4.require_payment;								
			row6.create_date = row4.create_date;								
			row6.user_id = row4.user_id;								
			row6.partner_id = row4.partner_id;								
			row6.partner_invoice_id = row4.partner_invoice_id;								
			row6.partner_shipping_id = row4.partner_shipping_id;								
			row6.pricelist_id = row4.pricelist_id;								
			row6.currency_id = row4.currency_id;								
			row6.analytic_account_id = row4.analytic_account_id;								
			row6.invoice_status = row4.invoice_status;								
			row6.note = row4.note;								
			row6.amount_untaxed = row4.amount_untaxed;								
			row6.amount_tax = row4.amount_tax;								
			row6.amount_total = row4.amount_total;								
			row6.currency_rate = row4.currency_rate;								
			row6.payment_term_id = row4.payment_term_id;								
			row6.fiscal_position_id = row4.fiscal_position_id;								
			row6.company_id = row4.company_id;								
			row6.team_id = row4.team_id;								
			row6.signed_by = row4.signed_by;								
			row6.signed_on = row4.signed_on;								
			row6.commitment_date = row4.commitment_date;								
			row6.show_update_pricelist = row4.show_update_pricelist;								
			row6.create_uid = row4.create_uid;								
			row6.write_uid = row4.write_uid;								
			row6.write_date = row4.write_date;								
			row6.sale_order_template_id = row4.sale_order_template_id;								
			row6.incoterm = row4.incoterm;								
			row6.picking_policy = row4.picking_policy;								
			row6.warehouse_id = row4.warehouse_id;								
			row6.procurement_group_id = row4.procurement_group_id;								
			row6.effective_date = row4.effective_date;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[46];
   				
	    		if(row6.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row6.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.campaign_id != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row6.campaign_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.source_id != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row6.source_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.medium_id != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row6.medium_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.message_main_attachment_id != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row6.message_main_attachment_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.access_token != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row6.access_token)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.name != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row6.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.origin != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row6.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.client_order_ref != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row6.client_order_ref)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.reference != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row6.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.state != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row6.state)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.date_order != null) { //              
                 row_tLogRow_1[11]=    						
								FormatterUtils.format_Date(row6.date_order, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row6.validity_date != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row6.validity_date)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.require_signature != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row6.require_signature)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.require_payment != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row6.require_payment)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.create_date != null) { //              
                 row_tLogRow_1[15]=    						
								FormatterUtils.format_Date(row6.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row6.user_id != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(row6.user_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.partner_id != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(row6.partner_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.partner_invoice_id != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(row6.partner_invoice_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.partner_shipping_id != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(row6.partner_shipping_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.pricelist_id != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(row6.pricelist_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.currency_id != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(row6.currency_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.analytic_account_id != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(row6.analytic_account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.invoice_status != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(row6.invoice_status)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.note != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(row6.note)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.amount_untaxed != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(row6.amount_untaxed)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.amount_tax != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(row6.amount_tax)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.amount_total != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(row6.amount_total)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.currency_rate != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(row6.currency_rate)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.payment_term_id != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(row6.payment_term_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.fiscal_position_id != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(row6.fiscal_position_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.company_id != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(row6.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.team_id != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(row6.team_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.signed_by != null) { //              
                 row_tLogRow_1[33]=    						    
				                String.valueOf(row6.signed_by)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.signed_on != null) { //              
                 row_tLogRow_1[34]=    						    
				                String.valueOf(row6.signed_on)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.commitment_date != null) { //              
                 row_tLogRow_1[35]=    						    
				                String.valueOf(row6.commitment_date)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.show_update_pricelist != null) { //              
                 row_tLogRow_1[36]=    						    
				                String.valueOf(row6.show_update_pricelist)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.create_uid != null) { //              
                 row_tLogRow_1[37]=    						    
				                String.valueOf(row6.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.write_uid != null) { //              
                 row_tLogRow_1[38]=    						    
				                String.valueOf(row6.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.write_date != null) { //              
                 row_tLogRow_1[39]=    						
								FormatterUtils.format_Date(row6.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row6.sale_order_template_id != null) { //              
                 row_tLogRow_1[40]=    						    
				                String.valueOf(row6.sale_order_template_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.incoterm != null) { //              
                 row_tLogRow_1[41]=    						    
				                String.valueOf(row6.incoterm)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.picking_policy != null) { //              
                 row_tLogRow_1[42]=    						    
				                String.valueOf(row6.picking_policy)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.warehouse_id != null) { //              
                 row_tLogRow_1[43]=    						    
				                String.valueOf(row6.warehouse_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.procurement_group_id != null) { //              
                 row_tLogRow_1[44]=    						    
				                String.valueOf(row6.procurement_group_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.effective_date != null) { //              
                 row_tLogRow_1[45]=    						    
				                String.valueOf(row6.effective_date)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row7 = row6;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row7.id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.campaign_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.campaign_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.source_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.source_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.medium_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.medium_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.message_main_attachment_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.message_main_attachment_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.access_token != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.access_token
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.client_order_ref != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.client_order_ref
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.reference != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.reference
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.state != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.date_order != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.date_order, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.validity_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.validity_date
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.require_signature != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.require_signature
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.require_payment != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.require_payment
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.create_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.user_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.user_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.partner_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.partner_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.partner_invoice_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.partner_invoice_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.partner_shipping_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.partner_shipping_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.pricelist_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.pricelist_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.currency_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.currency_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.analytic_account_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.analytic_account_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.invoice_status != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.invoice_status
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.note != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.note
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.amount_untaxed != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.amount_untaxed
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.amount_tax != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.amount_tax
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.amount_total != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.amount_total
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.currency_rate != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.currency_rate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.payment_term_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.payment_term_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.fiscal_position_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.company_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.company_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.team_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.team_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.signed_by != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.signed_by
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.signed_on != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.signed_on
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.commitment_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.commitment_date
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.show_update_pricelist != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.show_update_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.create_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.write_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.write_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.sale_order_template_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.sale_order_template_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.incoterm != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.incoterm
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.picking_policy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.warehouse_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.procurement_group_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.procurement_group_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.effective_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.effective_date
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */









	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5","row4");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */









	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:V70N7xtRmS7Lc/r4ynO82c/gVqLFU28qV5/EDb87qwyQOTEHWQgT9kbXbr/Xa9CsVjBEojuR6o9i/xU/FblSnzb7WLw=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PS4OCUVYGK",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,"us-east-2"));
        } else {
                builder_tS3Connection_1.withRegion("us-east-2");
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "posOrder_test.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageOut.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/stage")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_saleOrder = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String campaign_id;

				public String getCampaign_id () {
					return this.campaign_id;
				}
				
			    public String source_id;

				public String getSource_id () {
					return this.source_id;
				}
				
			    public String medium_id;

				public String getMedium_id () {
					return this.medium_id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public String validity_date;

				public String getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer partner_invoice_id;

				public Integer getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public Integer partner_shipping_id;

				public Integer getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String analytic_account_id;

				public String getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer amount_untaxed;

				public Integer getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public Integer amount_tax;

				public Integer getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String payment_term_id;

				public String getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public String signed_on;

				public String getSigned_on () {
					return this.signed_on;
				}
				
			    public String commitment_date;

				public String getCommitment_date () {
					return this.commitment_date;
				}
				
			    public String show_update_pricelist;

				public String getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public String incoterm;

				public String getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String effective_date;

				public String getEffective_date () {
					return this.effective_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.campaign_id = this.campaign_id;
	            other.source_id = this.source_id;
	            other.medium_id = this.medium_id;
	            other.message_main_attachment_id = this.message_main_attachment_id;
	            other.access_token = this.access_token;
	            other.name = this.name;
	            other.origin = this.origin;
	            other.client_order_ref = this.client_order_ref;
	            other.reference = this.reference;
	            other.state = this.state;
	            other.date_order = this.date_order;
	            other.validity_date = this.validity_date;
	            other.require_signature = this.require_signature;
	            other.require_payment = this.require_payment;
	            other.create_date = this.create_date;
	            other.user_id = this.user_id;
	            other.partner_id = this.partner_id;
	            other.partner_invoice_id = this.partner_invoice_id;
	            other.partner_shipping_id = this.partner_shipping_id;
	            other.pricelist_id = this.pricelist_id;
	            other.currency_id = this.currency_id;
	            other.analytic_account_id = this.analytic_account_id;
	            other.invoice_status = this.invoice_status;
	            other.note = this.note;
	            other.amount_untaxed = this.amount_untaxed;
	            other.amount_tax = this.amount_tax;
	            other.amount_total = this.amount_total;
	            other.currency_rate = this.currency_rate;
	            other.payment_term_id = this.payment_term_id;
	            other.fiscal_position_id = this.fiscal_position_id;
	            other.company_id = this.company_id;
	            other.team_id = this.team_id;
	            other.signed_by = this.signed_by;
	            other.signed_on = this.signed_on;
	            other.commitment_date = this.commitment_date;
	            other.show_update_pricelist = this.show_update_pricelist;
	            other.create_uid = this.create_uid;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.sale_order_template_id = this.sale_order_template_id;
	            other.incoterm = this.incoterm;
	            other.picking_policy = this.picking_policy;
	            other.warehouse_id = this.warehouse_id;
	            other.procurement_group_id = this.procurement_group_id;
	            other.effective_date = this.effective_date;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_saleOrder) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.campaign_id = readString(dis,ois);
					
						this.source_id = readString(dis,ois);
					
						this.medium_id = readString(dis,ois);
					
						this.message_main_attachment_id = readString(dis,ois);
					
						this.access_token = readString(dis,ois);
					
						this.name = readString(dis,ois);
					
						this.origin = readString(dis,ois);
					
						this.client_order_ref = readString(dis,ois);
					
						this.reference = readString(dis,ois);
					
						this.state = readString(dis,ois);
					
						this.date_order = readDate(dis,ois);
					
						this.validity_date = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
						this.create_date = readDate(dis,ois);
					
						this.user_id = readInteger(dis,ois);
					
						this.partner_id = readInteger(dis,ois);
					
						this.partner_invoice_id = readInteger(dis,ois);
					
						this.partner_shipping_id = readInteger(dis,ois);
					
						this.pricelist_id = readInteger(dis,ois);
					
						this.currency_id = readInteger(dis,ois);
					
						this.analytic_account_id = readString(dis,ois);
					
						this.invoice_status = readString(dis,ois);
					
						this.note = readString(dis,ois);
					
						this.amount_untaxed = readInteger(dis,ois);
					
						this.amount_tax = readInteger(dis,ois);
					
						this.amount_total = readInteger(dis,ois);
					
						this.currency_rate = readInteger(dis,ois);
					
						this.payment_term_id = readString(dis,ois);
					
						this.fiscal_position_id = readString(dis,ois);
					
						this.company_id = readInteger(dis,ois);
					
						this.team_id = readInteger(dis,ois);
					
						this.signed_by = readString(dis,ois);
					
						this.signed_on = readString(dis,ois);
					
						this.commitment_date = readString(dis,ois);
					
						this.show_update_pricelist = readString(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.sale_order_template_id = readString(dis,ois);
					
						this.incoterm = readString(dis,ois);
					
						this.picking_policy = readString(dis,ois);
					
						this.warehouse_id = readInteger(dis,ois);
					
						this.procurement_group_id = readString(dis,ois);
					
						this.effective_date = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.campaign_id = readString(dis,objectIn);
					
						this.source_id = readString(dis,objectIn);
					
						this.medium_id = readString(dis,objectIn);
					
						this.message_main_attachment_id = readString(dis,objectIn);
					
						this.access_token = readString(dis,objectIn);
					
						this.name = readString(dis,objectIn);
					
						this.origin = readString(dis,objectIn);
					
						this.client_order_ref = readString(dis,objectIn);
					
						this.reference = readString(dis,objectIn);
					
						this.state = readString(dis,objectIn);
					
						this.date_order = readDate(dis,objectIn);
					
						this.validity_date = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = objectIn.readBoolean();
           				}
					
						this.create_date = readDate(dis,objectIn);
					
						this.user_id = readInteger(dis,objectIn);
					
						this.partner_id = readInteger(dis,objectIn);
					
						this.partner_invoice_id = readInteger(dis,objectIn);
					
						this.partner_shipping_id = readInteger(dis,objectIn);
					
						this.pricelist_id = readInteger(dis,objectIn);
					
						this.currency_id = readInteger(dis,objectIn);
					
						this.analytic_account_id = readString(dis,objectIn);
					
						this.invoice_status = readString(dis,objectIn);
					
						this.note = readString(dis,objectIn);
					
						this.amount_untaxed = readInteger(dis,objectIn);
					
						this.amount_tax = readInteger(dis,objectIn);
					
						this.amount_total = readInteger(dis,objectIn);
					
						this.currency_rate = readInteger(dis,objectIn);
					
						this.payment_term_id = readString(dis,objectIn);
					
						this.fiscal_position_id = readString(dis,objectIn);
					
						this.company_id = readInteger(dis,objectIn);
					
						this.team_id = readInteger(dis,objectIn);
					
						this.signed_by = readString(dis,objectIn);
					
						this.signed_on = readString(dis,objectIn);
					
						this.commitment_date = readString(dis,objectIn);
					
						this.show_update_pricelist = readString(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.sale_order_template_id = readString(dis,objectIn);
					
						this.incoterm = readString(dis,objectIn);
					
						this.picking_policy = readString(dis,objectIn);
					
						this.warehouse_id = readInteger(dis,objectIn);
					
						this.procurement_group_id = readString(dis,objectIn);
					
						this.effective_date = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.campaign_id, dos, oos);
					
						writeString(this.source_id, dos, oos);
					
						writeString(this.medium_id, dos, oos);
					
						writeString(this.message_main_attachment_id, dos, oos);
					
						writeString(this.access_token, dos, oos);
					
						writeString(this.name, dos, oos);
					
						writeString(this.origin, dos, oos);
					
						writeString(this.client_order_ref, dos, oos);
					
						writeString(this.reference, dos, oos);
					
						writeString(this.state, dos, oos);
					
						writeDate(this.date_order, dos, oos);
					
						writeString(this.validity_date, dos, oos);
					
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.user_id, dos, oos);
					
					writeInteger(this.partner_id, dos, oos);
					
					writeInteger(this.partner_invoice_id, dos, oos);
					
					writeInteger(this.partner_shipping_id, dos, oos);
					
					writeInteger(this.pricelist_id, dos, oos);
					
					writeInteger(this.currency_id, dos, oos);
					
						writeString(this.analytic_account_id, dos, oos);
					
						writeString(this.invoice_status, dos, oos);
					
						writeString(this.note, dos, oos);
					
					writeInteger(this.amount_untaxed, dos, oos);
					
					writeInteger(this.amount_tax, dos, oos);
					
					writeInteger(this.amount_total, dos, oos);
					
					writeInteger(this.currency_rate, dos, oos);
					
						writeString(this.payment_term_id, dos, oos);
					
						writeString(this.fiscal_position_id, dos, oos);
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.team_id, dos, oos);
					
						writeString(this.signed_by, dos, oos);
					
						writeString(this.signed_on, dos, oos);
					
						writeString(this.commitment_date, dos, oos);
					
						writeString(this.show_update_pricelist, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.sale_order_template_id, dos, oos);
					
						writeString(this.incoterm, dos, oos);
					
						writeString(this.picking_policy, dos, oos);
					
					writeInteger(this.warehouse_id, dos, oos);
					
						writeString(this.procurement_group_id, dos, oos);
					
						writeString(this.effective_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.campaign_id, dos, objectOut);
					
						writeString(this.source_id, dos, objectOut);
					
						writeString(this.medium_id, dos, objectOut);
					
						writeString(this.message_main_attachment_id, dos, objectOut);
					
						writeString(this.access_token, dos, objectOut);
					
						writeString(this.name, dos, objectOut);
					
						writeString(this.origin, dos, objectOut);
					
						writeString(this.client_order_ref, dos, objectOut);
					
						writeString(this.reference, dos, objectOut);
					
						writeString(this.state, dos, objectOut);
					
						writeDate(this.date_order, dos, objectOut);
					
						writeString(this.validity_date, dos, objectOut);
					
						if(this.require_signature == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.require_signature);
		            	}
					
						if(this.require_payment == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.require_payment);
		            	}
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.user_id, dos, objectOut);
					
					writeInteger(this.partner_id, dos, objectOut);
					
					writeInteger(this.partner_invoice_id, dos, objectOut);
					
					writeInteger(this.partner_shipping_id, dos, objectOut);
					
					writeInteger(this.pricelist_id, dos, objectOut);
					
					writeInteger(this.currency_id, dos, objectOut);
					
						writeString(this.analytic_account_id, dos, objectOut);
					
						writeString(this.invoice_status, dos, objectOut);
					
						writeString(this.note, dos, objectOut);
					
					writeInteger(this.amount_untaxed, dos, objectOut);
					
					writeInteger(this.amount_tax, dos, objectOut);
					
					writeInteger(this.amount_total, dos, objectOut);
					
					writeInteger(this.currency_rate, dos, objectOut);
					
						writeString(this.payment_term_id, dos, objectOut);
					
						writeString(this.fiscal_position_id, dos, objectOut);
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.team_id, dos, objectOut);
					
						writeString(this.signed_by, dos, objectOut);
					
						writeString(this.signed_on, dos, objectOut);
					
						writeString(this.commitment_date, dos, objectOut);
					
						writeString(this.show_update_pricelist, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.sale_order_template_id, dos, objectOut);
					
						writeString(this.incoterm, dos, objectOut);
					
						writeString(this.picking_policy, dos, objectOut);
					
					writeInteger(this.warehouse_id, dos, objectOut);
					
						writeString(this.procurement_group_id, dos, objectOut);
					
						writeString(this.effective_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+campaign_id);
		sb.append(",source_id="+source_id);
		sb.append(",medium_id="+medium_id);
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+validity_date);
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+analytic_account_id);
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+payment_term_id);
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+signed_on);
		sb.append(",commitment_date="+commitment_date);
		sb.append(",show_update_pricelist="+show_update_pricelist);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",incoterm="+incoterm);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",effective_date="+effective_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row2 = null;			
									
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row2.campaign_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row2.source_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row2.medium_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row2.message_main_attachment_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row2.access_token = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row2.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row2.origin = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row2.client_order_ref = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row2.reference = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row2.state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row2.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row2.validity_date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.require_signature = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"require_signature", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.require_signature = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.require_payment = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"require_payment", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.require_payment = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row2.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.partner_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.partner_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.partner_invoice_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_invoice_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.partner_invoice_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.partner_shipping_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_shipping_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.partner_shipping_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.currency_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.currency_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
							row2.analytic_account_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
							row2.invoice_status = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 24;
					
							row2.note = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 25;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.amount_untaxed = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_untaxed", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.amount_untaxed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 26;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.amount_tax = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 27;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 28;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 29;
					
							row2.payment_term_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 30;
					
							row2.fiscal_position_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 31;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 32;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.team_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"team_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.team_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 33;
					
							row2.signed_by = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 34;
					
							row2.signed_on = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 35;
					
							row2.commitment_date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 36;
					
							row2.show_update_pricelist = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 37;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 38;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 39;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row2.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 40;
					
							row2.sale_order_template_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 41;
					
							row2.incoterm = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 42;
					
							row2.picking_policy = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 43;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.warehouse_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"warehouse_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.warehouse_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 44;
					
							row2.procurement_group_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 45;
					
							row2.effective_date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.campaign_id = row2.campaign_id;
				
				row2_HashRow.source_id = row2.source_id;
				
				row2_HashRow.medium_id = row2.medium_id;
				
				row2_HashRow.message_main_attachment_id = row2.message_main_attachment_id;
				
				row2_HashRow.access_token = row2.access_token;
				
				row2_HashRow.name = row2.name;
				
				row2_HashRow.origin = row2.origin;
				
				row2_HashRow.client_order_ref = row2.client_order_ref;
				
				row2_HashRow.reference = row2.reference;
				
				row2_HashRow.state = row2.state;
				
				row2_HashRow.date_order = row2.date_order;
				
				row2_HashRow.validity_date = row2.validity_date;
				
				row2_HashRow.require_signature = row2.require_signature;
				
				row2_HashRow.require_payment = row2.require_payment;
				
				row2_HashRow.create_date = row2.create_date;
				
				row2_HashRow.user_id = row2.user_id;
				
				row2_HashRow.partner_id = row2.partner_id;
				
				row2_HashRow.partner_invoice_id = row2.partner_invoice_id;
				
				row2_HashRow.partner_shipping_id = row2.partner_shipping_id;
				
				row2_HashRow.pricelist_id = row2.pricelist_id;
				
				row2_HashRow.currency_id = row2.currency_id;
				
				row2_HashRow.analytic_account_id = row2.analytic_account_id;
				
				row2_HashRow.invoice_status = row2.invoice_status;
				
				row2_HashRow.note = row2.note;
				
				row2_HashRow.amount_untaxed = row2.amount_untaxed;
				
				row2_HashRow.amount_tax = row2.amount_tax;
				
				row2_HashRow.amount_total = row2.amount_total;
				
				row2_HashRow.currency_rate = row2.currency_rate;
				
				row2_HashRow.payment_term_id = row2.payment_term_id;
				
				row2_HashRow.fiscal_position_id = row2.fiscal_position_id;
				
				row2_HashRow.company_id = row2.company_id;
				
				row2_HashRow.team_id = row2.team_id;
				
				row2_HashRow.signed_by = row2.signed_by;
				
				row2_HashRow.signed_on = row2.signed_on;
				
				row2_HashRow.commitment_date = row2.commitment_date;
				
				row2_HashRow.show_update_pricelist = row2.show_update_pricelist;
				
				row2_HashRow.create_uid = row2.create_uid;
				
				row2_HashRow.write_uid = row2.write_uid;
				
				row2_HashRow.write_date = row2.write_date;
				
				row2_HashRow.sale_order_template_id = row2.sale_order_template_id;
				
				row2_HashRow.incoterm = row2.incoterm;
				
				row2_HashRow.picking_policy = row2.picking_policy;
				
				row2_HashRow.warehouse_id = row2.warehouse_id;
				
				row2_HashRow.procurement_group_id = row2.procurement_group_id;
				
				row2_HashRow.effective_date = row2.effective_date;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final dailyJobStage_saleOrder dailyJobStage_saleOrderClass = new dailyJobStage_saleOrder();

        int exitCode = dailyJobStage_saleOrderClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dailyJobStage_saleOrder.class.getClassLoader().getResourceAsStream("pacifico/dailyjobstage_saleorder_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dailyJobStage_saleOrder.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dailyJobStage_saleOrder");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     553390 characters generated by Talend Open Studio for Data Integration 
 *     on the December 5, 2022 at 10:42:49 PM CST
 ************************************************************************************************/