// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pacifico.sale_order_line_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: sale_order_line_job Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class sale_order_line_job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "sale_order_line_job";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					sale_order_line_job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(sale_order_line_job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PACIFICO_sale_order_line_job = new byte[0];
		static byte[] commonByteArray_PACIFICO_sale_order_line_job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int order_id;

		public int getOrder_id() {
			return this.order_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer sequence;

		public Integer getSequence() {
			return this.sequence;
		}

		public String invoice_status;

		public String getInvoice_status() {
			return this.invoice_status;
		}

		public BigDecimal price_unit;

		public BigDecimal getPrice_unit() {
			return this.price_unit;
		}

		public BigDecimal price_subtotal;

		public BigDecimal getPrice_subtotal() {
			return this.price_subtotal;
		}

		public Double price_tax;

		public Double getPrice_tax() {
			return this.price_tax;
		}

		public BigDecimal price_total;

		public BigDecimal getPrice_total() {
			return this.price_total;
		}

		public BigDecimal price_reduce;

		public BigDecimal getPrice_reduce() {
			return this.price_reduce;
		}

		public BigDecimal price_reduce_taxinc;

		public BigDecimal getPrice_reduce_taxinc() {
			return this.price_reduce_taxinc;
		}

		public BigDecimal price_reduce_taxexcl;

		public BigDecimal getPrice_reduce_taxexcl() {
			return this.price_reduce_taxexcl;
		}

		public BigDecimal discount;

		public BigDecimal getDiscount() {
			return this.discount;
		}

		public Integer product_id;

		public Integer getProduct_id() {
			return this.product_id;
		}

		public BigDecimal product_uom_qty;

		public BigDecimal getProduct_uom_qty() {
			return this.product_uom_qty;
		}

		public Integer product_uom;

		public Integer getProduct_uom() {
			return this.product_uom;
		}

		public String qty_delivered_method;

		public String getQty_delivered_method() {
			return this.qty_delivered_method;
		}

		public BigDecimal qty_delivered;

		public BigDecimal getQty_delivered() {
			return this.qty_delivered;
		}

		public BigDecimal qty_delivered_manual;

		public BigDecimal getQty_delivered_manual() {
			return this.qty_delivered_manual;
		}

		public BigDecimal qty_to_invoice;

		public BigDecimal getQty_to_invoice() {
			return this.qty_to_invoice;
		}

		public BigDecimal qty_invoiced;

		public BigDecimal getQty_invoiced() {
			return this.qty_invoiced;
		}

		public BigDecimal untaxed_amount_invoiced;

		public BigDecimal getUntaxed_amount_invoiced() {
			return this.untaxed_amount_invoiced;
		}

		public BigDecimal untaxed_amount_to_invoice;

		public BigDecimal getUntaxed_amount_to_invoice() {
			return this.untaxed_amount_to_invoice;
		}

		public Integer salesman_id;

		public Integer getSalesman_id() {
			return this.salesman_id;
		}

		public Integer currency_id;

		public Integer getCurrency_id() {
			return this.currency_id;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public Integer order_partner_id;

		public Integer getOrder_partner_id() {
			return this.order_partner_id;
		}

		public Boolean is_expense;

		public Boolean getIs_expense() {
			return this.is_expense;
		}

		public Boolean is_downpayment;

		public Boolean getIs_downpayment() {
			return this.is_downpayment;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public double customer_lead;

		public double getCustomer_lead() {
			return this.customer_lead;
		}

		public String display_type;

		public String getDisplay_type() {
			return this.display_type;
		}

		public Integer product_packaging_id;

		public Integer getProduct_packaging_id() {
			return this.product_packaging_id;
		}

		public Double product_packaging_qty;

		public Double getProduct_packaging_qty() {
			return this.product_packaging_qty;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer route_id;

		public Integer getRoute_id() {
			return this.route_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.order_id = this.order_id;
			other.name = this.name;
			other.sequence = this.sequence;
			other.invoice_status = this.invoice_status;
			other.price_unit = this.price_unit;
			other.price_subtotal = this.price_subtotal;
			other.price_tax = this.price_tax;
			other.price_total = this.price_total;
			other.price_reduce = this.price_reduce;
			other.price_reduce_taxinc = this.price_reduce_taxinc;
			other.price_reduce_taxexcl = this.price_reduce_taxexcl;
			other.discount = this.discount;
			other.product_id = this.product_id;
			other.product_uom_qty = this.product_uom_qty;
			other.product_uom = this.product_uom;
			other.qty_delivered_method = this.qty_delivered_method;
			other.qty_delivered = this.qty_delivered;
			other.qty_delivered_manual = this.qty_delivered_manual;
			other.qty_to_invoice = this.qty_to_invoice;
			other.qty_invoiced = this.qty_invoiced;
			other.untaxed_amount_invoiced = this.untaxed_amount_invoiced;
			other.untaxed_amount_to_invoice = this.untaxed_amount_to_invoice;
			other.salesman_id = this.salesman_id;
			other.currency_id = this.currency_id;
			other.company_id = this.company_id;
			other.order_partner_id = this.order_partner_id;
			other.is_expense = this.is_expense;
			other.is_downpayment = this.is_downpayment;
			other.state = this.state;
			other.customer_lead = this.customer_lead;
			other.display_type = this.display_type;
			other.product_packaging_id = this.product_packaging_id;
			other.product_packaging_qty = this.product_packaging_qty;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_uid = this.write_uid;
			other.write_date = this.write_date;
			other.route_id = this.route_id;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_sale_order_line_job.length) {
					if (length < 1024 && commonByteArray_PACIFICO_sale_order_line_job.length == 0) {
						commonByteArray_PACIFICO_sale_order_line_job = new byte[1024];
					} else {
						commonByteArray_PACIFICO_sale_order_line_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PACIFICO_sale_order_line_job, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_sale_order_line_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PACIFICO_sale_order_line_job.length) {
					if (length < 1024 && commonByteArray_PACIFICO_sale_order_line_job.length == 0) {
						commonByteArray_PACIFICO_sale_order_line_job = new byte[1024];
					} else {
						commonByteArray_PACIFICO_sale_order_line_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PACIFICO_sale_order_line_job, 0, length);
				strReturn = new String(commonByteArray_PACIFICO_sale_order_line_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PACIFICO_sale_order_line_job) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.order_id = dis.readInt();

					this.name = readString(dis);

					this.sequence = readInteger(dis);

					this.invoice_status = readString(dis);

					this.price_unit = (BigDecimal) dis.readObject();

					this.price_subtotal = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.price_tax = null;
					} else {
						this.price_tax = dis.readDouble();
					}

					this.price_total = (BigDecimal) dis.readObject();

					this.price_reduce = (BigDecimal) dis.readObject();

					this.price_reduce_taxinc = (BigDecimal) dis.readObject();

					this.price_reduce_taxexcl = (BigDecimal) dis.readObject();

					this.discount = (BigDecimal) dis.readObject();

					this.product_id = readInteger(dis);

					this.product_uom_qty = (BigDecimal) dis.readObject();

					this.product_uom = readInteger(dis);

					this.qty_delivered_method = readString(dis);

					this.qty_delivered = (BigDecimal) dis.readObject();

					this.qty_delivered_manual = (BigDecimal) dis.readObject();

					this.qty_to_invoice = (BigDecimal) dis.readObject();

					this.qty_invoiced = (BigDecimal) dis.readObject();

					this.untaxed_amount_invoiced = (BigDecimal) dis.readObject();

					this.untaxed_amount_to_invoice = (BigDecimal) dis.readObject();

					this.salesman_id = readInteger(dis);

					this.currency_id = readInteger(dis);

					this.company_id = readInteger(dis);

					this.order_partner_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_expense = null;
					} else {
						this.is_expense = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_downpayment = null;
					} else {
						this.is_downpayment = dis.readBoolean();
					}

					this.state = readString(dis);

					this.customer_lead = dis.readDouble();

					this.display_type = readString(dis);

					this.product_packaging_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_packaging_qty = null;
					} else {
						this.product_packaging_qty = dis.readDouble();
					}

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.route_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PACIFICO_sale_order_line_job) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.order_id = dis.readInt();

					this.name = readString(dis);

					this.sequence = readInteger(dis);

					this.invoice_status = readString(dis);

					this.price_unit = (BigDecimal) dis.readObject();

					this.price_subtotal = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.price_tax = null;
					} else {
						this.price_tax = dis.readDouble();
					}

					this.price_total = (BigDecimal) dis.readObject();

					this.price_reduce = (BigDecimal) dis.readObject();

					this.price_reduce_taxinc = (BigDecimal) dis.readObject();

					this.price_reduce_taxexcl = (BigDecimal) dis.readObject();

					this.discount = (BigDecimal) dis.readObject();

					this.product_id = readInteger(dis);

					this.product_uom_qty = (BigDecimal) dis.readObject();

					this.product_uom = readInteger(dis);

					this.qty_delivered_method = readString(dis);

					this.qty_delivered = (BigDecimal) dis.readObject();

					this.qty_delivered_manual = (BigDecimal) dis.readObject();

					this.qty_to_invoice = (BigDecimal) dis.readObject();

					this.qty_invoiced = (BigDecimal) dis.readObject();

					this.untaxed_amount_invoiced = (BigDecimal) dis.readObject();

					this.untaxed_amount_to_invoice = (BigDecimal) dis.readObject();

					this.salesman_id = readInteger(dis);

					this.currency_id = readInteger(dis);

					this.company_id = readInteger(dis);

					this.order_partner_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_expense = null;
					} else {
						this.is_expense = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_downpayment = null;
					} else {
						this.is_downpayment = dis.readBoolean();
					}

					this.state = readString(dis);

					this.customer_lead = dis.readDouble();

					this.display_type = readString(dis);

					this.product_packaging_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_packaging_qty = null;
					} else {
						this.product_packaging_qty = dis.readDouble();
					}

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.write_date = readDate(dis);

					this.route_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.order_id);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.sequence, dos);

				// String

				writeString(this.invoice_status, dos);

				// BigDecimal

				dos.writeObject(this.price_unit);

				// BigDecimal

				dos.writeObject(this.price_subtotal);

				// Double

				if (this.price_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_tax);
				}

				// BigDecimal

				dos.writeObject(this.price_total);

				// BigDecimal

				dos.writeObject(this.price_reduce);

				// BigDecimal

				dos.writeObject(this.price_reduce_taxinc);

				// BigDecimal

				dos.writeObject(this.price_reduce_taxexcl);

				// BigDecimal

				dos.writeObject(this.discount);

				// Integer

				writeInteger(this.product_id, dos);

				// BigDecimal

				dos.writeObject(this.product_uom_qty);

				// Integer

				writeInteger(this.product_uom, dos);

				// String

				writeString(this.qty_delivered_method, dos);

				// BigDecimal

				dos.writeObject(this.qty_delivered);

				// BigDecimal

				dos.writeObject(this.qty_delivered_manual);

				// BigDecimal

				dos.writeObject(this.qty_to_invoice);

				// BigDecimal

				dos.writeObject(this.qty_invoiced);

				// BigDecimal

				dos.writeObject(this.untaxed_amount_invoiced);

				// BigDecimal

				dos.writeObject(this.untaxed_amount_to_invoice);

				// Integer

				writeInteger(this.salesman_id, dos);

				// Integer

				writeInteger(this.currency_id, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// Integer

				writeInteger(this.order_partner_id, dos);

				// Boolean

				if (this.is_expense == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_expense);
				}

				// Boolean

				if (this.is_downpayment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_downpayment);
				}

				// String

				writeString(this.state, dos);

				// double

				dos.writeDouble(this.customer_lead);

				// String

				writeString(this.display_type, dos);

				// Integer

				writeInteger(this.product_packaging_id, dos);

				// Double

				if (this.product_packaging_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_packaging_qty);
				}

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.route_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.order_id);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.sequence, dos);

				// String

				writeString(this.invoice_status, dos);

				// BigDecimal

				dos.writeObject(this.price_unit);

				// BigDecimal

				dos.writeObject(this.price_subtotal);

				// Double

				if (this.price_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_tax);
				}

				// BigDecimal

				dos.writeObject(this.price_total);

				// BigDecimal

				dos.writeObject(this.price_reduce);

				// BigDecimal

				dos.writeObject(this.price_reduce_taxinc);

				// BigDecimal

				dos.writeObject(this.price_reduce_taxexcl);

				// BigDecimal

				dos.writeObject(this.discount);

				// Integer

				writeInteger(this.product_id, dos);

				// BigDecimal

				dos.writeObject(this.product_uom_qty);

				// Integer

				writeInteger(this.product_uom, dos);

				// String

				writeString(this.qty_delivered_method, dos);

				// BigDecimal

				dos.writeObject(this.qty_delivered);

				// BigDecimal

				dos.writeObject(this.qty_delivered_manual);

				// BigDecimal

				dos.writeObject(this.qty_to_invoice);

				// BigDecimal

				dos.writeObject(this.qty_invoiced);

				// BigDecimal

				dos.writeObject(this.untaxed_amount_invoiced);

				// BigDecimal

				dos.writeObject(this.untaxed_amount_to_invoice);

				// Integer

				writeInteger(this.salesman_id, dos);

				// Integer

				writeInteger(this.currency_id, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// Integer

				writeInteger(this.order_partner_id, dos);

				// Boolean

				if (this.is_expense == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_expense);
				}

				// Boolean

				if (this.is_downpayment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_downpayment);
				}

				// String

				writeString(this.state, dos);

				// double

				dos.writeDouble(this.customer_lead);

				// String

				writeString(this.display_type, dos);

				// Integer

				writeInteger(this.product_packaging_id, dos);

				// Double

				if (this.product_packaging_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_packaging_qty);
				}

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.route_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",order_id=" + String.valueOf(order_id));
			sb.append(",name=" + name);
			sb.append(",sequence=" + String.valueOf(sequence));
			sb.append(",invoice_status=" + invoice_status);
			sb.append(",price_unit=" + String.valueOf(price_unit));
			sb.append(",price_subtotal=" + String.valueOf(price_subtotal));
			sb.append(",price_tax=" + String.valueOf(price_tax));
			sb.append(",price_total=" + String.valueOf(price_total));
			sb.append(",price_reduce=" + String.valueOf(price_reduce));
			sb.append(",price_reduce_taxinc=" + String.valueOf(price_reduce_taxinc));
			sb.append(",price_reduce_taxexcl=" + String.valueOf(price_reduce_taxexcl));
			sb.append(",discount=" + String.valueOf(discount));
			sb.append(",product_id=" + String.valueOf(product_id));
			sb.append(",product_uom_qty=" + String.valueOf(product_uom_qty));
			sb.append(",product_uom=" + String.valueOf(product_uom));
			sb.append(",qty_delivered_method=" + qty_delivered_method);
			sb.append(",qty_delivered=" + String.valueOf(qty_delivered));
			sb.append(",qty_delivered_manual=" + String.valueOf(qty_delivered_manual));
			sb.append(",qty_to_invoice=" + String.valueOf(qty_to_invoice));
			sb.append(",qty_invoiced=" + String.valueOf(qty_invoiced));
			sb.append(",untaxed_amount_invoiced=" + String.valueOf(untaxed_amount_invoiced));
			sb.append(",untaxed_amount_to_invoice=" + String.valueOf(untaxed_amount_to_invoice));
			sb.append(",salesman_id=" + String.valueOf(salesman_id));
			sb.append(",currency_id=" + String.valueOf(currency_id));
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",order_partner_id=" + String.valueOf(order_partner_id));
			sb.append(",is_expense=" + String.valueOf(is_expense));
			sb.append(",is_downpayment=" + String.valueOf(is_downpayment));
			sb.append(",state=" + state);
			sb.append(",customer_lead=" + String.valueOf(customer_lead));
			sb.append(",display_type=" + display_type);
			sb.append(",product_packaging_id=" + String.valueOf(product_packaging_id));
			sb.append(",product_packaging_qty=" + String.valueOf(product_packaging_qty));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",route_id=" + String.valueOf(route_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw_data.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("order_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("name");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sequence");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("invoice_status");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_unit");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_subtotal");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_tax");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_total");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_reduce");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_reduce_taxinc");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("price_reduce_taxexcl");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("discount");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("product_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("product_uom_qty");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("product_uom");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("qty_delivered_method");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("qty_delivered");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("qty_delivered_manual");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("qty_to_invoice");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("qty_invoiced");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("untaxed_amount_invoiced");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("untaxed_amount_to_invoice");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("salesman_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("currency_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("company_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("order_partner_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("is_expense");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("is_downpayment");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("state");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("customer_lead");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("display_type");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("product_packaging_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("product_packaging_qty");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("create_uid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("create_date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("write_uid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("write_date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("route_id");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "openpg";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:1RQALQdLO3A72hhjGuGe8enJkqcpqnl8ZKeWQPKP2KjgP3Jj7A==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "pacifico";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT * from sale_order_line";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = 0;
						} else {

							row1.id = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.order_id = 0;
						} else {

							row1.order_id = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.name = null;
						} else {

							row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.sequence = null;
						} else {

							row1.sequence = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.sequence = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.invoice_status = null;
						} else {

							row1.invoice_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.price_unit = null;
						} else {

							row1.price_unit = rs_tDBInput_1.getBigDecimal(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.price_subtotal = null;
						} else {

							row1.price_subtotal = rs_tDBInput_1.getBigDecimal(7);
							if (rs_tDBInput_1.wasNull()) {
								row1.price_subtotal = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.price_tax = null;
						} else {

							row1.price_tax = rs_tDBInput_1.getDouble(8);
							if (rs_tDBInput_1.wasNull()) {
								row1.price_tax = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.price_total = null;
						} else {

							row1.price_total = rs_tDBInput_1.getBigDecimal(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.price_total = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.price_reduce = null;
						} else {

							row1.price_reduce = rs_tDBInput_1.getBigDecimal(10);
							if (rs_tDBInput_1.wasNull()) {
								row1.price_reduce = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.price_reduce_taxinc = null;
						} else {

							row1.price_reduce_taxinc = rs_tDBInput_1.getBigDecimal(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.price_reduce_taxinc = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.price_reduce_taxexcl = null;
						} else {

							row1.price_reduce_taxexcl = rs_tDBInput_1.getBigDecimal(12);
							if (rs_tDBInput_1.wasNull()) {
								row1.price_reduce_taxexcl = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.discount = null;
						} else {

							row1.discount = rs_tDBInput_1.getBigDecimal(13);
							if (rs_tDBInput_1.wasNull()) {
								row1.discount = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.product_id = null;
						} else {

							row1.product_id = rs_tDBInput_1.getInt(14);
							if (rs_tDBInput_1.wasNull()) {
								row1.product_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.product_uom_qty = null;
						} else {

							row1.product_uom_qty = rs_tDBInput_1.getBigDecimal(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.product_uom = null;
						} else {

							row1.product_uom = rs_tDBInput_1.getInt(16);
							if (rs_tDBInput_1.wasNull()) {
								row1.product_uom = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.qty_delivered_method = null;
						} else {

							row1.qty_delivered_method = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.qty_delivered = null;
						} else {

							row1.qty_delivered = rs_tDBInput_1.getBigDecimal(18);
							if (rs_tDBInput_1.wasNull()) {
								row1.qty_delivered = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.qty_delivered_manual = null;
						} else {

							row1.qty_delivered_manual = rs_tDBInput_1.getBigDecimal(19);
							if (rs_tDBInput_1.wasNull()) {
								row1.qty_delivered_manual = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.qty_to_invoice = null;
						} else {

							row1.qty_to_invoice = rs_tDBInput_1.getBigDecimal(20);
							if (rs_tDBInput_1.wasNull()) {
								row1.qty_to_invoice = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.qty_invoiced = null;
						} else {

							row1.qty_invoiced = rs_tDBInput_1.getBigDecimal(21);
							if (rs_tDBInput_1.wasNull()) {
								row1.qty_invoiced = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.untaxed_amount_invoiced = null;
						} else {

							row1.untaxed_amount_invoiced = rs_tDBInput_1.getBigDecimal(22);
							if (rs_tDBInput_1.wasNull()) {
								row1.untaxed_amount_invoiced = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.untaxed_amount_to_invoice = null;
						} else {

							row1.untaxed_amount_to_invoice = rs_tDBInput_1.getBigDecimal(23);
							if (rs_tDBInput_1.wasNull()) {
								row1.untaxed_amount_to_invoice = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.salesman_id = null;
						} else {

							row1.salesman_id = rs_tDBInput_1.getInt(24);
							if (rs_tDBInput_1.wasNull()) {
								row1.salesman_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.currency_id = null;
						} else {

							row1.currency_id = rs_tDBInput_1.getInt(25);
							if (rs_tDBInput_1.wasNull()) {
								row1.currency_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.company_id = null;
						} else {

							row1.company_id = rs_tDBInput_1.getInt(26);
							if (rs_tDBInput_1.wasNull()) {
								row1.company_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.order_partner_id = null;
						} else {

							row1.order_partner_id = rs_tDBInput_1.getInt(27);
							if (rs_tDBInput_1.wasNull()) {
								row1.order_partner_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.is_expense = null;
						} else {

							row1.is_expense = rs_tDBInput_1.getBoolean(28);
							if (rs_tDBInput_1.wasNull()) {
								row1.is_expense = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.is_downpayment = null;
						} else {

							row1.is_downpayment = rs_tDBInput_1.getBoolean(29);
							if (rs_tDBInput_1.wasNull()) {
								row1.is_downpayment = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.state = null;
						} else {

							row1.state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.customer_lead = 0;
						} else {

							row1.customer_lead = rs_tDBInput_1.getDouble(31);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.display_type = null;
						} else {

							row1.display_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, false);
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.product_packaging_id = null;
						} else {

							row1.product_packaging_id = rs_tDBInput_1.getInt(33);
							if (rs_tDBInput_1.wasNull()) {
								row1.product_packaging_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.product_packaging_qty = null;
						} else {

							row1.product_packaging_qty = rs_tDBInput_1.getDouble(34);
							if (rs_tDBInput_1.wasNull()) {
								row1.product_packaging_qty = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.create_uid = null;
						} else {

							row1.create_uid = rs_tDBInput_1.getInt(35);
							if (rs_tDBInput_1.wasNull()) {
								row1.create_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.create_date = null;
						} else {

							row1.create_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 36);
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.write_uid = null;
						} else {

							row1.write_uid = rs_tDBInput_1.getInt(37);
							if (rs_tDBInput_1.wasNull()) {
								row1.write_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.write_date = null;
						} else {

							row1.write_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 38);
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.route_id = null;
						} else {

							row1.route_id = rs_tDBInput_1.getInt(39);
							if (rs_tDBInput_1.wasNull()) {
								row1.route_id = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						sb_tFileOutputDelimited_1.append(row1.id);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						sb_tFileOutputDelimited_1.append(row1.order_id);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.name != null) {
							sb_tFileOutputDelimited_1.append(row1.name);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.sequence != null) {
							sb_tFileOutputDelimited_1.append(row1.sequence);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.invoice_status != null) {
							sb_tFileOutputDelimited_1.append(row1.invoice_status);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_unit != null) {
							sb_tFileOutputDelimited_1.append(
									row1.price_unit.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_subtotal != null) {
							sb_tFileOutputDelimited_1.append(
									row1.price_subtotal.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_tax != null) {
							sb_tFileOutputDelimited_1.append(row1.price_tax);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_total != null) {
							sb_tFileOutputDelimited_1.append(
									row1.price_total.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_reduce != null) {
							sb_tFileOutputDelimited_1.append(
									row1.price_reduce.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_reduce_taxinc != null) {
							sb_tFileOutputDelimited_1.append(row1.price_reduce_taxinc
									.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.price_reduce_taxexcl != null) {
							sb_tFileOutputDelimited_1.append(row1.price_reduce_taxexcl
									.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.discount != null) {
							sb_tFileOutputDelimited_1
									.append(row1.discount.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.product_id != null) {
							sb_tFileOutputDelimited_1.append(row1.product_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.product_uom_qty != null) {
							sb_tFileOutputDelimited_1.append(
									row1.product_uom_qty.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.product_uom != null) {
							sb_tFileOutputDelimited_1.append(row1.product_uom);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.qty_delivered_method != null) {
							sb_tFileOutputDelimited_1.append(row1.qty_delivered_method);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.qty_delivered != null) {
							sb_tFileOutputDelimited_1.append(
									row1.qty_delivered.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.qty_delivered_manual != null) {
							sb_tFileOutputDelimited_1.append(row1.qty_delivered_manual
									.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.qty_to_invoice != null) {
							sb_tFileOutputDelimited_1.append(
									row1.qty_to_invoice.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.qty_invoiced != null) {
							sb_tFileOutputDelimited_1.append(
									row1.qty_invoiced.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.untaxed_amount_invoiced != null) {
							sb_tFileOutputDelimited_1.append(row1.untaxed_amount_invoiced
									.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.untaxed_amount_to_invoice != null) {
							sb_tFileOutputDelimited_1.append(row1.untaxed_amount_to_invoice
									.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.salesman_id != null) {
							sb_tFileOutputDelimited_1.append(row1.salesman_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.currency_id != null) {
							sb_tFileOutputDelimited_1.append(row1.currency_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.company_id != null) {
							sb_tFileOutputDelimited_1.append(row1.company_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.order_partner_id != null) {
							sb_tFileOutputDelimited_1.append(row1.order_partner_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.is_expense != null) {
							sb_tFileOutputDelimited_1.append(row1.is_expense);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.is_downpayment != null) {
							sb_tFileOutputDelimited_1.append(row1.is_downpayment);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.state != null) {
							sb_tFileOutputDelimited_1.append(row1.state);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						sb_tFileOutputDelimited_1.append(row1.customer_lead);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.display_type != null) {
							sb_tFileOutputDelimited_1.append(row1.display_type);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.product_packaging_id != null) {
							sb_tFileOutputDelimited_1.append(row1.product_packaging_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.product_packaging_qty != null) {
							sb_tFileOutputDelimited_1.append(row1.product_packaging_qty);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.create_uid != null) {
							sb_tFileOutputDelimited_1.append(row1.create_uid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.create_date != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.create_date, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.write_uid != null) {
							sb_tFileOutputDelimited_1.append(row1.write_uid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.write_date != null) {
							sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row1.write_date, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.route_id != null) {
							sb_tFileOutputDelimited_1.append(row1.route_id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:NG1Q9vFKdPOlWPHkwdSgqub6iJmOA5EJoqfrxncovKwF+T7pMGCF1mJTKCgAYATuLR9A91T/LVTDbGcgttaRraAKB2U=");

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIAVMNG53PS4OCUVYGK", decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder
						.standard();

				final boolean useRegionEndpoint_tS3Connection_1 = false;
				final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
				final boolean enableAccelerateMode_tS3Connection_1 = false;
				final boolean enablePathStyleAccess_tS3Connection_1 = false;

				if (useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null
						&& !regionEndpoint_tS3Connection_1.isEmpty()) {
					builder_tS3Connection_1
							.withEndpointConfiguration(
									new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(
											regionEndpoint_tS3Connection_1, null))
							.withForceGlobalBucketAccessEnabled(true);
				} else {
					builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
							.withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try
																		// again in the correct region
				}

				if (enableAccelerateMode_tS3Connection_1) {
					builder_tS3Connection_1.withAccelerateModeEnabled(true);
				}

				builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1)
						.withClientConfiguration(cc_tS3Connection_1);

				if (useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
					builder_tS3Connection_1.enablePathStyleAccess();
				}

				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();

				// This method is just for test connection.
				conn_tS3Connection_1.getS3AccountOwner();

				globalMap.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				/**
				 * [tS3Connection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tS3Put_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_1 begin ] start
				 */

				ok_Hash.put("tS3Put_1", false);
				start_Hash.put("tS3Put_1", System.currentTimeMillis());

				currentComponent = "tS3Put_1";

				int tos_count_tS3Put_1 = 0;

				String millisecTime_tS3Put_1 = null;

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_1 = "saleOrderLine_20221026.csv";

				int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
				if (partSizeInBytes_tS3Put_1 < 5 << 20) {

					partSizeInBytes_tS3Put_1 = 5 << 20;
				}

				Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw_data.csv";

				boolean useStream_tS3Put_1 = false;
				java.io.InputStream uploadStream_tS3Put_1 = null;

				com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;

				try {

					if (fileOrStream_tS3Put_1 instanceof String) {
						useStream_tS3Put_1 = false;
					} else if (fileOrStream_tS3Put_1 instanceof java.io.InputStream) {
						useStream_tS3Put_1 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_1) {
						java.io.File inputFile_tS3Put_1 = new java.io.File((String) fileOrStream_tS3Put_1);

						long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;

						tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder.standard()
								.withMinimumUploadPartSize((long) partSizeInBytes_tS3Put_1)
								.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
								.withS3Client(conn_tS3Put_1).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"libreriapacifico/raw", key_tS3Put_1, inputFile_tS3Put_1)
										.withMetadata(objectMetadata_tS3Put_1);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1
								.upload(putRequest_tS3Put_1);

						upload_tS3Put_1.waitForCompletion();

					} else {
						java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream) fileOrStream_tS3Put_1);

						class S3StreamUtil {
							// read content to buffer as many as possible
							public int readFully(final java.io.InputStream input, final byte[] buffer)
									throws java.io.IOException {
								return readFully(input, buffer, 0, buffer.length);
							}

							public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset,
									final int length) throws java.io.IOException {
								if (length < 0) {
									throw new java.lang.IllegalArgumentException(
											"Length must not be negative: " + length);
								}

								int remaining = length;
								while (remaining > 0) {
									final int location = length - remaining;
									final int count = input.read(buffer, offset + location, remaining);
									if (count == -1) {
										break;
									}
									remaining -= count;
								}
								return length - remaining;
							}
						}

						S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
						byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
						long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
								buffer_tS3Put_1);

						boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;

						if (!multiUpload_tS3Put_1) {
							objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1, 0,
									Long.valueOf(curPartSize_tS3Put_1).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"libreriapacifico/raw", key_tS3Put_1, uploadStream_tS3Put_1,
									objectMetadata_tS3Put_1);

							conn_tS3Put_1.putObject(putRequest_tS3Put_1);
						} else {
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"libreriapacifico/raw", key_tS3Put_1, objectMetadata_tS3Put_1);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1
									.initiateMultipartUpload(putRequest_tS3Put_1);
							String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
							int partNumber_tS3Put_1 = 1;
							boolean streamHasNext_tS3Put_1 = true;
							byte[] probeAvailability_tS3Put_1 = new byte[1];
							try {
								while (streamHasNext_tS3Put_1) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("libreriapacifico/raw").withKey(key_tS3Put_1)
											.withUploadId(uploadId_tS3Put_1).withPartNumber(partNumber_tS3Put_1)
											.withPartSize(curPartSize_tS3Put_1);
									uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
									streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
											probeAvailability_tS3Put_1));
									if (!streamHasNext_tS3Put_1) {
										uploadRequest_tS3Put_1.setLastPart(true);
									}

									partTags_tS3Put_1
											.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
									partNumber_tS3Put_1++;

									if (uploadStream_tS3Put_1 != null) {
										uploadStream_tS3Put_1.close();
									}
									buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
									curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1,
											buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1 - 1);
									buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
									probeAvailability_tS3Put_1 = new byte[1];
									uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"libreriapacifico/raw", key_tS3Put_1, uploadId_tS3Put_1, partTags_tS3Put_1);
								conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
							} catch (java.lang.Exception uploadException_tS3Put_1) {
								globalMap.put("tS3Put_1_ERROR_MESSAGE", uploadException_tS3Put_1.getMessage());
								conn_tS3Put_1.abortMultipartUpload(
										new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"libreriapacifico/raw", key_tS3Put_1, uploadId_tS3Put_1));
								throw uploadException_tS3Put_1;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_1) {
					globalMap.put("tS3Put_1_ERROR_MESSAGE", e_tS3Put_1.getMessage());

					System.err.println(e_tS3Put_1.getMessage());

				} finally {
					if (useStream_tS3Put_1 && uploadStream_tS3Put_1 != null) {
						uploadStream_tS3Put_1.close();
					}

					if (tm_tS3Put_1 != null) {
						tm_tS3Put_1.shutdownNow(false);
					}

				}

				/**
				 * [tS3Put_1 begin ] stop
				 */

				/**
				 * [tS3Put_1 main ] start
				 */

				currentComponent = "tS3Put_1";

				tos_count_tS3Put_1++;

				/**
				 * [tS3Put_1 main ] stop
				 */

				/**
				 * [tS3Put_1 process_data_begin ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_1 process_data_end ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_end ] stop
				 */

				/**
				 * [tS3Put_1 end ] start
				 */

				currentComponent = "tS3Put_1";

				ok_Hash.put("tS3Put_1", true);
				end_Hash.put("tS3Put_1", System.currentTimeMillis());

				/**
				 * [tS3Put_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_1 finally ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final sale_order_line_job sale_order_line_jobClass = new sale_order_line_job();

		int exitCode = sale_order_line_jobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = sale_order_line_job.class.getClassLoader()
					.getResourceAsStream("pacifico/sale_order_line_job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = sale_order_line_job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : sale_order_line_job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeS3Connections();

	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 117610 characters generated by Talend Open Studio for Data Integration on the
 * December 6, 2022 at 11:16:55 PM CST
 ************************************************************************************************/