// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.res_company_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: res_company_job Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class res_company_job implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "res_company_job";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				res_company_job.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(res_company_job.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_res_company_job = new byte[0];
    static byte[] commonByteArray_PACIFICO_res_company_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public int partner_id;

				public int getPartner_id () {
					return this.partner_id;
				}
				
			    public int currency_id;

				public int getCurrency_id () {
					return this.currency_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public Object logo_web;

				public Object getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public Integer external_report_layout_id;

				public Integer getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public Integer partner_gid;

				public Integer getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public Boolean snailmail_cover;

				public Boolean getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public Boolean snailmail_duplex;

				public Boolean getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public int fiscalyear_last_day;

				public int getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public String fiscalyear_last_month;

				public String getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public java.util.Date period_lock_date;

				public java.util.Date getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public java.util.Date fiscalyear_lock_date;

				public java.util.Date getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public java.util.Date tax_lock_date;

				public java.util.Date getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public String bank_account_code_prefix;

				public String getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public String cash_account_code_prefix;

				public String getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public String transfer_account_code_prefix;

				public String getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public Integer incoterm_id;

				public Integer getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public Boolean qr_code;

				public Boolean getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public Integer account_opening_move_id;

				public Integer getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public Integer expense_accrual_account_id;

				public Integer getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public Integer revenue_accrual_account_id;

				public Integer getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public Integer automatic_entry_default_journal_id;

				public Integer getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public Boolean tax_exigibility;

				public Boolean getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public Integer account_cash_basis_base_account_id;

				public Integer getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public Boolean invoice_is_snailmail;

				public Boolean getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public Integer sale_order_template_id;

				public Integer getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public Boolean stock_move_email_validation;

				public Boolean getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public String annual_inventory_month;

				public String getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public Boolean has_received_warning_stock_sms;

				public Boolean getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public double security_lead;

				public double getSecurity_lead () {
					return this.security_lead;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.partner_id = this.partner_id;
	            other.currency_id = this.currency_id;
	            other.sequence = this.sequence;
	            other.create_date = this.create_date;
	            other.parent_id = this.parent_id;
	            other.report_header = this.report_header;
	            other.report_footer = this.report_footer;
	            other.company_details = this.company_details;
	            other.logo_web = this.logo_web;
	            other.email = this.email;
	            other.phone = this.phone;
	            other.mobile = this.mobile;
	            other.company_registry = this.company_registry;
	            other.paperformat_id = this.paperformat_id;
	            other.external_report_layout_id = this.external_report_layout_id;
	            other.base_onboarding_company_state = this.base_onboarding_company_state;
	            other.font = this.font;
	            other.primary_color = this.primary_color;
	            other.secondary_color = this.secondary_color;
	            other.layout_background = this.layout_background;
	            other.create_uid = this.create_uid;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.resource_calendar_id = this.resource_calendar_id;
	            other.partner_gid = this.partner_gid;
	            other.iap_enrich_auto_done = this.iap_enrich_auto_done;
	            other.snailmail_color = this.snailmail_color;
	            other.snailmail_cover = this.snailmail_cover;
	            other.snailmail_duplex = this.snailmail_duplex;
	            other.fiscalyear_last_day = this.fiscalyear_last_day;
	            other.fiscalyear_last_month = this.fiscalyear_last_month;
	            other.period_lock_date = this.period_lock_date;
	            other.fiscalyear_lock_date = this.fiscalyear_lock_date;
	            other.tax_lock_date = this.tax_lock_date;
	            other.transfer_account_id = this.transfer_account_id;
	            other.expects_chart_of_accounts = this.expects_chart_of_accounts;
	            other.chart_template_id = this.chart_template_id;
	            other.bank_account_code_prefix = this.bank_account_code_prefix;
	            other.cash_account_code_prefix = this.cash_account_code_prefix;
	            other.default_cash_difference_income_account_id = this.default_cash_difference_income_account_id;
	            other.default_cash_difference_expense_account_id = this.default_cash_difference_expense_account_id;
	            other.account_journal_suspense_account_id = this.account_journal_suspense_account_id;
	            other.account_journal_payment_debit_account_id = this.account_journal_payment_debit_account_id;
	            other.account_journal_payment_credit_account_id = this.account_journal_payment_credit_account_id;
	            other.transfer_account_code_prefix = this.transfer_account_code_prefix;
	            other.account_sale_tax_id = this.account_sale_tax_id;
	            other.account_purchase_tax_id = this.account_purchase_tax_id;
	            other.tax_calculation_rounding_method = this.tax_calculation_rounding_method;
	            other.currency_exchange_journal_id = this.currency_exchange_journal_id;
	            other.income_currency_exchange_account_id = this.income_currency_exchange_account_id;
	            other.expense_currency_exchange_account_id = this.expense_currency_exchange_account_id;
	            other.anglo_saxon_accounting = this.anglo_saxon_accounting;
	            other.property_stock_account_input_categ_id = this.property_stock_account_input_categ_id;
	            other.property_stock_account_output_categ_id = this.property_stock_account_output_categ_id;
	            other.property_stock_valuation_account_id = this.property_stock_valuation_account_id;
	            other.incoterm_id = this.incoterm_id;
	            other.qr_code = this.qr_code;
	            other.invoice_is_email = this.invoice_is_email;
	            other.invoice_is_print = this.invoice_is_print;
	            other.account_opening_move_id = this.account_opening_move_id;
	            other.account_opening_date = this.account_opening_date;
	            other.account_setup_bank_data_state = this.account_setup_bank_data_state;
	            other.account_setup_fy_data_state = this.account_setup_fy_data_state;
	            other.account_setup_coa_state = this.account_setup_coa_state;
	            other.account_setup_taxes_state = this.account_setup_taxes_state;
	            other.account_onboarding_invoice_layout_state = this.account_onboarding_invoice_layout_state;
	            other.account_onboarding_create_invoice_state = this.account_onboarding_create_invoice_state;
	            other.account_onboarding_sale_tax_state = this.account_onboarding_sale_tax_state;
	            other.account_invoice_onboarding_state = this.account_invoice_onboarding_state;
	            other.account_dashboard_onboarding_state = this.account_dashboard_onboarding_state;
	            other.invoice_terms = this.invoice_terms;
	            other.terms_type = this.terms_type;
	            other.invoice_terms_html = this.invoice_terms_html;
	            other.account_setup_bill_state = this.account_setup_bill_state;
	            other.account_default_pos_receivable_account_id = this.account_default_pos_receivable_account_id;
	            other.expense_accrual_account_id = this.expense_accrual_account_id;
	            other.revenue_accrual_account_id = this.revenue_accrual_account_id;
	            other.automatic_entry_default_journal_id = this.automatic_entry_default_journal_id;
	            other.account_fiscal_country_id = this.account_fiscal_country_id;
	            other.tax_exigibility = this.tax_exigibility;
	            other.tax_cash_basis_journal_id = this.tax_cash_basis_journal_id;
	            other.account_cash_basis_base_account_id = this.account_cash_basis_base_account_id;
	            other.payment_acquirer_onboarding_state = this.payment_acquirer_onboarding_state;
	            other.payment_onboarding_payment_method = this.payment_onboarding_payment_method;
	            other.invoice_is_snailmail = this.invoice_is_snailmail;
	            other.portal_confirmation_sign = this.portal_confirmation_sign;
	            other.portal_confirmation_pay = this.portal_confirmation_pay;
	            other.quotation_validity_days = this.quotation_validity_days;
	            other.sale_quotation_onboarding_state = this.sale_quotation_onboarding_state;
	            other.sale_onboarding_order_confirmation_state = this.sale_onboarding_order_confirmation_state;
	            other.sale_onboarding_sample_quotation_state = this.sale_onboarding_sample_quotation_state;
	            other.sale_onboarding_payment_method = this.sale_onboarding_payment_method;
	            other.sale_order_template_id = this.sale_order_template_id;
	            other.nomenclature_id = this.nomenclature_id;
	            other.internal_transit_location_id = this.internal_transit_location_id;
	            other.stock_move_email_validation = this.stock_move_email_validation;
	            other.stock_mail_confirmation_template_id = this.stock_mail_confirmation_template_id;
	            other.annual_inventory_month = this.annual_inventory_month;
	            other.annual_inventory_day = this.annual_inventory_day;
	            other.stock_move_sms_validation = this.stock_move_sms_validation;
	            other.stock_sms_confirmation_template_id = this.stock_sms_confirmation_template_id;
	            other.has_received_warning_stock_sms = this.has_received_warning_stock_sms;
	            other.point_of_sale_update_stock_quantities = this.point_of_sale_update_stock_quantities;
	            other.security_lead = this.security_lead;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_res_company_job.length) {
				if(length < 1024 && commonByteArray_PACIFICO_res_company_job.length == 0) {
   					commonByteArray_PACIFICO_res_company_job = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_res_company_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_res_company_job, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_res_company_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_res_company_job.length) {
				if(length < 1024 && commonByteArray_PACIFICO_res_company_job.length == 0) {
   					commonByteArray_PACIFICO_res_company_job = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_res_company_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_res_company_job, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_res_company_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_res_company_job) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.name = readString(dis);
					
			        this.partner_id = dis.readInt();
					
			        this.currency_id = dis.readInt();
					
						this.sequence = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.parent_id = readInteger(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
						this.logo_web = (Object) dis.readObject();
					
					this.email = readString(dis);
					
					this.phone = readString(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
						this.external_report_layout_id = readInteger(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
						this.partner_gid = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_cover = null;
           				} else {
           			    	this.snailmail_cover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_duplex = null;
           				} else {
           			    	this.snailmail_duplex = dis.readBoolean();
           				}
					
			        this.fiscalyear_last_day = dis.readInt();
					
					this.fiscalyear_last_month = readString(dis);
					
					this.period_lock_date = readDate(dis);
					
					this.fiscalyear_lock_date = readDate(dis);
					
					this.tax_lock_date = readDate(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
					this.bank_account_code_prefix = readString(dis);
					
					this.cash_account_code_prefix = readString(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
					this.transfer_account_code_prefix = readString(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
						this.incoterm_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qr_code = null;
           				} else {
           			    	this.qr_code = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
						this.account_opening_move_id = readInteger(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
						this.expense_accrual_account_id = readInteger(dis);
					
						this.revenue_accrual_account_id = readInteger(dis);
					
						this.automatic_entry_default_journal_id = readInteger(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tax_exigibility = null;
           				} else {
           			    	this.tax_exigibility = dis.readBoolean();
           				}
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
						this.account_cash_basis_base_account_id = readInteger(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_snailmail = null;
           				} else {
           			    	this.invoice_is_snailmail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
						this.sale_order_template_id = readInteger(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_email_validation = null;
           				} else {
           			    	this.stock_move_email_validation = dis.readBoolean();
           				}
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
					this.annual_inventory_month = readString(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_received_warning_stock_sms = null;
           				} else {
           			    	this.has_received_warning_stock_sms = dis.readBoolean();
           				}
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			        this.security_lead = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_res_company_job) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.name = readString(dis);
					
			        this.partner_id = dis.readInt();
					
			        this.currency_id = dis.readInt();
					
						this.sequence = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.parent_id = readInteger(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
						this.logo_web = (Object) dis.readObject();
					
					this.email = readString(dis);
					
					this.phone = readString(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
						this.external_report_layout_id = readInteger(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
						this.partner_gid = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_cover = null;
           				} else {
           			    	this.snailmail_cover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_duplex = null;
           				} else {
           			    	this.snailmail_duplex = dis.readBoolean();
           				}
					
			        this.fiscalyear_last_day = dis.readInt();
					
					this.fiscalyear_last_month = readString(dis);
					
					this.period_lock_date = readDate(dis);
					
					this.fiscalyear_lock_date = readDate(dis);
					
					this.tax_lock_date = readDate(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
					this.bank_account_code_prefix = readString(dis);
					
					this.cash_account_code_prefix = readString(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
					this.transfer_account_code_prefix = readString(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
						this.incoterm_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qr_code = null;
           				} else {
           			    	this.qr_code = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
						this.account_opening_move_id = readInteger(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
						this.expense_accrual_account_id = readInteger(dis);
					
						this.revenue_accrual_account_id = readInteger(dis);
					
						this.automatic_entry_default_journal_id = readInteger(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tax_exigibility = null;
           				} else {
           			    	this.tax_exigibility = dis.readBoolean();
           				}
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
						this.account_cash_basis_base_account_id = readInteger(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_snailmail = null;
           				} else {
           			    	this.invoice_is_snailmail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
						this.sale_order_template_id = readInteger(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_email_validation = null;
           				} else {
           			    	this.stock_move_email_validation = dis.readBoolean();
           				}
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
					this.annual_inventory_month = readString(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_received_warning_stock_sms = null;
           				} else {
           			    	this.has_received_warning_stock_sms = dis.readBoolean();
           				}
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			        this.security_lead = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// int
				
		            	dos.writeInt(this.partner_id);
					
					// int
				
		            	dos.writeInt(this.currency_id);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// Object
				
       			    	dos.writeObject(this.logo_web);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// Integer
				
						writeInteger(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// Integer
				
						writeInteger(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// Boolean
				
						if(this.snailmail_cover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_cover);
		            	}
					
					// Boolean
				
						if(this.snailmail_duplex == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_duplex);
		            	}
					
					// int
				
		            	dos.writeInt(this.fiscalyear_last_day);
					
					// String
				
						writeString(this.fiscalyear_last_month,dos);
					
					// java.util.Date
				
						writeDate(this.period_lock_date,dos);
					
					// java.util.Date
				
						writeDate(this.fiscalyear_lock_date,dos);
					
					// java.util.Date
				
						writeDate(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// String
				
						writeString(this.bank_account_code_prefix,dos);
					
					// String
				
						writeString(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// String
				
						writeString(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// Integer
				
						writeInteger(this.incoterm_id,dos);
					
					// Boolean
				
						if(this.qr_code == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qr_code);
		            	}
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// Integer
				
						writeInteger(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_accrual_account_id,dos);
					
					// Integer
				
						writeInteger(this.revenue_accrual_account_id,dos);
					
					// Integer
				
						writeInteger(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// Boolean
				
						if(this.tax_exigibility == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.tax_exigibility);
		            	}
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// Boolean
				
						if(this.invoice_is_snailmail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_snailmail);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// Integer
				
						writeInteger(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// Boolean
				
						if(this.stock_move_email_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_email_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// String
				
						writeString(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// Boolean
				
						if(this.has_received_warning_stock_sms == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_received_warning_stock_sms);
		            	}
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// double
				
		            	dos.writeDouble(this.security_lead);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// int
				
		            	dos.writeInt(this.partner_id);
					
					// int
				
		            	dos.writeInt(this.currency_id);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// Object
				
       			    	dos.writeObject(this.logo_web);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// Integer
				
						writeInteger(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// Integer
				
						writeInteger(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// Boolean
				
						if(this.snailmail_cover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_cover);
		            	}
					
					// Boolean
				
						if(this.snailmail_duplex == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_duplex);
		            	}
					
					// int
				
		            	dos.writeInt(this.fiscalyear_last_day);
					
					// String
				
						writeString(this.fiscalyear_last_month,dos);
					
					// java.util.Date
				
						writeDate(this.period_lock_date,dos);
					
					// java.util.Date
				
						writeDate(this.fiscalyear_lock_date,dos);
					
					// java.util.Date
				
						writeDate(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// String
				
						writeString(this.bank_account_code_prefix,dos);
					
					// String
				
						writeString(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// String
				
						writeString(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// Integer
				
						writeInteger(this.incoterm_id,dos);
					
					// Boolean
				
						if(this.qr_code == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qr_code);
		            	}
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// Integer
				
						writeInteger(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_accrual_account_id,dos);
					
					// Integer
				
						writeInteger(this.revenue_accrual_account_id,dos);
					
					// Integer
				
						writeInteger(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// Boolean
				
						if(this.tax_exigibility == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.tax_exigibility);
		            	}
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// Boolean
				
						if(this.invoice_is_snailmail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_snailmail);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// Integer
				
						writeInteger(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// Boolean
				
						if(this.stock_move_email_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_email_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// String
				
						writeString(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// Boolean
				
						if(this.has_received_warning_stock_sms == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_received_warning_stock_sms);
		            	}
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// double
				
		            	dos.writeDouble(this.security_lead);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+String.valueOf(logo_web));
		sb.append(",email="+email);
		sb.append(",phone="+phone);
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+String.valueOf(external_report_layout_id));
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+String.valueOf(partner_gid));
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+String.valueOf(snailmail_cover));
		sb.append(",snailmail_duplex="+String.valueOf(snailmail_duplex));
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+fiscalyear_last_month);
		sb.append(",period_lock_date="+String.valueOf(period_lock_date));
		sb.append(",fiscalyear_lock_date="+String.valueOf(fiscalyear_lock_date));
		sb.append(",tax_lock_date="+String.valueOf(tax_lock_date));
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+bank_account_code_prefix);
		sb.append(",cash_account_code_prefix="+cash_account_code_prefix);
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+transfer_account_code_prefix);
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+String.valueOf(incoterm_id));
		sb.append(",qr_code="+String.valueOf(qr_code));
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+String.valueOf(account_opening_move_id));
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+String.valueOf(expense_accrual_account_id));
		sb.append(",revenue_accrual_account_id="+String.valueOf(revenue_accrual_account_id));
		sb.append(",automatic_entry_default_journal_id="+String.valueOf(automatic_entry_default_journal_id));
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+String.valueOf(tax_exigibility));
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+String.valueOf(account_cash_basis_base_account_id));
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+String.valueOf(invoice_is_snailmail));
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+String.valueOf(sale_order_template_id));
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+String.valueOf(stock_move_email_validation));
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+annual_inventory_month);
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+String.valueOf(has_received_warning_stock_sms));
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_1{
                                    public void putHeaderValue_0(java.io.Writer outtFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception{
                                    outtFileOutputDelimited_1.write("id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("partner_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("currency_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sequence");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("create_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("parent_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("report_header");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("report_footer");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("company_details");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("logo_web");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("email");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("phone");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mobile");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("company_registry");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("paperformat_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("external_report_layout_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("base_onboarding_company_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("font");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("primary_color");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("secondary_color");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("layout_background");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("create_uid");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("write_uid");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("write_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("resource_calendar_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("partner_gid");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("iap_enrich_auto_done");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("snailmail_color");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("snailmail_cover");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("snailmail_duplex");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fiscalyear_last_day");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fiscalyear_last_month");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("period_lock_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fiscalyear_lock_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_lock_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("transfer_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("expects_chart_of_accounts");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("chart_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("bank_account_code_prefix");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("cash_account_code_prefix");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("default_cash_difference_income_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("default_cash_difference_expense_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_journal_suspense_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_journal_payment_debit_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_journal_payment_credit_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("transfer_account_code_prefix");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_sale_tax_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_purchase_tax_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_calculation_rounding_method");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("currency_exchange_journal_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("income_currency_exchange_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("expense_currency_exchange_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("anglo_saxon_accounting");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("property_stock_account_input_categ_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("property_stock_account_output_categ_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("property_stock_valuation_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("incoterm_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("qr_code");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_is_email");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_is_print");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_opening_move_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_opening_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_bank_data_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_fy_data_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_coa_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_taxes_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_onboarding_invoice_layout_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_onboarding_create_invoice_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_onboarding_sale_tax_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_invoice_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_dashboard_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_terms");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("terms_type");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_terms_html");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_bill_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_default_pos_receivable_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("expense_accrual_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("revenue_accrual_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("automatic_entry_default_journal_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_fiscal_country_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_exigibility");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_cash_basis_journal_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_cash_basis_base_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("payment_acquirer_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("payment_onboarding_payment_method");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_is_snailmail");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("portal_confirmation_sign");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("portal_confirmation_pay");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("quotation_validity_days");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    }
                                    public void putHeaderValue_1(java.io.Writer outtFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception{
                                    outtFileOutputDelimited_1.write("sale_quotation_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_onboarding_order_confirmation_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_onboarding_sample_quotation_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_onboarding_payment_method");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_order_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("nomenclature_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("internal_transit_location_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_move_email_validation");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_mail_confirmation_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("annual_inventory_month");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("annual_inventory_day");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_move_sms_validation");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_sms_confirmation_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_received_warning_stock_sms");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("point_of_sale_update_stock_quantities");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("security_lead");
                                }
                                public void putValue_0(final row1Struct row1,StringBuilder sb_tFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception {
                                sb_tFileOutputDelimited_1.append(
                                        row1.id
                                );
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                sb_tFileOutputDelimited_1.append(
                                        row1.partner_id
                                );
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                sb_tFileOutputDelimited_1.append(
                                        row1.currency_id
                                );
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.sequence != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.sequence
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.create_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row1.create_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.parent_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.parent_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.report_header != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.report_header
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.report_footer != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.report_footer
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.company_details != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.company_details
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.logo_web != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.logo_web
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.email != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.email
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.phone != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.phone
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.mobile != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.mobile
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.company_registry != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.company_registry
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.paperformat_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.paperformat_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.external_report_layout_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.external_report_layout_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.base_onboarding_company_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.base_onboarding_company_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.font != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.font
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.primary_color != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.primary_color
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.secondary_color != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.secondary_color
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.layout_background != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.layout_background
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.create_uid != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.create_uid
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.write_uid != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.write_uid
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.write_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row1.write_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.resource_calendar_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.resource_calendar_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.partner_gid != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.partner_gid
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.iap_enrich_auto_done != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.iap_enrich_auto_done
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.snailmail_color != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.snailmail_color
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.snailmail_cover != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.snailmail_cover
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.snailmail_duplex != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.snailmail_duplex
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                sb_tFileOutputDelimited_1.append(
                                        row1.fiscalyear_last_day
                                );
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.fiscalyear_last_month != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.fiscalyear_last_month
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.period_lock_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row1.period_lock_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.fiscalyear_lock_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row1.fiscalyear_lock_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.tax_lock_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row1.tax_lock_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.transfer_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.transfer_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.expects_chart_of_accounts != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.expects_chart_of_accounts
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.chart_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.chart_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.bank_account_code_prefix != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.bank_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.cash_account_code_prefix != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.cash_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.default_cash_difference_income_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.default_cash_difference_income_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.default_cash_difference_expense_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.default_cash_difference_expense_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_journal_suspense_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_journal_suspense_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_journal_payment_debit_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_journal_payment_debit_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_journal_payment_credit_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_journal_payment_credit_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.transfer_account_code_prefix != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.transfer_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_sale_tax_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_sale_tax_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_purchase_tax_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_purchase_tax_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.tax_calculation_rounding_method != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.tax_calculation_rounding_method
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.currency_exchange_journal_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.currency_exchange_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.income_currency_exchange_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.income_currency_exchange_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.expense_currency_exchange_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.expense_currency_exchange_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.anglo_saxon_accounting != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.anglo_saxon_accounting
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.property_stock_account_input_categ_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.property_stock_account_input_categ_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.property_stock_account_output_categ_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.property_stock_account_output_categ_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.property_stock_valuation_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.property_stock_valuation_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.incoterm_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.incoterm_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.qr_code != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.qr_code
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.invoice_is_email != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.invoice_is_email
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.invoice_is_print != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.invoice_is_print
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_opening_move_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_opening_move_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_opening_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row1.account_opening_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_setup_bank_data_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_setup_bank_data_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_setup_fy_data_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_setup_fy_data_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_setup_coa_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_setup_coa_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_setup_taxes_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_setup_taxes_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_onboarding_invoice_layout_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_onboarding_invoice_layout_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_onboarding_create_invoice_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_onboarding_create_invoice_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_onboarding_sale_tax_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_onboarding_sale_tax_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_invoice_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_invoice_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_dashboard_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_dashboard_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.invoice_terms != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.invoice_terms
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.terms_type != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.terms_type
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.invoice_terms_html != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.invoice_terms_html
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_setup_bill_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_setup_bill_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_default_pos_receivable_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_default_pos_receivable_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.expense_accrual_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.expense_accrual_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.revenue_accrual_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.revenue_accrual_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.automatic_entry_default_journal_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.automatic_entry_default_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_fiscal_country_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_fiscal_country_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.tax_exigibility != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.tax_exigibility
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.tax_cash_basis_journal_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.tax_cash_basis_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.account_cash_basis_base_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.account_cash_basis_base_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.payment_acquirer_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.payment_acquirer_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.payment_onboarding_payment_method != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.payment_onboarding_payment_method
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.invoice_is_snailmail != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.invoice_is_snailmail
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.portal_confirmation_sign != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.portal_confirmation_sign
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.portal_confirmation_pay != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.portal_confirmation_pay
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.quotation_validity_days != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.quotation_validity_days
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                }
                                public void putValue_1(final row1Struct row1,StringBuilder sb_tFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception {
                                if(row1.sale_quotation_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.sale_quotation_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.sale_onboarding_order_confirmation_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.sale_onboarding_order_confirmation_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.sale_onboarding_sample_quotation_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.sale_onboarding_sample_quotation_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.sale_onboarding_payment_method != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.sale_onboarding_payment_method
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.sale_order_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.sale_order_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.nomenclature_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.nomenclature_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.internal_transit_location_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.internal_transit_location_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.stock_move_email_validation != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.stock_move_email_validation
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.stock_mail_confirmation_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.stock_mail_confirmation_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.annual_inventory_month != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.annual_inventory_month
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.annual_inventory_day != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.annual_inventory_day
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.stock_move_sms_validation != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.stock_move_sms_validation
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.stock_sms_confirmation_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.stock_sms_confirmation_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.has_received_warning_stock_sms != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.has_received_warning_stock_sms
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row1.point_of_sale_update_stock_quantities != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row1.point_of_sale_update_stock_quantities
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                sb_tFileOutputDelimited_1.append(
                                        row1.security_lead
                                );
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_1 fileOutputDelimitedUtil_tFileOutputDelimited_1=new FileOutputDelimitedUtil_tFileOutputDelimited_1();
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw_data.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_0(outtFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_1(outtFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "openpg";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:uEfbRiAL8I/2D0t0TzjKmeevvNKV62TXwMp/ia1VYUcYIhcWTg==");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "pacifico";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT * FROM res_company WHERE \"create_date\" >= '2022-10-27' OR \"write_date\" >= '2022-10-27'";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.id = 0;
							} else {
		                          
            row1.id = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.partner_id = 0;
							} else {
		                          
            row1.partner_id = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.currency_id = 0;
							} else {
		                          
            row1.currency_id = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.sequence = null;
							} else {
		                          
            row1.sequence = rs_tDBInput_1.getInt(5);
            if(rs_tDBInput_1.wasNull()){
                    row1.sequence = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.create_date = null;
							} else {
										
			row1.create_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 6);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.parent_id = null;
							} else {
		                          
            row1.parent_id = rs_tDBInput_1.getInt(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.parent_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.report_header = null;
							} else {
	                         		
        	row1.report_header = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.report_footer = null;
							} else {
	                         		
        	row1.report_footer = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.company_details = null;
							} else {
	                         		
        	row1.company_details = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.logo_web = null;
							} else {
		                          
            row1.logo_web = rs_tDBInput_1.getObject(11);
            if(rs_tDBInput_1.wasNull()){
                    row1.logo_web = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.email = null;
							} else {
	                         		
        	row1.email = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.phone = null;
							} else {
	                         		
        	row1.phone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.mobile = null;
							} else {
	                         		
        	row1.mobile = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.company_registry = null;
							} else {
	                         		
        	row1.company_registry = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.paperformat_id = null;
							} else {
		                          
            row1.paperformat_id = rs_tDBInput_1.getInt(16);
            if(rs_tDBInput_1.wasNull()){
                    row1.paperformat_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.external_report_layout_id = null;
							} else {
		                          
            row1.external_report_layout_id = rs_tDBInput_1.getInt(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.external_report_layout_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.base_onboarding_company_state = null;
							} else {
	                         		
        	row1.base_onboarding_company_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.font = null;
							} else {
	                         		
        	row1.font = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.primary_color = null;
							} else {
	                         		
        	row1.primary_color = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.secondary_color = null;
							} else {
	                         		
        	row1.secondary_color = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.layout_background = null;
							} else {
	                         		
        	row1.layout_background = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.create_uid = null;
							} else {
		                          
            row1.create_uid = rs_tDBInput_1.getInt(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.create_uid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.write_uid = null;
							} else {
		                          
            row1.write_uid = rs_tDBInput_1.getInt(24);
            if(rs_tDBInput_1.wasNull()){
                    row1.write_uid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.write_date = null;
							} else {
										
			row1.write_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 25);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.resource_calendar_id = null;
							} else {
		                          
            row1.resource_calendar_id = rs_tDBInput_1.getInt(26);
            if(rs_tDBInput_1.wasNull()){
                    row1.resource_calendar_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.partner_gid = null;
							} else {
		                          
            row1.partner_gid = rs_tDBInput_1.getInt(27);
            if(rs_tDBInput_1.wasNull()){
                    row1.partner_gid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.iap_enrich_auto_done = null;
							} else {
	                         		
            row1.iap_enrich_auto_done = rs_tDBInput_1.getBoolean(28);
            if(rs_tDBInput_1.wasNull()){
                    row1.iap_enrich_auto_done = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.snailmail_color = null;
							} else {
	                         		
            row1.snailmail_color = rs_tDBInput_1.getBoolean(29);
            if(rs_tDBInput_1.wasNull()){
                    row1.snailmail_color = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.snailmail_cover = null;
							} else {
	                         		
            row1.snailmail_cover = rs_tDBInput_1.getBoolean(30);
            if(rs_tDBInput_1.wasNull()){
                    row1.snailmail_cover = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.snailmail_duplex = null;
							} else {
	                         		
            row1.snailmail_duplex = rs_tDBInput_1.getBoolean(31);
            if(rs_tDBInput_1.wasNull()){
                    row1.snailmail_duplex = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.fiscalyear_last_day = 0;
							} else {
		                          
            row1.fiscalyear_last_day = rs_tDBInput_1.getInt(32);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.fiscalyear_last_month = null;
							} else {
	                         		
        	row1.fiscalyear_last_month = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.period_lock_date = null;
							} else {
										
			row1.period_lock_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 34);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.fiscalyear_lock_date = null;
							} else {
										
			row1.fiscalyear_lock_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 35);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.tax_lock_date = null;
							} else {
										
			row1.tax_lock_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 36);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.transfer_account_id = null;
							} else {
		                          
            row1.transfer_account_id = rs_tDBInput_1.getInt(37);
            if(rs_tDBInput_1.wasNull()){
                    row1.transfer_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.expects_chart_of_accounts = null;
							} else {
	                         		
            row1.expects_chart_of_accounts = rs_tDBInput_1.getBoolean(38);
            if(rs_tDBInput_1.wasNull()){
                    row1.expects_chart_of_accounts = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.chart_template_id = null;
							} else {
		                          
            row1.chart_template_id = rs_tDBInput_1.getInt(39);
            if(rs_tDBInput_1.wasNull()){
                    row1.chart_template_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.bank_account_code_prefix = null;
							} else {
	                         		
        	row1.bank_account_code_prefix = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.cash_account_code_prefix = null;
							} else {
	                         		
        	row1.cash_account_code_prefix = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.default_cash_difference_income_account_id = null;
							} else {
		                          
            row1.default_cash_difference_income_account_id = rs_tDBInput_1.getInt(42);
            if(rs_tDBInput_1.wasNull()){
                    row1.default_cash_difference_income_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.default_cash_difference_expense_account_id = null;
							} else {
		                          
            row1.default_cash_difference_expense_account_id = rs_tDBInput_1.getInt(43);
            if(rs_tDBInput_1.wasNull()){
                    row1.default_cash_difference_expense_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.account_journal_suspense_account_id = null;
							} else {
		                          
            row1.account_journal_suspense_account_id = rs_tDBInput_1.getInt(44);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_journal_suspense_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.account_journal_payment_debit_account_id = null;
							} else {
		                          
            row1.account_journal_payment_debit_account_id = rs_tDBInput_1.getInt(45);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_journal_payment_debit_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.account_journal_payment_credit_account_id = null;
							} else {
		                          
            row1.account_journal_payment_credit_account_id = rs_tDBInput_1.getInt(46);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_journal_payment_credit_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.transfer_account_code_prefix = null;
							} else {
	                         		
        	row1.transfer_account_code_prefix = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.account_sale_tax_id = null;
							} else {
		                          
            row1.account_sale_tax_id = rs_tDBInput_1.getInt(48);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_sale_tax_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.account_purchase_tax_id = null;
							} else {
		                          
            row1.account_purchase_tax_id = rs_tDBInput_1.getInt(49);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_purchase_tax_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.tax_calculation_rounding_method = null;
							} else {
	                         		
        	row1.tax_calculation_rounding_method = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.currency_exchange_journal_id = null;
							} else {
		                          
            row1.currency_exchange_journal_id = rs_tDBInput_1.getInt(51);
            if(rs_tDBInput_1.wasNull()){
                    row1.currency_exchange_journal_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.income_currency_exchange_account_id = null;
							} else {
		                          
            row1.income_currency_exchange_account_id = rs_tDBInput_1.getInt(52);
            if(rs_tDBInput_1.wasNull()){
                    row1.income_currency_exchange_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.expense_currency_exchange_account_id = null;
							} else {
		                          
            row1.expense_currency_exchange_account_id = rs_tDBInput_1.getInt(53);
            if(rs_tDBInput_1.wasNull()){
                    row1.expense_currency_exchange_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.anglo_saxon_accounting = null;
							} else {
	                         		
            row1.anglo_saxon_accounting = rs_tDBInput_1.getBoolean(54);
            if(rs_tDBInput_1.wasNull()){
                    row1.anglo_saxon_accounting = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.property_stock_account_input_categ_id = null;
							} else {
		                          
            row1.property_stock_account_input_categ_id = rs_tDBInput_1.getInt(55);
            if(rs_tDBInput_1.wasNull()){
                    row1.property_stock_account_input_categ_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.property_stock_account_output_categ_id = null;
							} else {
		                          
            row1.property_stock_account_output_categ_id = rs_tDBInput_1.getInt(56);
            if(rs_tDBInput_1.wasNull()){
                    row1.property_stock_account_output_categ_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.property_stock_valuation_account_id = null;
							} else {
		                          
            row1.property_stock_valuation_account_id = rs_tDBInput_1.getInt(57);
            if(rs_tDBInput_1.wasNull()){
                    row1.property_stock_valuation_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.incoterm_id = null;
							} else {
		                          
            row1.incoterm_id = rs_tDBInput_1.getInt(58);
            if(rs_tDBInput_1.wasNull()){
                    row1.incoterm_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.qr_code = null;
							} else {
	                         		
            row1.qr_code = rs_tDBInput_1.getBoolean(59);
            if(rs_tDBInput_1.wasNull()){
                    row1.qr_code = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.invoice_is_email = null;
							} else {
	                         		
            row1.invoice_is_email = rs_tDBInput_1.getBoolean(60);
            if(rs_tDBInput_1.wasNull()){
                    row1.invoice_is_email = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.invoice_is_print = null;
							} else {
	                         		
            row1.invoice_is_print = rs_tDBInput_1.getBoolean(61);
            if(rs_tDBInput_1.wasNull()){
                    row1.invoice_is_print = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.account_opening_move_id = null;
							} else {
		                          
            row1.account_opening_move_id = rs_tDBInput_1.getInt(62);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_opening_move_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.account_opening_date = null;
							} else {
										
			row1.account_opening_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 63);
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.account_setup_bank_data_state = null;
							} else {
	                         		
        	row1.account_setup_bank_data_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.account_setup_fy_data_state = null;
							} else {
	                         		
        	row1.account_setup_fy_data_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 65, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.account_setup_coa_state = null;
							} else {
	                         		
        	row1.account_setup_coa_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.account_setup_taxes_state = null;
							} else {
	                         		
        	row1.account_setup_taxes_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.account_onboarding_invoice_layout_state = null;
							} else {
	                         		
        	row1.account_onboarding_invoice_layout_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.account_onboarding_create_invoice_state = null;
							} else {
	                         		
        	row1.account_onboarding_create_invoice_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.account_onboarding_sale_tax_state = null;
							} else {
	                         		
        	row1.account_onboarding_sale_tax_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.account_invoice_onboarding_state = null;
							} else {
	                         		
        	row1.account_invoice_onboarding_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 71, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.account_dashboard_onboarding_state = null;
							} else {
	                         		
        	row1.account_dashboard_onboarding_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.invoice_terms = null;
							} else {
	                         		
        	row1.invoice_terms = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.terms_type = null;
							} else {
	                         		
        	row1.terms_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 74, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.invoice_terms_html = null;
							} else {
	                         		
        	row1.invoice_terms_html = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.account_setup_bill_state = null;
							} else {
	                         		
        	row1.account_setup_bill_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.account_default_pos_receivable_account_id = null;
							} else {
		                          
            row1.account_default_pos_receivable_account_id = rs_tDBInput_1.getInt(77);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_default_pos_receivable_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.expense_accrual_account_id = null;
							} else {
		                          
            row1.expense_accrual_account_id = rs_tDBInput_1.getInt(78);
            if(rs_tDBInput_1.wasNull()){
                    row1.expense_accrual_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.revenue_accrual_account_id = null;
							} else {
		                          
            row1.revenue_accrual_account_id = rs_tDBInput_1.getInt(79);
            if(rs_tDBInput_1.wasNull()){
                    row1.revenue_accrual_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row1.automatic_entry_default_journal_id = null;
							} else {
		                          
            row1.automatic_entry_default_journal_id = rs_tDBInput_1.getInt(80);
            if(rs_tDBInput_1.wasNull()){
                    row1.automatic_entry_default_journal_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 81) {
								row1.account_fiscal_country_id = null;
							} else {
		                          
            row1.account_fiscal_country_id = rs_tDBInput_1.getInt(81);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_fiscal_country_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 82) {
								row1.tax_exigibility = null;
							} else {
	                         		
            row1.tax_exigibility = rs_tDBInput_1.getBoolean(82);
            if(rs_tDBInput_1.wasNull()){
                    row1.tax_exigibility = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 83) {
								row1.tax_cash_basis_journal_id = null;
							} else {
		                          
            row1.tax_cash_basis_journal_id = rs_tDBInput_1.getInt(83);
            if(rs_tDBInput_1.wasNull()){
                    row1.tax_cash_basis_journal_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 84) {
								row1.account_cash_basis_base_account_id = null;
							} else {
		                          
            row1.account_cash_basis_base_account_id = rs_tDBInput_1.getInt(84);
            if(rs_tDBInput_1.wasNull()){
                    row1.account_cash_basis_base_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 85) {
								row1.payment_acquirer_onboarding_state = null;
							} else {
	                         		
        	row1.payment_acquirer_onboarding_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 85, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 86) {
								row1.payment_onboarding_payment_method = null;
							} else {
	                         		
        	row1.payment_onboarding_payment_method = routines.system.JDBCUtil.getString(rs_tDBInput_1, 86, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 87) {
								row1.invoice_is_snailmail = null;
							} else {
	                         		
            row1.invoice_is_snailmail = rs_tDBInput_1.getBoolean(87);
            if(rs_tDBInput_1.wasNull()){
                    row1.invoice_is_snailmail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 88) {
								row1.portal_confirmation_sign = null;
							} else {
	                         		
            row1.portal_confirmation_sign = rs_tDBInput_1.getBoolean(88);
            if(rs_tDBInput_1.wasNull()){
                    row1.portal_confirmation_sign = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 89) {
								row1.portal_confirmation_pay = null;
							} else {
	                         		
            row1.portal_confirmation_pay = rs_tDBInput_1.getBoolean(89);
            if(rs_tDBInput_1.wasNull()){
                    row1.portal_confirmation_pay = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 90) {
								row1.quotation_validity_days = null;
							} else {
		                          
            row1.quotation_validity_days = rs_tDBInput_1.getInt(90);
            if(rs_tDBInput_1.wasNull()){
                    row1.quotation_validity_days = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 91) {
								row1.sale_quotation_onboarding_state = null;
							} else {
	                         		
        	row1.sale_quotation_onboarding_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 91, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 92) {
								row1.sale_onboarding_order_confirmation_state = null;
							} else {
	                         		
        	row1.sale_onboarding_order_confirmation_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 92, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 93) {
								row1.sale_onboarding_sample_quotation_state = null;
							} else {
	                         		
        	row1.sale_onboarding_sample_quotation_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 93, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 94) {
								row1.sale_onboarding_payment_method = null;
							} else {
	                         		
        	row1.sale_onboarding_payment_method = routines.system.JDBCUtil.getString(rs_tDBInput_1, 94, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 95) {
								row1.sale_order_template_id = null;
							} else {
		                          
            row1.sale_order_template_id = rs_tDBInput_1.getInt(95);
            if(rs_tDBInput_1.wasNull()){
                    row1.sale_order_template_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 96) {
								row1.nomenclature_id = null;
							} else {
		                          
            row1.nomenclature_id = rs_tDBInput_1.getInt(96);
            if(rs_tDBInput_1.wasNull()){
                    row1.nomenclature_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 97) {
								row1.internal_transit_location_id = null;
							} else {
		                          
            row1.internal_transit_location_id = rs_tDBInput_1.getInt(97);
            if(rs_tDBInput_1.wasNull()){
                    row1.internal_transit_location_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 98) {
								row1.stock_move_email_validation = null;
							} else {
	                         		
            row1.stock_move_email_validation = rs_tDBInput_1.getBoolean(98);
            if(rs_tDBInput_1.wasNull()){
                    row1.stock_move_email_validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 99) {
								row1.stock_mail_confirmation_template_id = null;
							} else {
		                          
            row1.stock_mail_confirmation_template_id = rs_tDBInput_1.getInt(99);
            if(rs_tDBInput_1.wasNull()){
                    row1.stock_mail_confirmation_template_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 100) {
								row1.annual_inventory_month = null;
							} else {
	                         		
        	row1.annual_inventory_month = routines.system.JDBCUtil.getString(rs_tDBInput_1, 100, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 101) {
								row1.annual_inventory_day = null;
							} else {
		                          
            row1.annual_inventory_day = rs_tDBInput_1.getInt(101);
            if(rs_tDBInput_1.wasNull()){
                    row1.annual_inventory_day = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 102) {
								row1.stock_move_sms_validation = null;
							} else {
	                         		
            row1.stock_move_sms_validation = rs_tDBInput_1.getBoolean(102);
            if(rs_tDBInput_1.wasNull()){
                    row1.stock_move_sms_validation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 103) {
								row1.stock_sms_confirmation_template_id = null;
							} else {
		                          
            row1.stock_sms_confirmation_template_id = rs_tDBInput_1.getInt(103);
            if(rs_tDBInput_1.wasNull()){
                    row1.stock_sms_confirmation_template_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 104) {
								row1.has_received_warning_stock_sms = null;
							} else {
	                         		
            row1.has_received_warning_stock_sms = rs_tDBInput_1.getBoolean(104);
            if(rs_tDBInput_1.wasNull()){
                    row1.has_received_warning_stock_sms = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 105) {
								row1.point_of_sale_update_stock_quantities = null;
							} else {
	                         		
        	row1.point_of_sale_update_stock_quantities = routines.system.JDBCUtil.getString(rs_tDBInput_1, 105, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 106) {
								row1.security_lead = 0;
							} else {
	                         		
            row1.security_lead = rs_tDBInput_1.getDouble(106);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_0(row1,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_1(row1,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:kDXuYlhqShjosHf14LNXXheL0duDZqXcEzaMpfxxiZvHRbL4+iCzJc0rPbUld9USaXAACjKBcqmrMphlh37fboPCxO8=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PS4OCUVYGK",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "resCompany_20221031.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw_data.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/raw", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/raw", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/raw")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final res_company_job res_company_jobClass = new res_company_job();

        int exitCode = res_company_jobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = res_company_job.class.getClassLoader().getResourceAsStream("pacifico/res_company_job_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = res_company_job.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : res_company_job");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     232553 characters generated by Talend Open Studio for Data Integration 
 *     on the December 5, 2022 at 10:31:37 PM CST
 ************************************************************************************************/