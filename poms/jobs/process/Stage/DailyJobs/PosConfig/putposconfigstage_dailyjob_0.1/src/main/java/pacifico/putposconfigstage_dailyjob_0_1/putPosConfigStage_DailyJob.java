// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.putposconfigstage_dailyjob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: putPosConfigStage_DailyJob Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class putPosConfigStage_DailyJob implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(fechaFin != null){
				
					this.setProperty("fechaFin", fechaFin.toString());
				
			}
			
			if(fechaInicio != null){
				
					this.setProperty("fechaInicio", fechaInicio.toString());
				
			}
			
			if(AccessKeyId != null){
				
					this.setProperty("AccessKeyId", AccessKeyId.toString());
				
			}
			
			if(SecretAccessKey != null){
				
					this.setProperty("SecretAccessKey", SecretAccessKey.toString());
				
			}
			
			if(temp_path != null){
				
					this.setProperty("temp_path", temp_path.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String fechaFin;
public String getFechaFin(){
	return this.fechaFin;
}
public String fechaInicio;
public String getFechaInicio(){
	return this.fechaInicio;
}
public String AccessKeyId;
public String getAccessKeyId(){
	return this.AccessKeyId;
}
public String SecretAccessKey;
public String getSecretAccessKey(){
	return this.SecretAccessKey;
}
public String temp_path;
public String getTemp_path(){
	return this.temp_path;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "putPosConfigStage_DailyJob";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				putPosConfigStage_DailyJob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(putPosConfigStage_DailyJob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_stageFile_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class rowsMergedResultStruct implements routines.system.IPersistableRow<rowsMergedResultStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rowsMergedResultStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rowsMergedStruct implements routines.system.IPersistableRow<rowsMergedStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rowsMergedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltRowsStruct implements routines.system.IPersistableRow<deltRowsStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltaRowsStruct implements routines.system.IPersistableRow<deltaRowsStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltaRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltaStruct implements routines.system.IPersistableRow<deltaStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rawFileStruct implements routines.system.IPersistableRow<rawFileStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rawFileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class stageRowsStruct implements routines.system.IPersistableRow<stageRowsStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putPosConfigStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putPosConfigStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.picking_type_id = readInteger(dis);
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
					this.iface_cashdrawer = readString(dis);
					
					this.iface_electronic_scale = readString(dis);
					
					this.iface_customer_facing_display_via_proxy = readString(dis);
					
					this.iface_customer_facing_display_local = readString(dis);
					
					this.iface_print_via_proxy = readString(dis);
					
					this.iface_scan_via_proxy = readString(dis);
					
					this.iface_big_scrollbars = readString(dis);
					
					this.iface_orderline_customer_notes = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
					this.iface_start_categ_id = readString(dis);
					
					this.iface_display_categ_images = readString(dis);
					
					this.restrict_price_control = readString(dis);
					
					this.set_maximum_difference = readString(dis);
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
						this.pricelist_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
						this.barcode_nomenclature_id = readInteger(dis);
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
					this.iface_tipproduct = readString(dis);
					
					this.tip_product_id = readString(dis);
					
					this.default_fiscal_position_id = readString(dis);
					
					this.use_pricelist = readString(dis);
					
					this.tax_regime = readString(dis);
					
					this.tax_regime_selection = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
					this.limit_categories = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
					this.module_pos_restaurant = readString(dis);
					
					this.module_pos_discount = readString(dis);
					
					this.module_pos_loyalty = readString(dis);
					
					this.module_pos_mercury = readString(dis);
					
					this.product_configurator = readString(dis);
					
					this.is_posbox = readString(dis);
					
					this.is_header_or_footer = readString(dis);
					
					this.module_pos_hr = readString(dis);
					
					this.amount_authorized_diff = readString(dis);
					
					this.other_devices = readString(dis);
					
					this.rounding_method = readString(dis);
					
					this.cash_rounding = readString(dis);
					
					this.only_round_cash_method = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
					this.ship_later = readString(dis);
					
						this.warehouse_id = readInteger(dis);
					
					this.route_id = readString(dis);
					
					this.picking_policy = readString(dis);
					
					this.limited_products_loading = readString(dis);
					
						this.limited_products_amount = readInteger(dis);
					
					this.product_load_background = readString(dis);
					
					this.limited_partners_loading = readString(dis);
					
						this.limited_partners_amount = readInteger(dis);
					
					this.partner_load_background = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
					this.crm_team_id = readString(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.picking_type_id,dos);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// String
				
						writeString(this.iface_cashdrawer,dos);
					
					// String
				
						writeString(this.iface_electronic_scale,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_via_proxy,dos);
					
					// String
				
						writeString(this.iface_customer_facing_display_local,dos);
					
					// String
				
						writeString(this.iface_print_via_proxy,dos);
					
					// String
				
						writeString(this.iface_scan_via_proxy,dos);
					
					// String
				
						writeString(this.iface_big_scrollbars,dos);
					
					// String
				
						writeString(this.iface_orderline_customer_notes,dos);
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// String
				
						writeString(this.iface_start_categ_id,dos);
					
					// String
				
						writeString(this.iface_display_categ_images,dos);
					
					// String
				
						writeString(this.restrict_price_control,dos);
					
					// String
				
						writeString(this.set_maximum_difference,dos);
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// Integer
				
						writeInteger(this.pricelist_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.barcode_nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// String
				
						writeString(this.iface_tipproduct,dos);
					
					// String
				
						writeString(this.tip_product_id,dos);
					
					// String
				
						writeString(this.default_fiscal_position_id,dos);
					
					// String
				
						writeString(this.use_pricelist,dos);
					
					// String
				
						writeString(this.tax_regime,dos);
					
					// String
				
						writeString(this.tax_regime_selection,dos);
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// String
				
						writeString(this.limit_categories,dos);
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// String
				
						writeString(this.module_pos_restaurant,dos);
					
					// String
				
						writeString(this.module_pos_discount,dos);
					
					// String
				
						writeString(this.module_pos_loyalty,dos);
					
					// String
				
						writeString(this.module_pos_mercury,dos);
					
					// String
				
						writeString(this.product_configurator,dos);
					
					// String
				
						writeString(this.is_posbox,dos);
					
					// String
				
						writeString(this.is_header_or_footer,dos);
					
					// String
				
						writeString(this.module_pos_hr,dos);
					
					// String
				
						writeString(this.amount_authorized_diff,dos);
					
					// String
				
						writeString(this.other_devices,dos);
					
					// String
				
						writeString(this.rounding_method,dos);
					
					// String
				
						writeString(this.cash_rounding,dos);
					
					// String
				
						writeString(this.only_round_cash_method,dos);
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// String
				
						writeString(this.ship_later,dos);
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// String
				
						writeString(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// String
				
						writeString(this.limited_products_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// String
				
						writeString(this.product_load_background,dos);
					
					// String
				
						writeString(this.limited_partners_loading,dos);
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// String
				
						writeString(this.partner_load_background,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// String
				
						writeString(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stageRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);

		rawFileStruct rawFile = new rawFileStruct();
deltaStruct delta = new deltaStruct();
deltaStruct deltaRows = delta;
deltaStruct deltRows = delta;

		stageRowsStruct stageRows = new stageRowsStruct();

			rowsMergedStruct rowsMerged = new rowsMergedStruct();
rowsMergedStruct rowsMergedResult = rowsMerged;





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rowsMergedResult");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.temp_path+"/stageOut.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"US-ASCII"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("picking_type_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("journal_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("invoice_journal_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_cashdrawer");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_electronic_scale");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_customer_facing_display_via_proxy");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_customer_facing_display_local");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_print_via_proxy");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_scan_via_proxy");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_big_scrollbars");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_orderline_customer_notes");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_print_auto");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_print_skip_screen");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_tax_included");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_start_categ_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_display_categ_images");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("restrict_price_control");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("set_maximum_difference");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("receipt_header");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("receipt_footer");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("proxy_ip");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("active");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("uuid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("sequence_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("sequence_line_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pricelist_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("company_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("barcode_nomenclature_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("group_pos_manager_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("group_pos_user_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("iface_tipproduct");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tip_product_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("default_fiscal_position_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("use_pricelist");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tax_regime");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tax_regime_selection");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("start_category");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("limit_categories");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("module_account");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("module_pos_restaurant");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("module_pos_discount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("module_pos_loyalty");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("module_pos_mercury");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("product_configurator");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("is_posbox");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("is_header_or_footer");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("module_pos_hr");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("amount_authorized_diff");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("other_devices");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("rounding_method");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("cash_rounding");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("only_round_cash_method");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("manual_discount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ship_later");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("warehouse_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("route_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("picking_policy");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("limited_products_loading");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("limited_products_amount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("product_load_background");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("limited_partners_loading");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("limited_partners_amount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("partner_load_background");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("create_uid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("create_date");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("write_uid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("write_date");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("epson_printer_ip");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("crm_team_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("down_payment_product_id");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rowsMerged");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[72];

        public void addRow(String[] row) {

            for (int i = 0; i < 72; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 71 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 71 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[71] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("rowsMerged");
        util_tLogRow_1.addRow(new String[]{"id","name","picking_type_id","journal_id","invoice_journal_id","iface_cashdrawer","iface_electronic_scale","iface_customer_facing_display_via_proxy","iface_customer_facing_display_local","iface_print_via_proxy","iface_scan_via_proxy","iface_big_scrollbars","iface_orderline_customer_notes","iface_print_auto","iface_print_skip_screen","iface_tax_included","iface_start_categ_id","iface_display_categ_images","restrict_price_control","set_maximum_difference","receipt_header","receipt_footer","proxy_ip","active","uuid","sequence_id","sequence_line_id","pricelist_id","company_id","barcode_nomenclature_id","group_pos_manager_id","group_pos_user_id","iface_tipproduct","tip_product_id","default_fiscal_position_id","use_pricelist","tax_regime","tax_regime_selection","start_category","limit_categories","module_account","module_pos_restaurant","module_pos_discount","module_pos_loyalty","module_pos_mercury","product_configurator","is_posbox","is_header_or_footer","module_pos_hr","amount_authorized_diff","other_devices","rounding_method","cash_rounding","only_round_cash_method","manual_discount","ship_later","warehouse_id","route_id","picking_policy","limited_products_loading","limited_products_amount","product_load_background","limited_partners_loading","limited_partners_amount","partner_load_background","create_uid","create_date","write_uid","write_date","epson_printer_ip","crm_team_id","down_payment_product_id",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"stageRows","deltRows");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deltaRows");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.temp_path+"/delta.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"US-ASCII"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"delta");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[72];

        public void addRow(String[] row) {

            for (int i = 0; i < 72; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 71 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 71 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[71] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("delta");
        util_tLogRow_2.addRow(new String[]{"id","name","picking_type_id","journal_id","invoice_journal_id","iface_cashdrawer","iface_electronic_scale","iface_customer_facing_display_via_proxy","iface_customer_facing_display_local","iface_print_via_proxy","iface_scan_via_proxy","iface_big_scrollbars","iface_orderline_customer_notes","iface_print_auto","iface_print_skip_screen","iface_tax_included","iface_start_categ_id","iface_display_categ_images","restrict_price_control","set_maximum_difference","receipt_header","receipt_footer","proxy_ip","active","uuid","sequence_id","sequence_line_id","pricelist_id","company_id","barcode_nomenclature_id","group_pos_manager_id","group_pos_user_id","iface_tipproduct","tip_product_id","default_fiscal_position_id","use_pricelist","tax_regime","tax_regime_selection","start_category","limit_categories","module_account","module_pos_restaurant","module_pos_discount","module_pos_loyalty","module_pos_mercury","product_configurator","is_posbox","is_header_or_footer","module_pos_hr","amount_authorized_diff","other_devices","rounding_method","cash_rounding","only_round_cash_method","manual_discount","ship_later","warehouse_id","route_id","picking_policy","limited_products_loading","limited_products_amount","product_load_background","limited_partners_loading","limited_partners_amount","partner_load_background","create_uid","create_date","write_uid","write_date","epson_printer_ip","crm_team_id","down_payment_product_id",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rawFile");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct> tHash_Lookup_stageFile = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct>) 
					globalMap.get( "tHash_Lookup_stageFile" ))
					;					
					
	

stageFileStruct stageFileHashKey = new stageFileStruct();
stageFileStruct stageFileDefault = new stageFileStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
deltaStruct delta_tmp = new deltaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.temp_path+"/raw.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/raw.csv", "ISO-8859-15",";","\n",false,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						rawFile = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									rawFile = new rawFileStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							rawFile.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.picking_type_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"picking_type_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.picking_type_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"journal_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.invoice_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_journal_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.invoice_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							rawFile.iface_cashdrawer = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							rawFile.iface_electronic_scale = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							rawFile.iface_customer_facing_display_via_proxy = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							rawFile.iface_customer_facing_display_local = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							rawFile.iface_print_via_proxy = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							rawFile.iface_scan_via_proxy = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							rawFile.iface_big_scrollbars = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							rawFile.iface_orderline_customer_notes = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.iface_print_auto = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iface_print_auto", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.iface_print_auto = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.iface_print_skip_screen = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iface_print_skip_screen", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.iface_print_skip_screen = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
							rawFile.iface_tax_included = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
							rawFile.iface_start_categ_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
							rawFile.iface_display_categ_images = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
							rawFile.restrict_price_control = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
							rawFile.set_maximum_difference = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
							rawFile.receipt_header = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
							rawFile.receipt_footer = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
							rawFile.proxy_ip = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 24;
					
							rawFile.uuid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 25;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.sequence_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.sequence_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 26;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.sequence_line_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_line_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.sequence_line_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 27;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 28;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 29;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.barcode_nomenclature_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"barcode_nomenclature_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.barcode_nomenclature_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 30;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.group_pos_manager_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"group_pos_manager_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.group_pos_manager_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 31;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.group_pos_user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"group_pos_user_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.group_pos_user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 32;
					
							rawFile.iface_tipproduct = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 33;
					
							rawFile.tip_product_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 34;
					
							rawFile.default_fiscal_position_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 35;
					
							rawFile.use_pricelist = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 36;
					
							rawFile.tax_regime = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 37;
					
							rawFile.tax_regime_selection = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 38;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.start_category = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"start_category", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.start_category = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 39;
					
							rawFile.limit_categories = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 40;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.module_account = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"module_account", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.module_account = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 41;
					
							rawFile.module_pos_restaurant = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 42;
					
							rawFile.module_pos_discount = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 43;
					
							rawFile.module_pos_loyalty = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 44;
					
							rawFile.module_pos_mercury = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 45;
					
							rawFile.product_configurator = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 46;
					
							rawFile.is_posbox = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 47;
					
							rawFile.is_header_or_footer = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 48;
					
							rawFile.module_pos_hr = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 49;
					
							rawFile.amount_authorized_diff = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 50;
					
							rawFile.other_devices = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 51;
					
							rawFile.rounding_method = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 52;
					
							rawFile.cash_rounding = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 53;
					
							rawFile.only_round_cash_method = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 54;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.manual_discount = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"manual_discount", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.manual_discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 55;
					
							rawFile.ship_later = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 56;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.warehouse_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"warehouse_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.warehouse_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 57;
					
							rawFile.route_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 58;
					
							rawFile.picking_policy = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 59;
					
							rawFile.limited_products_loading = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 60;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.limited_products_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"limited_products_amount", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.limited_products_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 61;
					
							rawFile.product_load_background = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 62;
					
							rawFile.limited_partners_loading = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 63;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.limited_partners_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"limited_partners_amount", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.limited_partners_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 64;
					
							rawFile.partner_load_background = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 65;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 66;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									rawFile.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 67;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 68;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									rawFile.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 69;
					
							rawFile.epson_printer_ip = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 70;
					
							rawFile.crm_team_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 71;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.down_payment_product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"down_payment_product_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.down_payment_product_id = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					rawFile = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "rawFile"
if(rawFile != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rawFile"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "stageFile" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstageFile = false;
       		  	    	
       		  	    	
 							stageFileStruct stageFileObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    stageFileHashKey.id =  rawFile.id ;
                        		    		

								
		                        	stageFileHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_stageFile.lookup( stageFileHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_stageFile.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_stageFile != null && tHash_Lookup_stageFile.getCount(stageFileHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'stageFile' and it contains more one result from keys :  stageFile.id = '" + stageFileHashKey.id + "'");
								} // G 071
							

							stageFileStruct stageFile = null;
                    		  	 
							   
                    		  	 
	       		  	    	stageFileStruct fromLookup_stageFile = null;
							stageFile = stageFileDefault;
										 
							
								 
							
							
								if (tHash_Lookup_stageFile !=null && tHash_Lookup_stageFile.hasNext()) { // G 099
								
							
								
								fromLookup_stageFile = tHash_Lookup_stageFile.next();

							
							
								} // G 099
							
							

							if(fromLookup_stageFile != null) {
								stageFile = fromLookup_stageFile;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

delta = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'delta'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
delta_tmp.id = rawFile.id ;
delta_tmp.name = rawFile.name ;
delta_tmp.picking_type_id = rawFile.picking_type_id ;
delta_tmp.journal_id = rawFile.journal_id ;
delta_tmp.invoice_journal_id = rawFile.invoice_journal_id ;
delta_tmp.iface_cashdrawer = rawFile.iface_cashdrawer ;
delta_tmp.iface_electronic_scale = rawFile.iface_electronic_scale ;
delta_tmp.iface_customer_facing_display_via_proxy = rawFile.iface_customer_facing_display_via_proxy ;
delta_tmp.iface_customer_facing_display_local = rawFile.iface_customer_facing_display_local ;
delta_tmp.iface_print_via_proxy = rawFile.iface_print_via_proxy ;
delta_tmp.iface_scan_via_proxy = rawFile.iface_scan_via_proxy ;
delta_tmp.iface_big_scrollbars = rawFile.iface_big_scrollbars ;
delta_tmp.iface_orderline_customer_notes = rawFile.iface_orderline_customer_notes ;
delta_tmp.iface_print_auto = rawFile.iface_print_auto ;
delta_tmp.iface_print_skip_screen = rawFile.iface_print_skip_screen ;
delta_tmp.iface_tax_included = rawFile.iface_tax_included ;
delta_tmp.iface_start_categ_id = rawFile.iface_start_categ_id ;
delta_tmp.iface_display_categ_images = rawFile.iface_display_categ_images ;
delta_tmp.restrict_price_control = rawFile.restrict_price_control ;
delta_tmp.set_maximum_difference = rawFile.set_maximum_difference ;
delta_tmp.receipt_header = rawFile.receipt_header ;
delta_tmp.receipt_footer = rawFile.receipt_footer ;
delta_tmp.proxy_ip = rawFile.proxy_ip ;
delta_tmp.active = rawFile.active ;
delta_tmp.uuid = rawFile.uuid ;
delta_tmp.sequence_id = rawFile.sequence_id ;
delta_tmp.sequence_line_id = rawFile.sequence_line_id ;
delta_tmp.pricelist_id = rawFile.pricelist_id ;
delta_tmp.company_id = rawFile.company_id ;
delta_tmp.barcode_nomenclature_id = rawFile.barcode_nomenclature_id ;
delta_tmp.group_pos_manager_id = rawFile.group_pos_manager_id ;
delta_tmp.group_pos_user_id = rawFile.group_pos_user_id ;
delta_tmp.iface_tipproduct = rawFile.iface_tipproduct ;
delta_tmp.tip_product_id = rawFile.tip_product_id ;
delta_tmp.default_fiscal_position_id = rawFile.default_fiscal_position_id ;
delta_tmp.use_pricelist = rawFile.use_pricelist ;
delta_tmp.tax_regime = rawFile.tax_regime ;
delta_tmp.tax_regime_selection = rawFile.tax_regime_selection ;
delta_tmp.start_category = rawFile.start_category ;
delta_tmp.limit_categories = rawFile.limit_categories ;
delta_tmp.module_account = rawFile.module_account ;
delta_tmp.module_pos_restaurant = rawFile.module_pos_restaurant ;
delta_tmp.module_pos_discount = rawFile.module_pos_discount ;
delta_tmp.module_pos_loyalty = rawFile.module_pos_loyalty ;
delta_tmp.module_pos_mercury = rawFile.module_pos_mercury ;
delta_tmp.product_configurator = rawFile.product_configurator ;
delta_tmp.is_posbox = rawFile.is_posbox ;
delta_tmp.is_header_or_footer = rawFile.is_header_or_footer ;
delta_tmp.module_pos_hr = rawFile.module_pos_hr ;
delta_tmp.amount_authorized_diff = rawFile.amount_authorized_diff ;
delta_tmp.other_devices = rawFile.other_devices ;
delta_tmp.rounding_method = rawFile.rounding_method ;
delta_tmp.cash_rounding = rawFile.cash_rounding ;
delta_tmp.only_round_cash_method = rawFile.only_round_cash_method ;
delta_tmp.manual_discount = rawFile.manual_discount ;
delta_tmp.ship_later = rawFile.ship_later ;
delta_tmp.warehouse_id = rawFile.warehouse_id ;
delta_tmp.route_id = rawFile.route_id ;
delta_tmp.picking_policy = rawFile.picking_policy ;
delta_tmp.limited_products_loading = rawFile.limited_products_loading ;
delta_tmp.limited_products_amount = rawFile.limited_products_amount ;
delta_tmp.product_load_background = rawFile.product_load_background ;
delta_tmp.limited_partners_loading = rawFile.limited_partners_loading ;
delta_tmp.limited_partners_amount = rawFile.limited_partners_amount ;
delta_tmp.partner_load_background = rawFile.partner_load_background ;
delta_tmp.create_uid = rawFile.create_uid ;
delta_tmp.create_date = rawFile.create_date ;
delta_tmp.write_uid = rawFile.write_uid ;
delta_tmp.write_date = rawFile.write_date ;
delta_tmp.epson_printer_ip = rawFile.epson_printer_ip ;
delta_tmp.crm_team_id = rawFile.crm_team_id ;
delta_tmp.down_payment_product_id = rawFile.down_payment_product_id ;
delta = delta_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "delta"
if(delta != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"delta"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[72];
   				
	    		if(delta.id != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(delta.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.name != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(delta.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.picking_type_id != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(delta.picking_type_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.journal_id != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(delta.journal_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.invoice_journal_id != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(delta.invoice_journal_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_cashdrawer != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(delta.iface_cashdrawer)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_electronic_scale != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(delta.iface_electronic_scale)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_customer_facing_display_via_proxy != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(delta.iface_customer_facing_display_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_customer_facing_display_local != null) { //              
                 row_tLogRow_2[8]=    						    
				                String.valueOf(delta.iface_customer_facing_display_local)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_print_via_proxy != null) { //              
                 row_tLogRow_2[9]=    						    
				                String.valueOf(delta.iface_print_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_scan_via_proxy != null) { //              
                 row_tLogRow_2[10]=    						    
				                String.valueOf(delta.iface_scan_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_big_scrollbars != null) { //              
                 row_tLogRow_2[11]=    						    
				                String.valueOf(delta.iface_big_scrollbars)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_orderline_customer_notes != null) { //              
                 row_tLogRow_2[12]=    						    
				                String.valueOf(delta.iface_orderline_customer_notes)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_print_auto != null) { //              
                 row_tLogRow_2[13]=    						    
				                String.valueOf(delta.iface_print_auto)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_print_skip_screen != null) { //              
                 row_tLogRow_2[14]=    						    
				                String.valueOf(delta.iface_print_skip_screen)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_tax_included != null) { //              
                 row_tLogRow_2[15]=    						    
				                String.valueOf(delta.iface_tax_included)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_start_categ_id != null) { //              
                 row_tLogRow_2[16]=    						    
				                String.valueOf(delta.iface_start_categ_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_display_categ_images != null) { //              
                 row_tLogRow_2[17]=    						    
				                String.valueOf(delta.iface_display_categ_images)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.restrict_price_control != null) { //              
                 row_tLogRow_2[18]=    						    
				                String.valueOf(delta.restrict_price_control)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.set_maximum_difference != null) { //              
                 row_tLogRow_2[19]=    						    
				                String.valueOf(delta.set_maximum_difference)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.receipt_header != null) { //              
                 row_tLogRow_2[20]=    						    
				                String.valueOf(delta.receipt_header)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.receipt_footer != null) { //              
                 row_tLogRow_2[21]=    						    
				                String.valueOf(delta.receipt_footer)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.proxy_ip != null) { //              
                 row_tLogRow_2[22]=    						    
				                String.valueOf(delta.proxy_ip)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.active != null) { //              
                 row_tLogRow_2[23]=    						    
				                String.valueOf(delta.active)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.uuid != null) { //              
                 row_tLogRow_2[24]=    						    
				                String.valueOf(delta.uuid)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.sequence_id != null) { //              
                 row_tLogRow_2[25]=    						    
				                String.valueOf(delta.sequence_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.sequence_line_id != null) { //              
                 row_tLogRow_2[26]=    						    
				                String.valueOf(delta.sequence_line_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.pricelist_id != null) { //              
                 row_tLogRow_2[27]=    						    
				                String.valueOf(delta.pricelist_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.company_id != null) { //              
                 row_tLogRow_2[28]=    						    
				                String.valueOf(delta.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.barcode_nomenclature_id != null) { //              
                 row_tLogRow_2[29]=    						    
				                String.valueOf(delta.barcode_nomenclature_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.group_pos_manager_id != null) { //              
                 row_tLogRow_2[30]=    						    
				                String.valueOf(delta.group_pos_manager_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.group_pos_user_id != null) { //              
                 row_tLogRow_2[31]=    						    
				                String.valueOf(delta.group_pos_user_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.iface_tipproduct != null) { //              
                 row_tLogRow_2[32]=    						    
				                String.valueOf(delta.iface_tipproduct)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.tip_product_id != null) { //              
                 row_tLogRow_2[33]=    						    
				                String.valueOf(delta.tip_product_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.default_fiscal_position_id != null) { //              
                 row_tLogRow_2[34]=    						    
				                String.valueOf(delta.default_fiscal_position_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.use_pricelist != null) { //              
                 row_tLogRow_2[35]=    						    
				                String.valueOf(delta.use_pricelist)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.tax_regime != null) { //              
                 row_tLogRow_2[36]=    						    
				                String.valueOf(delta.tax_regime)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.tax_regime_selection != null) { //              
                 row_tLogRow_2[37]=    						    
				                String.valueOf(delta.tax_regime_selection)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.start_category != null) { //              
                 row_tLogRow_2[38]=    						    
				                String.valueOf(delta.start_category)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.limit_categories != null) { //              
                 row_tLogRow_2[39]=    						    
				                String.valueOf(delta.limit_categories)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.module_account != null) { //              
                 row_tLogRow_2[40]=    						    
				                String.valueOf(delta.module_account)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.module_pos_restaurant != null) { //              
                 row_tLogRow_2[41]=    						    
				                String.valueOf(delta.module_pos_restaurant)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.module_pos_discount != null) { //              
                 row_tLogRow_2[42]=    						    
				                String.valueOf(delta.module_pos_discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.module_pos_loyalty != null) { //              
                 row_tLogRow_2[43]=    						    
				                String.valueOf(delta.module_pos_loyalty)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.module_pos_mercury != null) { //              
                 row_tLogRow_2[44]=    						    
				                String.valueOf(delta.module_pos_mercury)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.product_configurator != null) { //              
                 row_tLogRow_2[45]=    						    
				                String.valueOf(delta.product_configurator)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.is_posbox != null) { //              
                 row_tLogRow_2[46]=    						    
				                String.valueOf(delta.is_posbox)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.is_header_or_footer != null) { //              
                 row_tLogRow_2[47]=    						    
				                String.valueOf(delta.is_header_or_footer)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.module_pos_hr != null) { //              
                 row_tLogRow_2[48]=    						    
				                String.valueOf(delta.module_pos_hr)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.amount_authorized_diff != null) { //              
                 row_tLogRow_2[49]=    						    
				                String.valueOf(delta.amount_authorized_diff)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.other_devices != null) { //              
                 row_tLogRow_2[50]=    						    
				                String.valueOf(delta.other_devices)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.rounding_method != null) { //              
                 row_tLogRow_2[51]=    						    
				                String.valueOf(delta.rounding_method)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.cash_rounding != null) { //              
                 row_tLogRow_2[52]=    						    
				                String.valueOf(delta.cash_rounding)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.only_round_cash_method != null) { //              
                 row_tLogRow_2[53]=    						    
				                String.valueOf(delta.only_round_cash_method)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.manual_discount != null) { //              
                 row_tLogRow_2[54]=    						    
				                String.valueOf(delta.manual_discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.ship_later != null) { //              
                 row_tLogRow_2[55]=    						    
				                String.valueOf(delta.ship_later)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.warehouse_id != null) { //              
                 row_tLogRow_2[56]=    						    
				                String.valueOf(delta.warehouse_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.route_id != null) { //              
                 row_tLogRow_2[57]=    						    
				                String.valueOf(delta.route_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.picking_policy != null) { //              
                 row_tLogRow_2[58]=    						    
				                String.valueOf(delta.picking_policy)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.limited_products_loading != null) { //              
                 row_tLogRow_2[59]=    						    
				                String.valueOf(delta.limited_products_loading)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.limited_products_amount != null) { //              
                 row_tLogRow_2[60]=    						    
				                String.valueOf(delta.limited_products_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.product_load_background != null) { //              
                 row_tLogRow_2[61]=    						    
				                String.valueOf(delta.product_load_background)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.limited_partners_loading != null) { //              
                 row_tLogRow_2[62]=    						    
				                String.valueOf(delta.limited_partners_loading)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.limited_partners_amount != null) { //              
                 row_tLogRow_2[63]=    						    
				                String.valueOf(delta.limited_partners_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.partner_load_background != null) { //              
                 row_tLogRow_2[64]=    						    
				                String.valueOf(delta.partner_load_background)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.create_uid != null) { //              
                 row_tLogRow_2[65]=    						    
				                String.valueOf(delta.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.create_date != null) { //              
                 row_tLogRow_2[66]=    						
								FormatterUtils.format_Date(delta.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(delta.write_uid != null) { //              
                 row_tLogRow_2[67]=    						    
				                String.valueOf(delta.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.write_date != null) { //              
                 row_tLogRow_2[68]=    						
								FormatterUtils.format_Date(delta.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(delta.epson_printer_ip != null) { //              
                 row_tLogRow_2[69]=    						    
				                String.valueOf(delta.epson_printer_ip)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.crm_team_id != null) { //              
                 row_tLogRow_2[70]=    						    
				                String.valueOf(delta.crm_team_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.down_payment_product_id != null) { //              
                 row_tLogRow_2[71]=    						    
				                String.valueOf(delta.down_payment_product_id)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     deltaRows = delta;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deltaRows"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(deltaRows.id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.picking_type_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.picking_type_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.journal_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.journal_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.invoice_journal_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.invoice_journal_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_cashdrawer != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_cashdrawer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_electronic_scale != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_electronic_scale
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_customer_facing_display_via_proxy != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_customer_facing_display_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_customer_facing_display_local != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_customer_facing_display_local
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_print_via_proxy != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_print_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_scan_via_proxy != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_scan_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_big_scrollbars != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_big_scrollbars
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_orderline_customer_notes != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_orderline_customer_notes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_print_auto != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_print_auto
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_print_skip_screen != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_print_skip_screen
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_tax_included != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_tax_included
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_start_categ_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_start_categ_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_display_categ_images != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_display_categ_images
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.restrict_price_control != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.restrict_price_control
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.set_maximum_difference != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.set_maximum_difference
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.receipt_header != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.receipt_header
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.receipt_footer != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.receipt_footer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.proxy_ip != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.proxy_ip
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.active != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.active
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.uuid != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.uuid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.sequence_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.sequence_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.sequence_line_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.sequence_line_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.pricelist_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.pricelist_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.company_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.company_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.barcode_nomenclature_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.barcode_nomenclature_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.group_pos_manager_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.group_pos_manager_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.group_pos_user_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.group_pos_user_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.iface_tipproduct != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.iface_tipproduct
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.tip_product_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.tip_product_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.default_fiscal_position_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.default_fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.use_pricelist != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.use_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.tax_regime != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.tax_regime
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.tax_regime_selection != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.tax_regime_selection
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.start_category != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.start_category
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.limit_categories != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.limit_categories
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.module_account != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.module_account
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.module_pos_restaurant != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.module_pos_restaurant
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.module_pos_discount != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.module_pos_discount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.module_pos_loyalty != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.module_pos_loyalty
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.module_pos_mercury != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.module_pos_mercury
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.product_configurator != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.product_configurator
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.is_posbox != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.is_posbox
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.is_header_or_footer != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.is_header_or_footer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.module_pos_hr != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.module_pos_hr
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.amount_authorized_diff != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.amount_authorized_diff
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.other_devices != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.other_devices
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.rounding_method != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.rounding_method
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.cash_rounding != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.cash_rounding
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.only_round_cash_method != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.only_round_cash_method
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.manual_discount != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.manual_discount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.ship_later != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.ship_later
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.warehouse_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.route_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.route_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.picking_policy != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.limited_products_loading != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.limited_products_loading
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.limited_products_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.limited_products_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.product_load_background != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.product_load_background
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.limited_partners_loading != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.limited_partners_loading
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.limited_partners_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.limited_partners_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.partner_load_background != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.partner_load_background
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.create_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.create_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(deltaRows.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.write_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.write_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(deltaRows.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.epson_printer_ip != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.epson_printer_ip
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.crm_team_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.crm_team_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.down_payment_product_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.down_payment_product_id
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     deltRows = deltaRows;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"deltRows"
									
							);
						}
						
//////////
 

// for output
			rowsMerged = new rowsMergedStruct();
								
			rowsMerged.id = deltRows.id;								
			rowsMerged.name = deltRows.name;								
			rowsMerged.picking_type_id = deltRows.picking_type_id;								
			rowsMerged.journal_id = deltRows.journal_id;								
			rowsMerged.invoice_journal_id = deltRows.invoice_journal_id;								
			rowsMerged.iface_cashdrawer = deltRows.iface_cashdrawer;								
			rowsMerged.iface_electronic_scale = deltRows.iface_electronic_scale;								
			rowsMerged.iface_customer_facing_display_via_proxy = deltRows.iface_customer_facing_display_via_proxy;								
			rowsMerged.iface_customer_facing_display_local = deltRows.iface_customer_facing_display_local;								
			rowsMerged.iface_print_via_proxy = deltRows.iface_print_via_proxy;								
			rowsMerged.iface_scan_via_proxy = deltRows.iface_scan_via_proxy;								
			rowsMerged.iface_big_scrollbars = deltRows.iface_big_scrollbars;								
			rowsMerged.iface_orderline_customer_notes = deltRows.iface_orderline_customer_notes;								
			rowsMerged.iface_print_auto = deltRows.iface_print_auto;								
			rowsMerged.iface_print_skip_screen = deltRows.iface_print_skip_screen;								
			rowsMerged.iface_tax_included = deltRows.iface_tax_included;								
			rowsMerged.iface_start_categ_id = deltRows.iface_start_categ_id;								
			rowsMerged.iface_display_categ_images = deltRows.iface_display_categ_images;								
			rowsMerged.restrict_price_control = deltRows.restrict_price_control;								
			rowsMerged.set_maximum_difference = deltRows.set_maximum_difference;								
			rowsMerged.receipt_header = deltRows.receipt_header;								
			rowsMerged.receipt_footer = deltRows.receipt_footer;								
			rowsMerged.proxy_ip = deltRows.proxy_ip;								
			rowsMerged.active = deltRows.active;								
			rowsMerged.uuid = deltRows.uuid;								
			rowsMerged.sequence_id = deltRows.sequence_id;								
			rowsMerged.sequence_line_id = deltRows.sequence_line_id;								
			rowsMerged.pricelist_id = deltRows.pricelist_id;								
			rowsMerged.company_id = deltRows.company_id;								
			rowsMerged.barcode_nomenclature_id = deltRows.barcode_nomenclature_id;								
			rowsMerged.group_pos_manager_id = deltRows.group_pos_manager_id;								
			rowsMerged.group_pos_user_id = deltRows.group_pos_user_id;								
			rowsMerged.iface_tipproduct = deltRows.iface_tipproduct;								
			rowsMerged.tip_product_id = deltRows.tip_product_id;								
			rowsMerged.default_fiscal_position_id = deltRows.default_fiscal_position_id;								
			rowsMerged.use_pricelist = deltRows.use_pricelist;								
			rowsMerged.tax_regime = deltRows.tax_regime;								
			rowsMerged.tax_regime_selection = deltRows.tax_regime_selection;								
			rowsMerged.start_category = deltRows.start_category;								
			rowsMerged.limit_categories = deltRows.limit_categories;								
			rowsMerged.module_account = deltRows.module_account;								
			rowsMerged.module_pos_restaurant = deltRows.module_pos_restaurant;								
			rowsMerged.module_pos_discount = deltRows.module_pos_discount;								
			rowsMerged.module_pos_loyalty = deltRows.module_pos_loyalty;								
			rowsMerged.module_pos_mercury = deltRows.module_pos_mercury;								
			rowsMerged.product_configurator = deltRows.product_configurator;								
			rowsMerged.is_posbox = deltRows.is_posbox;								
			rowsMerged.is_header_or_footer = deltRows.is_header_or_footer;								
			rowsMerged.module_pos_hr = deltRows.module_pos_hr;								
			rowsMerged.amount_authorized_diff = deltRows.amount_authorized_diff;								
			rowsMerged.other_devices = deltRows.other_devices;								
			rowsMerged.rounding_method = deltRows.rounding_method;								
			rowsMerged.cash_rounding = deltRows.cash_rounding;								
			rowsMerged.only_round_cash_method = deltRows.only_round_cash_method;								
			rowsMerged.manual_discount = deltRows.manual_discount;								
			rowsMerged.ship_later = deltRows.ship_later;								
			rowsMerged.warehouse_id = deltRows.warehouse_id;								
			rowsMerged.route_id = deltRows.route_id;								
			rowsMerged.picking_policy = deltRows.picking_policy;								
			rowsMerged.limited_products_loading = deltRows.limited_products_loading;								
			rowsMerged.limited_products_amount = deltRows.limited_products_amount;								
			rowsMerged.product_load_background = deltRows.product_load_background;								
			rowsMerged.limited_partners_loading = deltRows.limited_partners_loading;								
			rowsMerged.limited_partners_amount = deltRows.limited_partners_amount;								
			rowsMerged.partner_load_background = deltRows.partner_load_background;								
			rowsMerged.create_uid = deltRows.create_uid;								
			rowsMerged.create_date = deltRows.create_date;								
			rowsMerged.write_uid = deltRows.write_uid;								
			rowsMerged.write_date = deltRows.write_date;								
			rowsMerged.epson_printer_ip = deltRows.epson_printer_ip;								
			rowsMerged.crm_team_id = deltRows.crm_team_id;								
			rowsMerged.down_payment_product_id = deltRows.down_payment_product_id;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMerged"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[72];
   				
	    		if(rowsMerged.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(rowsMerged.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.name != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(rowsMerged.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.picking_type_id != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(rowsMerged.picking_type_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.journal_id != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(rowsMerged.journal_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.invoice_journal_id != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(rowsMerged.invoice_journal_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_cashdrawer != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(rowsMerged.iface_cashdrawer)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_electronic_scale != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(rowsMerged.iface_electronic_scale)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_customer_facing_display_via_proxy != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(rowsMerged.iface_customer_facing_display_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_customer_facing_display_local != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(rowsMerged.iface_customer_facing_display_local)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_print_via_proxy != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(rowsMerged.iface_print_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_scan_via_proxy != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(rowsMerged.iface_scan_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_big_scrollbars != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(rowsMerged.iface_big_scrollbars)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_orderline_customer_notes != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(rowsMerged.iface_orderline_customer_notes)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_print_auto != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(rowsMerged.iface_print_auto)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_print_skip_screen != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(rowsMerged.iface_print_skip_screen)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_tax_included != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(rowsMerged.iface_tax_included)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_start_categ_id != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(rowsMerged.iface_start_categ_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_display_categ_images != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(rowsMerged.iface_display_categ_images)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.restrict_price_control != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(rowsMerged.restrict_price_control)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.set_maximum_difference != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(rowsMerged.set_maximum_difference)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.receipt_header != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(rowsMerged.receipt_header)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.receipt_footer != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(rowsMerged.receipt_footer)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.proxy_ip != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(rowsMerged.proxy_ip)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.active != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(rowsMerged.active)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.uuid != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(rowsMerged.uuid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.sequence_id != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(rowsMerged.sequence_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.sequence_line_id != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(rowsMerged.sequence_line_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.pricelist_id != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(rowsMerged.pricelist_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.company_id != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(rowsMerged.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.barcode_nomenclature_id != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(rowsMerged.barcode_nomenclature_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.group_pos_manager_id != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(rowsMerged.group_pos_manager_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.group_pos_user_id != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(rowsMerged.group_pos_user_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_tipproduct != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(rowsMerged.iface_tipproduct)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tip_product_id != null) { //              
                 row_tLogRow_1[33]=    						    
				                String.valueOf(rowsMerged.tip_product_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.default_fiscal_position_id != null) { //              
                 row_tLogRow_1[34]=    						    
				                String.valueOf(rowsMerged.default_fiscal_position_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.use_pricelist != null) { //              
                 row_tLogRow_1[35]=    						    
				                String.valueOf(rowsMerged.use_pricelist)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_regime != null) { //              
                 row_tLogRow_1[36]=    						    
				                String.valueOf(rowsMerged.tax_regime)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_regime_selection != null) { //              
                 row_tLogRow_1[37]=    						    
				                String.valueOf(rowsMerged.tax_regime_selection)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.start_category != null) { //              
                 row_tLogRow_1[38]=    						    
				                String.valueOf(rowsMerged.start_category)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limit_categories != null) { //              
                 row_tLogRow_1[39]=    						    
				                String.valueOf(rowsMerged.limit_categories)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_account != null) { //              
                 row_tLogRow_1[40]=    						    
				                String.valueOf(rowsMerged.module_account)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_restaurant != null) { //              
                 row_tLogRow_1[41]=    						    
				                String.valueOf(rowsMerged.module_pos_restaurant)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_discount != null) { //              
                 row_tLogRow_1[42]=    						    
				                String.valueOf(rowsMerged.module_pos_discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_loyalty != null) { //              
                 row_tLogRow_1[43]=    						    
				                String.valueOf(rowsMerged.module_pos_loyalty)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_mercury != null) { //              
                 row_tLogRow_1[44]=    						    
				                String.valueOf(rowsMerged.module_pos_mercury)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.product_configurator != null) { //              
                 row_tLogRow_1[45]=    						    
				                String.valueOf(rowsMerged.product_configurator)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.is_posbox != null) { //              
                 row_tLogRow_1[46]=    						    
				                String.valueOf(rowsMerged.is_posbox)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.is_header_or_footer != null) { //              
                 row_tLogRow_1[47]=    						    
				                String.valueOf(rowsMerged.is_header_or_footer)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_hr != null) { //              
                 row_tLogRow_1[48]=    						    
				                String.valueOf(rowsMerged.module_pos_hr)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.amount_authorized_diff != null) { //              
                 row_tLogRow_1[49]=    						    
				                String.valueOf(rowsMerged.amount_authorized_diff)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.other_devices != null) { //              
                 row_tLogRow_1[50]=    						    
				                String.valueOf(rowsMerged.other_devices)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.rounding_method != null) { //              
                 row_tLogRow_1[51]=    						    
				                String.valueOf(rowsMerged.rounding_method)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.cash_rounding != null) { //              
                 row_tLogRow_1[52]=    						    
				                String.valueOf(rowsMerged.cash_rounding)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.only_round_cash_method != null) { //              
                 row_tLogRow_1[53]=    						    
				                String.valueOf(rowsMerged.only_round_cash_method)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.manual_discount != null) { //              
                 row_tLogRow_1[54]=    						    
				                String.valueOf(rowsMerged.manual_discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.ship_later != null) { //              
                 row_tLogRow_1[55]=    						    
				                String.valueOf(rowsMerged.ship_later)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.warehouse_id != null) { //              
                 row_tLogRow_1[56]=    						    
				                String.valueOf(rowsMerged.warehouse_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.route_id != null) { //              
                 row_tLogRow_1[57]=    						    
				                String.valueOf(rowsMerged.route_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.picking_policy != null) { //              
                 row_tLogRow_1[58]=    						    
				                String.valueOf(rowsMerged.picking_policy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_products_loading != null) { //              
                 row_tLogRow_1[59]=    						    
				                String.valueOf(rowsMerged.limited_products_loading)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_products_amount != null) { //              
                 row_tLogRow_1[60]=    						    
				                String.valueOf(rowsMerged.limited_products_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.product_load_background != null) { //              
                 row_tLogRow_1[61]=    						    
				                String.valueOf(rowsMerged.product_load_background)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_partners_loading != null) { //              
                 row_tLogRow_1[62]=    						    
				                String.valueOf(rowsMerged.limited_partners_loading)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_partners_amount != null) { //              
                 row_tLogRow_1[63]=    						    
				                String.valueOf(rowsMerged.limited_partners_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.partner_load_background != null) { //              
                 row_tLogRow_1[64]=    						    
				                String.valueOf(rowsMerged.partner_load_background)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_uid != null) { //              
                 row_tLogRow_1[65]=    						    
				                String.valueOf(rowsMerged.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_date != null) { //              
                 row_tLogRow_1[66]=    						
								FormatterUtils.format_Date(rowsMerged.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_uid != null) { //              
                 row_tLogRow_1[67]=    						    
				                String.valueOf(rowsMerged.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_date != null) { //              
                 row_tLogRow_1[68]=    						
								FormatterUtils.format_Date(rowsMerged.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.epson_printer_ip != null) { //              
                 row_tLogRow_1[69]=    						    
				                String.valueOf(rowsMerged.epson_printer_ip)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.crm_team_id != null) { //              
                 row_tLogRow_1[70]=    						    
				                String.valueOf(rowsMerged.crm_team_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.down_payment_product_id != null) { //              
                 row_tLogRow_1[71]=    						    
				                String.valueOf(rowsMerged.down_payment_product_id)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     rowsMergedResult = rowsMerged;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMergedResult"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(rowsMergedResult.id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.name != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.picking_type_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.picking_type_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.journal_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.journal_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.invoice_journal_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.invoice_journal_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_cashdrawer != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_cashdrawer
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_electronic_scale != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_electronic_scale
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_customer_facing_display_via_proxy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_customer_facing_display_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_customer_facing_display_local != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_customer_facing_display_local
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_print_via_proxy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_print_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_scan_via_proxy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_scan_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_big_scrollbars != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_big_scrollbars
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_orderline_customer_notes != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_orderline_customer_notes
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_print_auto != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_print_auto
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_print_skip_screen != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_print_skip_screen
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_tax_included != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_tax_included
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_start_categ_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_start_categ_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_display_categ_images != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_display_categ_images
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.restrict_price_control != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.restrict_price_control
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.set_maximum_difference != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.set_maximum_difference
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.receipt_header != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.receipt_header
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.receipt_footer != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.receipt_footer
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.proxy_ip != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.proxy_ip
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.active != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.active
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.uuid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.uuid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.sequence_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.sequence_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.sequence_line_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.sequence_line_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.pricelist_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.pricelist_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.company_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.company_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.barcode_nomenclature_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.barcode_nomenclature_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.group_pos_manager_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.group_pos_manager_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.group_pos_user_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.group_pos_user_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_tipproduct != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_tipproduct
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tip_product_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tip_product_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.default_fiscal_position_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.default_fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.use_pricelist != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.use_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_regime != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_regime
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_regime_selection != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_regime_selection
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.start_category != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.start_category
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limit_categories != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limit_categories
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_account != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_account
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_restaurant != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_restaurant
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_discount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_discount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_loyalty != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_loyalty
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_mercury != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_mercury
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.product_configurator != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.product_configurator
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.is_posbox != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.is_posbox
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.is_header_or_footer != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.is_header_or_footer
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_hr != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_hr
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.amount_authorized_diff != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.amount_authorized_diff
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.other_devices != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.other_devices
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.rounding_method != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.rounding_method
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.cash_rounding != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.cash_rounding
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.only_round_cash_method != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.only_round_cash_method
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.manual_discount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.manual_discount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.ship_later != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.ship_later
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.warehouse_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.route_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.route_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.picking_policy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_products_loading != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_products_loading
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_products_amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_products_amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.product_load_background != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.product_load_background
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_partners_loading != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_partners_loading
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_partners_amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_partners_amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.partner_load_background != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.partner_load_background
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.epson_printer_ip != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.epson_printer_ip
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.crm_team_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.crm_team_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.down_payment_product_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.down_payment_product_id
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "delta"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "rawFile"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/raw.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_stageFile != null) {
						tHash_Lookup_stageFile.endGet();
					}
					globalMap.remove( "tHash_Lookup_stageFile" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rawFile");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"delta");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deltaRows");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = context.temp_path+"/stage.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						stageRows = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									stageRows = new stageRowsStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							stageRows.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.picking_type_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"picking_type_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.picking_type_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"journal_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.invoice_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_journal_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.invoice_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							stageRows.iface_cashdrawer = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
							stageRows.iface_electronic_scale = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
							stageRows.iface_customer_facing_display_via_proxy = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
							stageRows.iface_customer_facing_display_local = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							stageRows.iface_print_via_proxy = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
							stageRows.iface_scan_via_proxy = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
							stageRows.iface_big_scrollbars = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
							stageRows.iface_orderline_customer_notes = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.iface_print_auto = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iface_print_auto", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.iface_print_auto = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.iface_print_skip_screen = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iface_print_skip_screen", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.iface_print_skip_screen = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 15;
					
							stageRows.iface_tax_included = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 16;
					
							stageRows.iface_start_categ_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 17;
					
							stageRows.iface_display_categ_images = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 18;
					
							stageRows.restrict_price_control = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 19;
					
							stageRows.set_maximum_difference = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 20;
					
							stageRows.receipt_header = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 21;
					
							stageRows.receipt_footer = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 22;
					
							stageRows.proxy_ip = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 23;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 24;
					
							stageRows.uuid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 25;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.sequence_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.sequence_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 26;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.sequence_line_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_line_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.sequence_line_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 27;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 28;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 29;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.barcode_nomenclature_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"barcode_nomenclature_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.barcode_nomenclature_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 30;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.group_pos_manager_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"group_pos_manager_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.group_pos_manager_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 31;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.group_pos_user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"group_pos_user_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.group_pos_user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 32;
					
							stageRows.iface_tipproduct = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 33;
					
							stageRows.tip_product_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 34;
					
							stageRows.default_fiscal_position_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 35;
					
							stageRows.use_pricelist = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 36;
					
							stageRows.tax_regime = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 37;
					
							stageRows.tax_regime_selection = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 38;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.start_category = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"start_category", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.start_category = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 39;
					
							stageRows.limit_categories = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 40;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.module_account = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"module_account", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.module_account = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 41;
					
							stageRows.module_pos_restaurant = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 42;
					
							stageRows.module_pos_discount = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 43;
					
							stageRows.module_pos_loyalty = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 44;
					
							stageRows.module_pos_mercury = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 45;
					
							stageRows.product_configurator = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 46;
					
							stageRows.is_posbox = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 47;
					
							stageRows.is_header_or_footer = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 48;
					
							stageRows.module_pos_hr = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 49;
					
							stageRows.amount_authorized_diff = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 50;
					
							stageRows.other_devices = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 51;
					
							stageRows.rounding_method = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 52;
					
							stageRows.cash_rounding = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 53;
					
							stageRows.only_round_cash_method = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 54;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.manual_discount = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"manual_discount", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.manual_discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 55;
					
							stageRows.ship_later = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 56;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.warehouse_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"warehouse_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.warehouse_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 57;
					
							stageRows.route_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 58;
					
							stageRows.picking_policy = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 59;
					
							stageRows.limited_products_loading = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 60;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.limited_products_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"limited_products_amount", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.limited_products_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 61;
					
							stageRows.product_load_background = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 62;
					
							stageRows.limited_partners_loading = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 63;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.limited_partners_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"limited_partners_amount", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.limited_partners_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 64;
					
							stageRows.partner_load_background = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 65;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 66;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									stageRows.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 67;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 68;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									stageRows.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 69;
					
							stageRows.epson_printer_ip = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 70;
					
							stageRows.crm_team_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 71;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.down_payment_product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"down_payment_product_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.down_payment_product_id = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					stageRows = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "stageRows"
if(stageRows != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"stageRows"
									
							);
						}
						
//////////
 

// for output
			rowsMerged = new rowsMergedStruct();
								
			rowsMerged.id = stageRows.id;								
			rowsMerged.name = stageRows.name;								
			rowsMerged.picking_type_id = stageRows.picking_type_id;								
			rowsMerged.journal_id = stageRows.journal_id;								
			rowsMerged.invoice_journal_id = stageRows.invoice_journal_id;								
			rowsMerged.iface_cashdrawer = stageRows.iface_cashdrawer;								
			rowsMerged.iface_electronic_scale = stageRows.iface_electronic_scale;								
			rowsMerged.iface_customer_facing_display_via_proxy = stageRows.iface_customer_facing_display_via_proxy;								
			rowsMerged.iface_customer_facing_display_local = stageRows.iface_customer_facing_display_local;								
			rowsMerged.iface_print_via_proxy = stageRows.iface_print_via_proxy;								
			rowsMerged.iface_scan_via_proxy = stageRows.iface_scan_via_proxy;								
			rowsMerged.iface_big_scrollbars = stageRows.iface_big_scrollbars;								
			rowsMerged.iface_orderline_customer_notes = stageRows.iface_orderline_customer_notes;								
			rowsMerged.iface_print_auto = stageRows.iface_print_auto;								
			rowsMerged.iface_print_skip_screen = stageRows.iface_print_skip_screen;								
			rowsMerged.iface_tax_included = stageRows.iface_tax_included;								
			rowsMerged.iface_start_categ_id = stageRows.iface_start_categ_id;								
			rowsMerged.iface_display_categ_images = stageRows.iface_display_categ_images;								
			rowsMerged.restrict_price_control = stageRows.restrict_price_control;								
			rowsMerged.set_maximum_difference = stageRows.set_maximum_difference;								
			rowsMerged.receipt_header = stageRows.receipt_header;								
			rowsMerged.receipt_footer = stageRows.receipt_footer;								
			rowsMerged.proxy_ip = stageRows.proxy_ip;								
			rowsMerged.active = stageRows.active;								
			rowsMerged.uuid = stageRows.uuid;								
			rowsMerged.sequence_id = stageRows.sequence_id;								
			rowsMerged.sequence_line_id = stageRows.sequence_line_id;								
			rowsMerged.pricelist_id = stageRows.pricelist_id;								
			rowsMerged.company_id = stageRows.company_id;								
			rowsMerged.barcode_nomenclature_id = stageRows.barcode_nomenclature_id;								
			rowsMerged.group_pos_manager_id = stageRows.group_pos_manager_id;								
			rowsMerged.group_pos_user_id = stageRows.group_pos_user_id;								
			rowsMerged.iface_tipproduct = stageRows.iface_tipproduct;								
			rowsMerged.tip_product_id = stageRows.tip_product_id;								
			rowsMerged.default_fiscal_position_id = stageRows.default_fiscal_position_id;								
			rowsMerged.use_pricelist = stageRows.use_pricelist;								
			rowsMerged.tax_regime = stageRows.tax_regime;								
			rowsMerged.tax_regime_selection = stageRows.tax_regime_selection;								
			rowsMerged.start_category = stageRows.start_category;								
			rowsMerged.limit_categories = stageRows.limit_categories;								
			rowsMerged.module_account = stageRows.module_account;								
			rowsMerged.module_pos_restaurant = stageRows.module_pos_restaurant;								
			rowsMerged.module_pos_discount = stageRows.module_pos_discount;								
			rowsMerged.module_pos_loyalty = stageRows.module_pos_loyalty;								
			rowsMerged.module_pos_mercury = stageRows.module_pos_mercury;								
			rowsMerged.product_configurator = stageRows.product_configurator;								
			rowsMerged.is_posbox = stageRows.is_posbox;								
			rowsMerged.is_header_or_footer = stageRows.is_header_or_footer;								
			rowsMerged.module_pos_hr = stageRows.module_pos_hr;								
			rowsMerged.amount_authorized_diff = stageRows.amount_authorized_diff;								
			rowsMerged.other_devices = stageRows.other_devices;								
			rowsMerged.rounding_method = stageRows.rounding_method;								
			rowsMerged.cash_rounding = stageRows.cash_rounding;								
			rowsMerged.only_round_cash_method = stageRows.only_round_cash_method;								
			rowsMerged.manual_discount = stageRows.manual_discount;								
			rowsMerged.ship_later = stageRows.ship_later;								
			rowsMerged.warehouse_id = stageRows.warehouse_id;								
			rowsMerged.route_id = stageRows.route_id;								
			rowsMerged.picking_policy = stageRows.picking_policy;								
			rowsMerged.limited_products_loading = stageRows.limited_products_loading;								
			rowsMerged.limited_products_amount = stageRows.limited_products_amount;								
			rowsMerged.product_load_background = stageRows.product_load_background;								
			rowsMerged.limited_partners_loading = stageRows.limited_partners_loading;								
			rowsMerged.limited_partners_amount = stageRows.limited_partners_amount;								
			rowsMerged.partner_load_background = stageRows.partner_load_background;								
			rowsMerged.create_uid = stageRows.create_uid;								
			rowsMerged.create_date = stageRows.create_date;								
			rowsMerged.write_uid = stageRows.write_uid;								
			rowsMerged.write_date = stageRows.write_date;								
			rowsMerged.epson_printer_ip = stageRows.epson_printer_ip;								
			rowsMerged.crm_team_id = stageRows.crm_team_id;								
			rowsMerged.down_payment_product_id = stageRows.down_payment_product_id;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMerged"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[72];
   				
	    		if(rowsMerged.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(rowsMerged.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.name != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(rowsMerged.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.picking_type_id != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(rowsMerged.picking_type_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.journal_id != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(rowsMerged.journal_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.invoice_journal_id != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(rowsMerged.invoice_journal_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_cashdrawer != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(rowsMerged.iface_cashdrawer)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_electronic_scale != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(rowsMerged.iface_electronic_scale)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_customer_facing_display_via_proxy != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(rowsMerged.iface_customer_facing_display_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_customer_facing_display_local != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(rowsMerged.iface_customer_facing_display_local)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_print_via_proxy != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(rowsMerged.iface_print_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_scan_via_proxy != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(rowsMerged.iface_scan_via_proxy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_big_scrollbars != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(rowsMerged.iface_big_scrollbars)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_orderline_customer_notes != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(rowsMerged.iface_orderline_customer_notes)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_print_auto != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(rowsMerged.iface_print_auto)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_print_skip_screen != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(rowsMerged.iface_print_skip_screen)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_tax_included != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(rowsMerged.iface_tax_included)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_start_categ_id != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(rowsMerged.iface_start_categ_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_display_categ_images != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(rowsMerged.iface_display_categ_images)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.restrict_price_control != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(rowsMerged.restrict_price_control)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.set_maximum_difference != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(rowsMerged.set_maximum_difference)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.receipt_header != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(rowsMerged.receipt_header)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.receipt_footer != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(rowsMerged.receipt_footer)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.proxy_ip != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(rowsMerged.proxy_ip)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.active != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(rowsMerged.active)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.uuid != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(rowsMerged.uuid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.sequence_id != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(rowsMerged.sequence_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.sequence_line_id != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(rowsMerged.sequence_line_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.pricelist_id != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(rowsMerged.pricelist_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.company_id != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(rowsMerged.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.barcode_nomenclature_id != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(rowsMerged.barcode_nomenclature_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.group_pos_manager_id != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(rowsMerged.group_pos_manager_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.group_pos_user_id != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(rowsMerged.group_pos_user_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.iface_tipproduct != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(rowsMerged.iface_tipproduct)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tip_product_id != null) { //              
                 row_tLogRow_1[33]=    						    
				                String.valueOf(rowsMerged.tip_product_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.default_fiscal_position_id != null) { //              
                 row_tLogRow_1[34]=    						    
				                String.valueOf(rowsMerged.default_fiscal_position_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.use_pricelist != null) { //              
                 row_tLogRow_1[35]=    						    
				                String.valueOf(rowsMerged.use_pricelist)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_regime != null) { //              
                 row_tLogRow_1[36]=    						    
				                String.valueOf(rowsMerged.tax_regime)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_regime_selection != null) { //              
                 row_tLogRow_1[37]=    						    
				                String.valueOf(rowsMerged.tax_regime_selection)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.start_category != null) { //              
                 row_tLogRow_1[38]=    						    
				                String.valueOf(rowsMerged.start_category)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limit_categories != null) { //              
                 row_tLogRow_1[39]=    						    
				                String.valueOf(rowsMerged.limit_categories)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_account != null) { //              
                 row_tLogRow_1[40]=    						    
				                String.valueOf(rowsMerged.module_account)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_restaurant != null) { //              
                 row_tLogRow_1[41]=    						    
				                String.valueOf(rowsMerged.module_pos_restaurant)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_discount != null) { //              
                 row_tLogRow_1[42]=    						    
				                String.valueOf(rowsMerged.module_pos_discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_loyalty != null) { //              
                 row_tLogRow_1[43]=    						    
				                String.valueOf(rowsMerged.module_pos_loyalty)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_mercury != null) { //              
                 row_tLogRow_1[44]=    						    
				                String.valueOf(rowsMerged.module_pos_mercury)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.product_configurator != null) { //              
                 row_tLogRow_1[45]=    						    
				                String.valueOf(rowsMerged.product_configurator)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.is_posbox != null) { //              
                 row_tLogRow_1[46]=    						    
				                String.valueOf(rowsMerged.is_posbox)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.is_header_or_footer != null) { //              
                 row_tLogRow_1[47]=    						    
				                String.valueOf(rowsMerged.is_header_or_footer)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.module_pos_hr != null) { //              
                 row_tLogRow_1[48]=    						    
				                String.valueOf(rowsMerged.module_pos_hr)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.amount_authorized_diff != null) { //              
                 row_tLogRow_1[49]=    						    
				                String.valueOf(rowsMerged.amount_authorized_diff)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.other_devices != null) { //              
                 row_tLogRow_1[50]=    						    
				                String.valueOf(rowsMerged.other_devices)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.rounding_method != null) { //              
                 row_tLogRow_1[51]=    						    
				                String.valueOf(rowsMerged.rounding_method)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.cash_rounding != null) { //              
                 row_tLogRow_1[52]=    						    
				                String.valueOf(rowsMerged.cash_rounding)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.only_round_cash_method != null) { //              
                 row_tLogRow_1[53]=    						    
				                String.valueOf(rowsMerged.only_round_cash_method)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.manual_discount != null) { //              
                 row_tLogRow_1[54]=    						    
				                String.valueOf(rowsMerged.manual_discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.ship_later != null) { //              
                 row_tLogRow_1[55]=    						    
				                String.valueOf(rowsMerged.ship_later)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.warehouse_id != null) { //              
                 row_tLogRow_1[56]=    						    
				                String.valueOf(rowsMerged.warehouse_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.route_id != null) { //              
                 row_tLogRow_1[57]=    						    
				                String.valueOf(rowsMerged.route_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.picking_policy != null) { //              
                 row_tLogRow_1[58]=    						    
				                String.valueOf(rowsMerged.picking_policy)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_products_loading != null) { //              
                 row_tLogRow_1[59]=    						    
				                String.valueOf(rowsMerged.limited_products_loading)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_products_amount != null) { //              
                 row_tLogRow_1[60]=    						    
				                String.valueOf(rowsMerged.limited_products_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.product_load_background != null) { //              
                 row_tLogRow_1[61]=    						    
				                String.valueOf(rowsMerged.product_load_background)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_partners_loading != null) { //              
                 row_tLogRow_1[62]=    						    
				                String.valueOf(rowsMerged.limited_partners_loading)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.limited_partners_amount != null) { //              
                 row_tLogRow_1[63]=    						    
				                String.valueOf(rowsMerged.limited_partners_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.partner_load_background != null) { //              
                 row_tLogRow_1[64]=    						    
				                String.valueOf(rowsMerged.partner_load_background)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_uid != null) { //              
                 row_tLogRow_1[65]=    						    
				                String.valueOf(rowsMerged.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_date != null) { //              
                 row_tLogRow_1[66]=    						
								FormatterUtils.format_Date(rowsMerged.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_uid != null) { //              
                 row_tLogRow_1[67]=    						    
				                String.valueOf(rowsMerged.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_date != null) { //              
                 row_tLogRow_1[68]=    						
								FormatterUtils.format_Date(rowsMerged.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.epson_printer_ip != null) { //              
                 row_tLogRow_1[69]=    						    
				                String.valueOf(rowsMerged.epson_printer_ip)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.crm_team_id != null) { //              
                 row_tLogRow_1[70]=    						    
				                String.valueOf(rowsMerged.crm_team_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.down_payment_product_id != null) { //              
                 row_tLogRow_1[71]=    						    
				                String.valueOf(rowsMerged.down_payment_product_id)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     rowsMergedResult = rowsMerged;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMergedResult"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(rowsMergedResult.id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.name != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.picking_type_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.picking_type_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.journal_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.journal_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.invoice_journal_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.invoice_journal_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_cashdrawer != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_cashdrawer
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_electronic_scale != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_electronic_scale
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_customer_facing_display_via_proxy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_customer_facing_display_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_customer_facing_display_local != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_customer_facing_display_local
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_print_via_proxy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_print_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_scan_via_proxy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_scan_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_big_scrollbars != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_big_scrollbars
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_orderline_customer_notes != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_orderline_customer_notes
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_print_auto != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_print_auto
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_print_skip_screen != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_print_skip_screen
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_tax_included != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_tax_included
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_start_categ_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_start_categ_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_display_categ_images != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_display_categ_images
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.restrict_price_control != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.restrict_price_control
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.set_maximum_difference != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.set_maximum_difference
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.receipt_header != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.receipt_header
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.receipt_footer != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.receipt_footer
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.proxy_ip != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.proxy_ip
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.active != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.active
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.uuid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.uuid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.sequence_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.sequence_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.sequence_line_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.sequence_line_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.pricelist_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.pricelist_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.company_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.company_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.barcode_nomenclature_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.barcode_nomenclature_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.group_pos_manager_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.group_pos_manager_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.group_pos_user_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.group_pos_user_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.iface_tipproduct != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.iface_tipproduct
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tip_product_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tip_product_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.default_fiscal_position_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.default_fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.use_pricelist != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.use_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_regime != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_regime
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_regime_selection != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_regime_selection
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.start_category != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.start_category
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limit_categories != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limit_categories
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_account != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_account
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_restaurant != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_restaurant
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_discount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_discount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_loyalty != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_loyalty
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_mercury != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_mercury
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.product_configurator != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.product_configurator
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.is_posbox != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.is_posbox
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.is_header_or_footer != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.is_header_or_footer
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.module_pos_hr != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.module_pos_hr
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.amount_authorized_diff != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.amount_authorized_diff
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.other_devices != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.other_devices
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.rounding_method != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.rounding_method
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.cash_rounding != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.cash_rounding
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.only_round_cash_method != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.only_round_cash_method
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.manual_discount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.manual_discount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.ship_later != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.ship_later
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.warehouse_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.route_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.route_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.picking_policy != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_products_loading != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_products_loading
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_products_amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_products_amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.product_load_background != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.product_load_background
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_partners_loading != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_partners_loading
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.limited_partners_amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.limited_partners_amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.partner_load_background != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.partner_load_background
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.epson_printer_ip != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.epson_printer_ip
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.crm_team_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.crm_team_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.down_payment_product_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.down_payment_product_id
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "stageRows"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"stageRows","deltRows");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rowsMerged");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rowsMergedResult");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_stageFile"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	    
	final String decryptedPassword_tS3Connection_1 = context.SecretAccessKey; 

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(context.AccessKeyId,decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,"us-east-2"));
        } else {
                builder_tS3Connection_1.withRegion("us-east-2");
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "posConfig.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = context.temp_path+"/stageOut.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/stage")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class stageFileStruct implements routines.system.IPersistableComparableLookupRow<stageFileStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putPosConfigStage_DailyJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer picking_type_id;

				public Integer getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public String iface_cashdrawer;

				public String getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public String iface_electronic_scale;

				public String getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public String iface_customer_facing_display_via_proxy;

				public String getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public String iface_customer_facing_display_local;

				public String getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public String iface_print_via_proxy;

				public String getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public String iface_scan_via_proxy;

				public String getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public String iface_big_scrollbars;

				public String getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public String iface_orderline_customer_notes;

				public String getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public String iface_start_categ_id;

				public String getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public String iface_display_categ_images;

				public String getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public String restrict_price_control;

				public String getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public String set_maximum_difference;

				public String getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer barcode_nomenclature_id;

				public Integer getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public String iface_tipproduct;

				public String getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public String tip_product_id;

				public String getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public String default_fiscal_position_id;

				public String getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public String use_pricelist;

				public String getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public String tax_regime;

				public String getTax_regime () {
					return this.tax_regime;
				}
				
			    public String tax_regime_selection;

				public String getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public String limit_categories;

				public String getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public String module_pos_restaurant;

				public String getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public String module_pos_discount;

				public String getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public String module_pos_loyalty;

				public String getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public String module_pos_mercury;

				public String getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public String product_configurator;

				public String getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public String is_posbox;

				public String getIs_posbox () {
					return this.is_posbox;
				}
				
			    public String is_header_or_footer;

				public String getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public String module_pos_hr;

				public String getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public String amount_authorized_diff;

				public String getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public String other_devices;

				public String getOther_devices () {
					return this.other_devices;
				}
				
			    public String rounding_method;

				public String getRounding_method () {
					return this.rounding_method;
				}
				
			    public String cash_rounding;

				public String getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public String only_round_cash_method;

				public String getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public String ship_later;

				public String getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public String route_id;

				public String getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public String limited_products_loading;

				public String getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public String product_load_background;

				public String getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public String limited_partners_loading;

				public String getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public String partner_load_background;

				public String getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final stageFileStruct other = (stageFileStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(stageFileStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.picking_type_id = this.picking_type_id;
	            other.journal_id = this.journal_id;
	            other.invoice_journal_id = this.invoice_journal_id;
	            other.iface_cashdrawer = this.iface_cashdrawer;
	            other.iface_electronic_scale = this.iface_electronic_scale;
	            other.iface_customer_facing_display_via_proxy = this.iface_customer_facing_display_via_proxy;
	            other.iface_customer_facing_display_local = this.iface_customer_facing_display_local;
	            other.iface_print_via_proxy = this.iface_print_via_proxy;
	            other.iface_scan_via_proxy = this.iface_scan_via_proxy;
	            other.iface_big_scrollbars = this.iface_big_scrollbars;
	            other.iface_orderline_customer_notes = this.iface_orderline_customer_notes;
	            other.iface_print_auto = this.iface_print_auto;
	            other.iface_print_skip_screen = this.iface_print_skip_screen;
	            other.iface_tax_included = this.iface_tax_included;
	            other.iface_start_categ_id = this.iface_start_categ_id;
	            other.iface_display_categ_images = this.iface_display_categ_images;
	            other.restrict_price_control = this.restrict_price_control;
	            other.set_maximum_difference = this.set_maximum_difference;
	            other.receipt_header = this.receipt_header;
	            other.receipt_footer = this.receipt_footer;
	            other.proxy_ip = this.proxy_ip;
	            other.active = this.active;
	            other.uuid = this.uuid;
	            other.sequence_id = this.sequence_id;
	            other.sequence_line_id = this.sequence_line_id;
	            other.pricelist_id = this.pricelist_id;
	            other.company_id = this.company_id;
	            other.barcode_nomenclature_id = this.barcode_nomenclature_id;
	            other.group_pos_manager_id = this.group_pos_manager_id;
	            other.group_pos_user_id = this.group_pos_user_id;
	            other.iface_tipproduct = this.iface_tipproduct;
	            other.tip_product_id = this.tip_product_id;
	            other.default_fiscal_position_id = this.default_fiscal_position_id;
	            other.use_pricelist = this.use_pricelist;
	            other.tax_regime = this.tax_regime;
	            other.tax_regime_selection = this.tax_regime_selection;
	            other.start_category = this.start_category;
	            other.limit_categories = this.limit_categories;
	            other.module_account = this.module_account;
	            other.module_pos_restaurant = this.module_pos_restaurant;
	            other.module_pos_discount = this.module_pos_discount;
	            other.module_pos_loyalty = this.module_pos_loyalty;
	            other.module_pos_mercury = this.module_pos_mercury;
	            other.product_configurator = this.product_configurator;
	            other.is_posbox = this.is_posbox;
	            other.is_header_or_footer = this.is_header_or_footer;
	            other.module_pos_hr = this.module_pos_hr;
	            other.amount_authorized_diff = this.amount_authorized_diff;
	            other.other_devices = this.other_devices;
	            other.rounding_method = this.rounding_method;
	            other.cash_rounding = this.cash_rounding;
	            other.only_round_cash_method = this.only_round_cash_method;
	            other.manual_discount = this.manual_discount;
	            other.ship_later = this.ship_later;
	            other.warehouse_id = this.warehouse_id;
	            other.route_id = this.route_id;
	            other.picking_policy = this.picking_policy;
	            other.limited_products_loading = this.limited_products_loading;
	            other.limited_products_amount = this.limited_products_amount;
	            other.product_load_background = this.product_load_background;
	            other.limited_partners_loading = this.limited_partners_loading;
	            other.limited_partners_amount = this.limited_partners_amount;
	            other.partner_load_background = this.partner_load_background;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.epson_printer_ip = this.epson_printer_ip;
	            other.crm_team_id = this.crm_team_id;
	            other.down_payment_product_id = this.down_payment_product_id;
	            
	}

	public void copyKeysDataTo(stageFileStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putPosConfigStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.picking_type_id = readInteger(dis,ois);
					
						this.journal_id = readInteger(dis,ois);
					
						this.invoice_journal_id = readInteger(dis,ois);
					
						this.iface_cashdrawer = readString(dis,ois);
					
						this.iface_electronic_scale = readString(dis,ois);
					
						this.iface_customer_facing_display_via_proxy = readString(dis,ois);
					
						this.iface_customer_facing_display_local = readString(dis,ois);
					
						this.iface_print_via_proxy = readString(dis,ois);
					
						this.iface_scan_via_proxy = readString(dis,ois);
					
						this.iface_big_scrollbars = readString(dis,ois);
					
						this.iface_orderline_customer_notes = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
						this.iface_tax_included = readString(dis,ois);
					
						this.iface_start_categ_id = readString(dis,ois);
					
						this.iface_display_categ_images = readString(dis,ois);
					
						this.restrict_price_control = readString(dis,ois);
					
						this.set_maximum_difference = readString(dis,ois);
					
						this.receipt_header = readString(dis,ois);
					
						this.receipt_footer = readString(dis,ois);
					
						this.proxy_ip = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.uuid = readString(dis,ois);
					
						this.sequence_id = readInteger(dis,ois);
					
						this.sequence_line_id = readInteger(dis,ois);
					
						this.pricelist_id = readInteger(dis,ois);
					
						this.company_id = readInteger(dis,ois);
					
						this.barcode_nomenclature_id = readInteger(dis,ois);
					
						this.group_pos_manager_id = readInteger(dis,ois);
					
						this.group_pos_user_id = readInteger(dis,ois);
					
						this.iface_tipproduct = readString(dis,ois);
					
						this.tip_product_id = readString(dis,ois);
					
						this.default_fiscal_position_id = readString(dis,ois);
					
						this.use_pricelist = readString(dis,ois);
					
						this.tax_regime = readString(dis,ois);
					
						this.tax_regime_selection = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
						this.limit_categories = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
						this.module_pos_restaurant = readString(dis,ois);
					
						this.module_pos_discount = readString(dis,ois);
					
						this.module_pos_loyalty = readString(dis,ois);
					
						this.module_pos_mercury = readString(dis,ois);
					
						this.product_configurator = readString(dis,ois);
					
						this.is_posbox = readString(dis,ois);
					
						this.is_header_or_footer = readString(dis,ois);
					
						this.module_pos_hr = readString(dis,ois);
					
						this.amount_authorized_diff = readString(dis,ois);
					
						this.other_devices = readString(dis,ois);
					
						this.rounding_method = readString(dis,ois);
					
						this.cash_rounding = readString(dis,ois);
					
						this.only_round_cash_method = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
						this.ship_later = readString(dis,ois);
					
						this.warehouse_id = readInteger(dis,ois);
					
						this.route_id = readString(dis,ois);
					
						this.picking_policy = readString(dis,ois);
					
						this.limited_products_loading = readString(dis,ois);
					
						this.limited_products_amount = readInteger(dis,ois);
					
						this.product_load_background = readString(dis,ois);
					
						this.limited_partners_loading = readString(dis,ois);
					
						this.limited_partners_amount = readInteger(dis,ois);
					
						this.partner_load_background = readString(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.epson_printer_ip = readString(dis,ois);
					
						this.crm_team_id = readString(dis,ois);
					
						this.down_payment_product_id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.picking_type_id = readInteger(dis,objectIn);
					
						this.journal_id = readInteger(dis,objectIn);
					
						this.invoice_journal_id = readInteger(dis,objectIn);
					
						this.iface_cashdrawer = readString(dis,objectIn);
					
						this.iface_electronic_scale = readString(dis,objectIn);
					
						this.iface_customer_facing_display_via_proxy = readString(dis,objectIn);
					
						this.iface_customer_facing_display_local = readString(dis,objectIn);
					
						this.iface_print_via_proxy = readString(dis,objectIn);
					
						this.iface_scan_via_proxy = readString(dis,objectIn);
					
						this.iface_big_scrollbars = readString(dis,objectIn);
					
						this.iface_orderline_customer_notes = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = objectIn.readBoolean();
           				}
					
						this.iface_tax_included = readString(dis,objectIn);
					
						this.iface_start_categ_id = readString(dis,objectIn);
					
						this.iface_display_categ_images = readString(dis,objectIn);
					
						this.restrict_price_control = readString(dis,objectIn);
					
						this.set_maximum_difference = readString(dis,objectIn);
					
						this.receipt_header = readString(dis,objectIn);
					
						this.receipt_footer = readString(dis,objectIn);
					
						this.proxy_ip = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = objectIn.readBoolean();
           				}
					
						this.uuid = readString(dis,objectIn);
					
						this.sequence_id = readInteger(dis,objectIn);
					
						this.sequence_line_id = readInteger(dis,objectIn);
					
						this.pricelist_id = readInteger(dis,objectIn);
					
						this.company_id = readInteger(dis,objectIn);
					
						this.barcode_nomenclature_id = readInteger(dis,objectIn);
					
						this.group_pos_manager_id = readInteger(dis,objectIn);
					
						this.group_pos_user_id = readInteger(dis,objectIn);
					
						this.iface_tipproduct = readString(dis,objectIn);
					
						this.tip_product_id = readString(dis,objectIn);
					
						this.default_fiscal_position_id = readString(dis,objectIn);
					
						this.use_pricelist = readString(dis,objectIn);
					
						this.tax_regime = readString(dis,objectIn);
					
						this.tax_regime_selection = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = objectIn.readBoolean();
           				}
					
						this.limit_categories = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = objectIn.readBoolean();
           				}
					
						this.module_pos_restaurant = readString(dis,objectIn);
					
						this.module_pos_discount = readString(dis,objectIn);
					
						this.module_pos_loyalty = readString(dis,objectIn);
					
						this.module_pos_mercury = readString(dis,objectIn);
					
						this.product_configurator = readString(dis,objectIn);
					
						this.is_posbox = readString(dis,objectIn);
					
						this.is_header_or_footer = readString(dis,objectIn);
					
						this.module_pos_hr = readString(dis,objectIn);
					
						this.amount_authorized_diff = readString(dis,objectIn);
					
						this.other_devices = readString(dis,objectIn);
					
						this.rounding_method = readString(dis,objectIn);
					
						this.cash_rounding = readString(dis,objectIn);
					
						this.only_round_cash_method = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = objectIn.readBoolean();
           				}
					
						this.ship_later = readString(dis,objectIn);
					
						this.warehouse_id = readInteger(dis,objectIn);
					
						this.route_id = readString(dis,objectIn);
					
						this.picking_policy = readString(dis,objectIn);
					
						this.limited_products_loading = readString(dis,objectIn);
					
						this.limited_products_amount = readInteger(dis,objectIn);
					
						this.product_load_background = readString(dis,objectIn);
					
						this.limited_partners_loading = readString(dis,objectIn);
					
						this.limited_partners_amount = readInteger(dis,objectIn);
					
						this.partner_load_background = readString(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.epson_printer_ip = readString(dis,objectIn);
					
						this.crm_team_id = readString(dis,objectIn);
					
						this.down_payment_product_id = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
					writeInteger(this.picking_type_id, dos, oos);
					
					writeInteger(this.journal_id, dos, oos);
					
					writeInteger(this.invoice_journal_id, dos, oos);
					
						writeString(this.iface_cashdrawer, dos, oos);
					
						writeString(this.iface_electronic_scale, dos, oos);
					
						writeString(this.iface_customer_facing_display_via_proxy, dos, oos);
					
						writeString(this.iface_customer_facing_display_local, dos, oos);
					
						writeString(this.iface_print_via_proxy, dos, oos);
					
						writeString(this.iface_scan_via_proxy, dos, oos);
					
						writeString(this.iface_big_scrollbars, dos, oos);
					
						writeString(this.iface_orderline_customer_notes, dos, oos);
					
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
						writeString(this.iface_tax_included, dos, oos);
					
						writeString(this.iface_start_categ_id, dos, oos);
					
						writeString(this.iface_display_categ_images, dos, oos);
					
						writeString(this.restrict_price_control, dos, oos);
					
						writeString(this.set_maximum_difference, dos, oos);
					
						writeString(this.receipt_header, dos, oos);
					
						writeString(this.receipt_footer, dos, oos);
					
						writeString(this.proxy_ip, dos, oos);
					
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
						writeString(this.uuid, dos, oos);
					
					writeInteger(this.sequence_id, dos, oos);
					
					writeInteger(this.sequence_line_id, dos, oos);
					
					writeInteger(this.pricelist_id, dos, oos);
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.barcode_nomenclature_id, dos, oos);
					
					writeInteger(this.group_pos_manager_id, dos, oos);
					
					writeInteger(this.group_pos_user_id, dos, oos);
					
						writeString(this.iface_tipproduct, dos, oos);
					
						writeString(this.tip_product_id, dos, oos);
					
						writeString(this.default_fiscal_position_id, dos, oos);
					
						writeString(this.use_pricelist, dos, oos);
					
						writeString(this.tax_regime, dos, oos);
					
						writeString(this.tax_regime_selection, dos, oos);
					
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
						writeString(this.limit_categories, dos, oos);
					
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
						writeString(this.module_pos_restaurant, dos, oos);
					
						writeString(this.module_pos_discount, dos, oos);
					
						writeString(this.module_pos_loyalty, dos, oos);
					
						writeString(this.module_pos_mercury, dos, oos);
					
						writeString(this.product_configurator, dos, oos);
					
						writeString(this.is_posbox, dos, oos);
					
						writeString(this.is_header_or_footer, dos, oos);
					
						writeString(this.module_pos_hr, dos, oos);
					
						writeString(this.amount_authorized_diff, dos, oos);
					
						writeString(this.other_devices, dos, oos);
					
						writeString(this.rounding_method, dos, oos);
					
						writeString(this.cash_rounding, dos, oos);
					
						writeString(this.only_round_cash_method, dos, oos);
					
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
						writeString(this.ship_later, dos, oos);
					
					writeInteger(this.warehouse_id, dos, oos);
					
						writeString(this.route_id, dos, oos);
					
						writeString(this.picking_policy, dos, oos);
					
						writeString(this.limited_products_loading, dos, oos);
					
					writeInteger(this.limited_products_amount, dos, oos);
					
						writeString(this.product_load_background, dos, oos);
					
						writeString(this.limited_partners_loading, dos, oos);
					
					writeInteger(this.limited_partners_amount, dos, oos);
					
						writeString(this.partner_load_background, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.epson_printer_ip, dos, oos);
					
						writeString(this.crm_team_id, dos, oos);
					
					writeInteger(this.down_payment_product_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
					writeInteger(this.picking_type_id, dos, objectOut);
					
					writeInteger(this.journal_id, dos, objectOut);
					
					writeInteger(this.invoice_journal_id, dos, objectOut);
					
						writeString(this.iface_cashdrawer, dos, objectOut);
					
						writeString(this.iface_electronic_scale, dos, objectOut);
					
						writeString(this.iface_customer_facing_display_via_proxy, dos, objectOut);
					
						writeString(this.iface_customer_facing_display_local, dos, objectOut);
					
						writeString(this.iface_print_via_proxy, dos, objectOut);
					
						writeString(this.iface_scan_via_proxy, dos, objectOut);
					
						writeString(this.iface_big_scrollbars, dos, objectOut);
					
						writeString(this.iface_orderline_customer_notes, dos, objectOut);
					
						if(this.iface_print_auto == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.iface_print_auto);
		            	}
					
						if(this.iface_print_skip_screen == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.iface_print_skip_screen);
		            	}
					
						writeString(this.iface_tax_included, dos, objectOut);
					
						writeString(this.iface_start_categ_id, dos, objectOut);
					
						writeString(this.iface_display_categ_images, dos, objectOut);
					
						writeString(this.restrict_price_control, dos, objectOut);
					
						writeString(this.set_maximum_difference, dos, objectOut);
					
						writeString(this.receipt_header, dos, objectOut);
					
						writeString(this.receipt_footer, dos, objectOut);
					
						writeString(this.proxy_ip, dos, objectOut);
					
						if(this.active == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.active);
		            	}
					
						writeString(this.uuid, dos, objectOut);
					
					writeInteger(this.sequence_id, dos, objectOut);
					
					writeInteger(this.sequence_line_id, dos, objectOut);
					
					writeInteger(this.pricelist_id, dos, objectOut);
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.barcode_nomenclature_id, dos, objectOut);
					
					writeInteger(this.group_pos_manager_id, dos, objectOut);
					
					writeInteger(this.group_pos_user_id, dos, objectOut);
					
						writeString(this.iface_tipproduct, dos, objectOut);
					
						writeString(this.tip_product_id, dos, objectOut);
					
						writeString(this.default_fiscal_position_id, dos, objectOut);
					
						writeString(this.use_pricelist, dos, objectOut);
					
						writeString(this.tax_regime, dos, objectOut);
					
						writeString(this.tax_regime_selection, dos, objectOut);
					
						if(this.start_category == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.start_category);
		            	}
					
						writeString(this.limit_categories, dos, objectOut);
					
						if(this.module_account == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.module_account);
		            	}
					
						writeString(this.module_pos_restaurant, dos, objectOut);
					
						writeString(this.module_pos_discount, dos, objectOut);
					
						writeString(this.module_pos_loyalty, dos, objectOut);
					
						writeString(this.module_pos_mercury, dos, objectOut);
					
						writeString(this.product_configurator, dos, objectOut);
					
						writeString(this.is_posbox, dos, objectOut);
					
						writeString(this.is_header_or_footer, dos, objectOut);
					
						writeString(this.module_pos_hr, dos, objectOut);
					
						writeString(this.amount_authorized_diff, dos, objectOut);
					
						writeString(this.other_devices, dos, objectOut);
					
						writeString(this.rounding_method, dos, objectOut);
					
						writeString(this.cash_rounding, dos, objectOut);
					
						writeString(this.only_round_cash_method, dos, objectOut);
					
						if(this.manual_discount == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.manual_discount);
		            	}
					
						writeString(this.ship_later, dos, objectOut);
					
					writeInteger(this.warehouse_id, dos, objectOut);
					
						writeString(this.route_id, dos, objectOut);
					
						writeString(this.picking_policy, dos, objectOut);
					
						writeString(this.limited_products_loading, dos, objectOut);
					
					writeInteger(this.limited_products_amount, dos, objectOut);
					
						writeString(this.product_load_background, dos, objectOut);
					
						writeString(this.limited_partners_loading, dos, objectOut);
					
					writeInteger(this.limited_partners_amount, dos, objectOut);
					
						writeString(this.partner_load_background, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.epson_printer_ip, dos, objectOut);
					
						writeString(this.crm_team_id, dos, objectOut);
					
					writeInteger(this.down_payment_product_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+iface_cashdrawer);
		sb.append(",iface_electronic_scale="+iface_electronic_scale);
		sb.append(",iface_customer_facing_display_via_proxy="+iface_customer_facing_display_via_proxy);
		sb.append(",iface_customer_facing_display_local="+iface_customer_facing_display_local);
		sb.append(",iface_print_via_proxy="+iface_print_via_proxy);
		sb.append(",iface_scan_via_proxy="+iface_scan_via_proxy);
		sb.append(",iface_big_scrollbars="+iface_big_scrollbars);
		sb.append(",iface_orderline_customer_notes="+iface_orderline_customer_notes);
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+iface_start_categ_id);
		sb.append(",iface_display_categ_images="+iface_display_categ_images);
		sb.append(",restrict_price_control="+restrict_price_control);
		sb.append(",set_maximum_difference="+set_maximum_difference);
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+iface_tipproduct);
		sb.append(",tip_product_id="+tip_product_id);
		sb.append(",default_fiscal_position_id="+default_fiscal_position_id);
		sb.append(",use_pricelist="+use_pricelist);
		sb.append(",tax_regime="+tax_regime);
		sb.append(",tax_regime_selection="+tax_regime_selection);
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+limit_categories);
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+module_pos_restaurant);
		sb.append(",module_pos_discount="+module_pos_discount);
		sb.append(",module_pos_loyalty="+module_pos_loyalty);
		sb.append(",module_pos_mercury="+module_pos_mercury);
		sb.append(",product_configurator="+product_configurator);
		sb.append(",is_posbox="+is_posbox);
		sb.append(",is_header_or_footer="+is_header_or_footer);
		sb.append(",module_pos_hr="+module_pos_hr);
		sb.append(",amount_authorized_diff="+amount_authorized_diff);
		sb.append(",other_devices="+other_devices);
		sb.append(",rounding_method="+rounding_method);
		sb.append(",cash_rounding="+cash_rounding);
		sb.append(",only_round_cash_method="+only_round_cash_method);
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+ship_later);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+route_id);
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+limited_products_loading);
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+product_load_background);
		sb.append(",limited_partners_loading="+limited_partners_loading);
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+partner_load_background);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+crm_team_id);
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stageFileStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		stageFileStruct stageFile = new stageFileStruct();




	
	/**
	 * [tAdvancedHash_stageFile begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_stageFile", false);
		start_Hash.put("tAdvancedHash_stageFile", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_stageFile";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"stageFile");
					}
				
		int tos_count_tAdvancedHash_stageFile = 0;
		

			   		// connection name:stageFile
			   		// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_2) outputs:(stageFile,stageFile) | target node:tAdvancedHash_stageFile - inputs:(stageFile) outputs:()
			   		// linked node: tMap_1 - inputs:(rawFile,stageFile) outputs:(delta)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_stageFile = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct> tHash_Lookup_stageFile =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<stageFileStruct>getLookup(matchingModeEnum_stageFile);
	   						   
		   	   	   globalMap.put("tHash_Lookup_stageFile", tHash_Lookup_stageFile);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_stageFile begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.temp_path+"/stage.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						stageFile = null;			
									
			    						stageFile = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									stageFile = new stageFileStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							stageFile.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.picking_type_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"picking_type_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.picking_type_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"journal_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.invoice_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_journal_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.invoice_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							stageFile.iface_cashdrawer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							stageFile.iface_electronic_scale = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							stageFile.iface_customer_facing_display_via_proxy = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							stageFile.iface_customer_facing_display_local = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							stageFile.iface_print_via_proxy = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							stageFile.iface_scan_via_proxy = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							stageFile.iface_big_scrollbars = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							stageFile.iface_orderline_customer_notes = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.iface_print_auto = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iface_print_auto", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.iface_print_auto = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.iface_print_skip_screen = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iface_print_skip_screen", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.iface_print_skip_screen = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							stageFile.iface_tax_included = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							stageFile.iface_start_categ_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							stageFile.iface_display_categ_images = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							stageFile.restrict_price_control = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							stageFile.set_maximum_difference = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							stageFile.receipt_header = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							stageFile.receipt_footer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							stageFile.proxy_ip = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							stageFile.uuid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.sequence_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.sequence_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.sequence_line_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_line_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.sequence_line_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.barcode_nomenclature_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"barcode_nomenclature_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.barcode_nomenclature_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.group_pos_manager_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"group_pos_manager_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.group_pos_manager_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.group_pos_user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"group_pos_user_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.group_pos_user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							stageFile.iface_tipproduct = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							stageFile.tip_product_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							stageFile.default_fiscal_position_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							stageFile.use_pricelist = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							stageFile.tax_regime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							stageFile.tax_regime_selection = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.start_category = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"start_category", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.start_category = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							stageFile.limit_categories = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.module_account = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"module_account", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.module_account = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							stageFile.module_pos_restaurant = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							stageFile.module_pos_discount = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							stageFile.module_pos_loyalty = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							stageFile.module_pos_mercury = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							stageFile.product_configurator = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							stageFile.is_posbox = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							stageFile.is_header_or_footer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							stageFile.module_pos_hr = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							stageFile.amount_authorized_diff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							stageFile.other_devices = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							stageFile.rounding_method = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							stageFile.cash_rounding = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							stageFile.only_round_cash_method = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.manual_discount = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"manual_discount", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.manual_discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							stageFile.ship_later = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.warehouse_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"warehouse_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.warehouse_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							stageFile.route_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
							stageFile.picking_policy = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
							stageFile.limited_products_loading = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.limited_products_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"limited_products_amount", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.limited_products_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
							stageFile.product_load_background = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
							stageFile.limited_partners_loading = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.limited_partners_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"limited_partners_amount", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.limited_partners_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
							stageFile.partner_load_background = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 65;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 66;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									stageFile.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 67;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 68;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									stageFile.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 69;
					
							stageFile.epson_printer_ip = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 70;
					
							stageFile.crm_team_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 71;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.down_payment_product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"down_payment_product_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.down_payment_product_id = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					stageFile = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "stageFile"
if(stageFile != null) { 



	
	/**
	 * [tAdvancedHash_stageFile main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"stageFile"
						
						);
					}
					


			   
			   

					stageFileStruct stageFile_HashRow = new stageFileStruct();
		   	   	   
				
				stageFile_HashRow.id = stageFile.id;
				
				stageFile_HashRow.name = stageFile.name;
				
				stageFile_HashRow.picking_type_id = stageFile.picking_type_id;
				
				stageFile_HashRow.journal_id = stageFile.journal_id;
				
				stageFile_HashRow.invoice_journal_id = stageFile.invoice_journal_id;
				
				stageFile_HashRow.iface_cashdrawer = stageFile.iface_cashdrawer;
				
				stageFile_HashRow.iface_electronic_scale = stageFile.iface_electronic_scale;
				
				stageFile_HashRow.iface_customer_facing_display_via_proxy = stageFile.iface_customer_facing_display_via_proxy;
				
				stageFile_HashRow.iface_customer_facing_display_local = stageFile.iface_customer_facing_display_local;
				
				stageFile_HashRow.iface_print_via_proxy = stageFile.iface_print_via_proxy;
				
				stageFile_HashRow.iface_scan_via_proxy = stageFile.iface_scan_via_proxy;
				
				stageFile_HashRow.iface_big_scrollbars = stageFile.iface_big_scrollbars;
				
				stageFile_HashRow.iface_orderline_customer_notes = stageFile.iface_orderline_customer_notes;
				
				stageFile_HashRow.iface_print_auto = stageFile.iface_print_auto;
				
				stageFile_HashRow.iface_print_skip_screen = stageFile.iface_print_skip_screen;
				
				stageFile_HashRow.iface_tax_included = stageFile.iface_tax_included;
				
				stageFile_HashRow.iface_start_categ_id = stageFile.iface_start_categ_id;
				
				stageFile_HashRow.iface_display_categ_images = stageFile.iface_display_categ_images;
				
				stageFile_HashRow.restrict_price_control = stageFile.restrict_price_control;
				
				stageFile_HashRow.set_maximum_difference = stageFile.set_maximum_difference;
				
				stageFile_HashRow.receipt_header = stageFile.receipt_header;
				
				stageFile_HashRow.receipt_footer = stageFile.receipt_footer;
				
				stageFile_HashRow.proxy_ip = stageFile.proxy_ip;
				
				stageFile_HashRow.active = stageFile.active;
				
				stageFile_HashRow.uuid = stageFile.uuid;
				
				stageFile_HashRow.sequence_id = stageFile.sequence_id;
				
				stageFile_HashRow.sequence_line_id = stageFile.sequence_line_id;
				
				stageFile_HashRow.pricelist_id = stageFile.pricelist_id;
				
				stageFile_HashRow.company_id = stageFile.company_id;
				
				stageFile_HashRow.barcode_nomenclature_id = stageFile.barcode_nomenclature_id;
				
				stageFile_HashRow.group_pos_manager_id = stageFile.group_pos_manager_id;
				
				stageFile_HashRow.group_pos_user_id = stageFile.group_pos_user_id;
				
				stageFile_HashRow.iface_tipproduct = stageFile.iface_tipproduct;
				
				stageFile_HashRow.tip_product_id = stageFile.tip_product_id;
				
				stageFile_HashRow.default_fiscal_position_id = stageFile.default_fiscal_position_id;
				
				stageFile_HashRow.use_pricelist = stageFile.use_pricelist;
				
				stageFile_HashRow.tax_regime = stageFile.tax_regime;
				
				stageFile_HashRow.tax_regime_selection = stageFile.tax_regime_selection;
				
				stageFile_HashRow.start_category = stageFile.start_category;
				
				stageFile_HashRow.limit_categories = stageFile.limit_categories;
				
				stageFile_HashRow.module_account = stageFile.module_account;
				
				stageFile_HashRow.module_pos_restaurant = stageFile.module_pos_restaurant;
				
				stageFile_HashRow.module_pos_discount = stageFile.module_pos_discount;
				
				stageFile_HashRow.module_pos_loyalty = stageFile.module_pos_loyalty;
				
				stageFile_HashRow.module_pos_mercury = stageFile.module_pos_mercury;
				
				stageFile_HashRow.product_configurator = stageFile.product_configurator;
				
				stageFile_HashRow.is_posbox = stageFile.is_posbox;
				
				stageFile_HashRow.is_header_or_footer = stageFile.is_header_or_footer;
				
				stageFile_HashRow.module_pos_hr = stageFile.module_pos_hr;
				
				stageFile_HashRow.amount_authorized_diff = stageFile.amount_authorized_diff;
				
				stageFile_HashRow.other_devices = stageFile.other_devices;
				
				stageFile_HashRow.rounding_method = stageFile.rounding_method;
				
				stageFile_HashRow.cash_rounding = stageFile.cash_rounding;
				
				stageFile_HashRow.only_round_cash_method = stageFile.only_round_cash_method;
				
				stageFile_HashRow.manual_discount = stageFile.manual_discount;
				
				stageFile_HashRow.ship_later = stageFile.ship_later;
				
				stageFile_HashRow.warehouse_id = stageFile.warehouse_id;
				
				stageFile_HashRow.route_id = stageFile.route_id;
				
				stageFile_HashRow.picking_policy = stageFile.picking_policy;
				
				stageFile_HashRow.limited_products_loading = stageFile.limited_products_loading;
				
				stageFile_HashRow.limited_products_amount = stageFile.limited_products_amount;
				
				stageFile_HashRow.product_load_background = stageFile.product_load_background;
				
				stageFile_HashRow.limited_partners_loading = stageFile.limited_partners_loading;
				
				stageFile_HashRow.limited_partners_amount = stageFile.limited_partners_amount;
				
				stageFile_HashRow.partner_load_background = stageFile.partner_load_background;
				
				stageFile_HashRow.create_uid = stageFile.create_uid;
				
				stageFile_HashRow.create_date = stageFile.create_date;
				
				stageFile_HashRow.write_uid = stageFile.write_uid;
				
				stageFile_HashRow.write_date = stageFile.write_date;
				
				stageFile_HashRow.epson_printer_ip = stageFile.epson_printer_ip;
				
				stageFile_HashRow.crm_team_id = stageFile.crm_team_id;
				
				stageFile_HashRow.down_payment_product_id = stageFile.down_payment_product_id;
				
			tHash_Lookup_stageFile.put(stageFile_HashRow);
			
            




 


	tos_count_tAdvancedHash_stageFile++;

/**
 * [tAdvancedHash_stageFile main ] stop
 */
	
	/**
	 * [tAdvancedHash_stageFile process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

 



/**
 * [tAdvancedHash_stageFile process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_stageFile process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

 



/**
 * [tAdvancedHash_stageFile process_data_end ] stop
 */

} // End of branch "stageFile"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_stageFile end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

tHash_Lookup_stageFile.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"stageFile");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_stageFile", true);
end_Hash.put("tAdvancedHash_stageFile", System.currentTimeMillis());




/**
 * [tAdvancedHash_stageFile end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_stageFile finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

 



/**
 * [tAdvancedHash_stageFile finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final putPosConfigStage_DailyJob putPosConfigStage_DailyJobClass = new putPosConfigStage_DailyJob();

        int exitCode = putPosConfigStage_DailyJobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = putPosConfigStage_DailyJob.class.getClassLoader().getResourceAsStream("pacifico/putposconfigstage_dailyjob_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = putPosConfigStage_DailyJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("fechaFin", "id_String");
                        if(context.getStringValue("fechaFin") == null) {
                            context.fechaFin = null;
                        } else {
                            context.fechaFin=(String) context.getProperty("fechaFin");
                        }
                        context.setContextType("fechaInicio", "id_String");
                        if(context.getStringValue("fechaInicio") == null) {
                            context.fechaInicio = null;
                        } else {
                            context.fechaInicio=(String) context.getProperty("fechaInicio");
                        }
                        context.setContextType("AccessKeyId", "id_String");
                        if(context.getStringValue("AccessKeyId") == null) {
                            context.AccessKeyId = null;
                        } else {
                            context.AccessKeyId=(String) context.getProperty("AccessKeyId");
                        }
                        context.setContextType("SecretAccessKey", "id_String");
                        if(context.getStringValue("SecretAccessKey") == null) {
                            context.SecretAccessKey = null;
                        } else {
                            context.SecretAccessKey=(String) context.getProperty("SecretAccessKey");
                        }
                        context.setContextType("temp_path", "id_String");
                        if(context.getStringValue("temp_path") == null) {
                            context.temp_path = null;
                        } else {
                            context.temp_path=(String) context.getProperty("temp_path");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("fechaFin")) {
                context.fechaFin = (String) parentContextMap.get("fechaFin");
            }if (parentContextMap.containsKey("fechaInicio")) {
                context.fechaInicio = (String) parentContextMap.get("fechaInicio");
            }if (parentContextMap.containsKey("AccessKeyId")) {
                context.AccessKeyId = (String) parentContextMap.get("AccessKeyId");
            }if (parentContextMap.containsKey("SecretAccessKey")) {
                context.SecretAccessKey = (String) parentContextMap.get("SecretAccessKey");
            }if (parentContextMap.containsKey("temp_path")) {
                context.temp_path = (String) parentContextMap.get("temp_path");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : putPosConfigStage_DailyJob");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     823405 characters generated by Talend Open Studio for Data Integration 
 *     on the February 1, 2023 at 11:45:08 PM CST
 ************************************************************************************************/