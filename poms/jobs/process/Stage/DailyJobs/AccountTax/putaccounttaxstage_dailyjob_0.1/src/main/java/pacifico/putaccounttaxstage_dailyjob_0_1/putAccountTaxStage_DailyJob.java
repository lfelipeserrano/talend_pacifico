// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.putaccounttaxstage_dailyjob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: putAccountTaxStage_DailyJob Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class putAccountTaxStage_DailyJob implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "putAccountTaxStage_DailyJob";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				putAccountTaxStage_DailyJob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(putAccountTaxStage_DailyJob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_stageFile_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class rowsMergedResultStruct implements routines.system.IPersistableRow<rowsMergedResultStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rowsMergedResultStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rowsMergedStruct implements routines.system.IPersistableRow<rowsMergedStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rowsMergedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltRowsStruct implements routines.system.IPersistableRow<deltRowsStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltaRowsStruct implements routines.system.IPersistableRow<deltaRowsStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltaRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltaStruct implements routines.system.IPersistableRow<deltaStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rawFileStruct implements routines.system.IPersistableRow<rawFileStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rawFileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class stageRowsStruct implements routines.system.IPersistableRow<stageRowsStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_putAccountTaxStage_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_putAccountTaxStage_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.type_tax_use = readString(dis);
					
					this.tax_scope = readString(dis);
					
					this.amount_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis);
					
						this.sequence = readInteger(dis);
					
						this.amount = readInteger(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
					this.cash_basis_transition_account_id = readString(dis);
					
						this.country_id = readInteger(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.type_tax_use,dos);
					
					// String
				
						writeString(this.tax_scope,dos);
					
					// String
				
						writeString(this.amount_type,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// Integer
				
						writeInteger(this.sequence,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Boolean
				
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
					// Boolean
				
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
					// Boolean
				
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
					// Boolean
				
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					// Integer
				
						writeInteger(this.tax_group_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// String
				
						writeString(this.cash_basis_transition_account_id,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stageRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);

		rawFileStruct rawFile = new rawFileStruct();
deltaStruct delta = new deltaStruct();
deltaStruct deltaRows = delta;
deltaStruct deltRows = delta;

		stageRowsStruct stageRows = new stageRowsStruct();

			rowsMergedStruct rowsMerged = new rowsMergedStruct();
rowsMergedStruct rowsMergedResult = rowsMerged;





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rowsMergedResult");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageOut.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"US-ASCII"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type_tax_use");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tax_scope");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("amount_type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("active");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("company_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("sequence");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("amount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("description");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("price_include");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("include_base_amount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("is_base_affected");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("analytic");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tax_group_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tax_exigibility");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("cash_basis_transition_account_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("country_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("create_uid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("create_date");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("write_uid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("write_date");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rowsMerged");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[22];

        public void addRow(String[] row) {

            for (int i = 0; i < 22; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 21 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 21 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[21] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("rowsMerged");
        util_tLogRow_1.addRow(new String[]{"id","name","type_tax_use","tax_scope","amount_type","active","company_id","sequence","amount","description","price_include","include_base_amount","is_base_affected","analytic","tax_group_id","tax_exigibility","cash_basis_transition_account_id","country_id","create_uid","create_date","write_uid","write_date",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deltRows","stageRows");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deltaRows");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/delta.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"US-ASCII"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"delta");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[22];

        public void addRow(String[] row) {

            for (int i = 0; i < 22; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 21 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 21 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[21] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("delta");
        util_tLogRow_2.addRow(new String[]{"id","name","type_tax_use","tax_scope","amount_type","active","company_id","sequence","amount","description","price_include","include_base_amount","is_base_affected","analytic","tax_group_id","tax_exigibility","cash_basis_transition_account_id","country_id","create_uid","create_date","write_uid","write_date",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rawFile");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct> tHash_Lookup_stageFile = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct>) 
					globalMap.get( "tHash_Lookup_stageFile" ))
					;					
					
	

stageFileStruct stageFileHashKey = new stageFileStruct();
stageFileStruct stageFileDefault = new stageFileStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
deltaStruct delta_tmp = new deltaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw.csv", "ISO-8859-15",";","\n",false,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						rawFile = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									rawFile = new rawFileStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							rawFile.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							rawFile.type_tax_use = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							rawFile.tax_scope = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							rawFile.amount_type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.sequence = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.sequence = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							rawFile.description = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.price_include = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_include", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.price_include = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.include_base_amount = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"include_base_amount", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.include_base_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.is_base_affected = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_base_affected", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.is_base_affected = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.analytic = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"analytic", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.analytic = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.tax_group_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_group_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.tax_group_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
							rawFile.tax_exigibility = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
							rawFile.cash_basis_transition_account_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.country_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"country_id", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.country_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									rawFile.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								rawFile.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									rawFile.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "rawFile", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									rawFile.write_date = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					rawFile = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "rawFile"
if(rawFile != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rawFile"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "stageFile" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstageFile = false;
       		  	    	
       		  	    	
 							stageFileStruct stageFileObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    stageFileHashKey.id =  rawFile.id ;
                        		    		

								
		                        	stageFileHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_stageFile.lookup( stageFileHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_stageFile.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_stageFile != null && tHash_Lookup_stageFile.getCount(stageFileHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'stageFile' and it contains more one result from keys :  stageFile.id = '" + stageFileHashKey.id + "'");
								} // G 071
							

							stageFileStruct stageFile = null;
                    		  	 
							   
                    		  	 
	       		  	    	stageFileStruct fromLookup_stageFile = null;
							stageFile = stageFileDefault;
										 
							
								 
							
							
								if (tHash_Lookup_stageFile !=null && tHash_Lookup_stageFile.hasNext()) { // G 099
								
							
								
								fromLookup_stageFile = tHash_Lookup_stageFile.next();

							
							
								} // G 099
							
							

							if(fromLookup_stageFile != null) {
								stageFile = fromLookup_stageFile;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

delta = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'delta'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
delta_tmp.id = rawFile.id ;
delta_tmp.name = rawFile.name ;
delta_tmp.type_tax_use = rawFile.type_tax_use ;
delta_tmp.tax_scope = rawFile.tax_scope ;
delta_tmp.amount_type = rawFile.amount_type ;
delta_tmp.active = rawFile.active ;
delta_tmp.company_id = rawFile.company_id ;
delta_tmp.sequence = rawFile.sequence ;
delta_tmp.amount = rawFile.amount ;
delta_tmp.description = rawFile.description ;
delta_tmp.price_include = rawFile.price_include ;
delta_tmp.include_base_amount = rawFile.include_base_amount ;
delta_tmp.is_base_affected = rawFile.is_base_affected ;
delta_tmp.analytic = rawFile.analytic ;
delta_tmp.tax_group_id = rawFile.tax_group_id ;
delta_tmp.tax_exigibility = rawFile.tax_exigibility ;
delta_tmp.cash_basis_transition_account_id = rawFile.cash_basis_transition_account_id ;
delta_tmp.country_id = rawFile.country_id ;
delta_tmp.create_uid = rawFile.create_uid ;
delta_tmp.create_date = rawFile.create_date ;
delta_tmp.write_uid = rawFile.write_uid ;
delta_tmp.write_date = rawFile.write_date ;
delta = delta_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "delta"
if(delta != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"delta"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[22];
   				
	    		if(delta.id != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(delta.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.name != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(delta.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.type_tax_use != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(delta.type_tax_use)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.tax_scope != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(delta.tax_scope)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.amount_type != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(delta.amount_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.active != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(delta.active)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.company_id != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(delta.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.sequence != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(delta.sequence)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.amount != null) { //              
                 row_tLogRow_2[8]=    						    
				                String.valueOf(delta.amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.description != null) { //              
                 row_tLogRow_2[9]=    						    
				                String.valueOf(delta.description)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.price_include != null) { //              
                 row_tLogRow_2[10]=    						    
				                String.valueOf(delta.price_include)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.include_base_amount != null) { //              
                 row_tLogRow_2[11]=    						    
				                String.valueOf(delta.include_base_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.is_base_affected != null) { //              
                 row_tLogRow_2[12]=    						    
				                String.valueOf(delta.is_base_affected)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.analytic != null) { //              
                 row_tLogRow_2[13]=    						    
				                String.valueOf(delta.analytic)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.tax_group_id != null) { //              
                 row_tLogRow_2[14]=    						    
				                String.valueOf(delta.tax_group_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.tax_exigibility != null) { //              
                 row_tLogRow_2[15]=    						    
				                String.valueOf(delta.tax_exigibility)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.cash_basis_transition_account_id != null) { //              
                 row_tLogRow_2[16]=    						    
				                String.valueOf(delta.cash_basis_transition_account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.country_id != null) { //              
                 row_tLogRow_2[17]=    						    
				                String.valueOf(delta.country_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.create_uid != null) { //              
                 row_tLogRow_2[18]=    						    
				                String.valueOf(delta.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.create_date != null) { //              
                 row_tLogRow_2[19]=    						
								FormatterUtils.format_Date(delta.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(delta.write_uid != null) { //              
                 row_tLogRow_2[20]=    						    
				                String.valueOf(delta.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(delta.write_date != null) { //              
                 row_tLogRow_2[21]=    						
								FormatterUtils.format_Date(delta.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     deltaRows = delta;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"deltaRows"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(deltaRows.id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.type_tax_use != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.type_tax_use
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.tax_scope != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.tax_scope
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.amount_type != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.amount_type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.active != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.active
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.company_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.company_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.sequence != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.sequence
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.description != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.description
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.price_include != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.price_include
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.include_base_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.include_base_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.is_base_affected != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.is_base_affected
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.analytic != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.analytic
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.tax_group_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.tax_group_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.tax_exigibility != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.tax_exigibility
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.cash_basis_transition_account_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.cash_basis_transition_account_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.country_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.country_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.create_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.create_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(deltaRows.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.write_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            deltaRows.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(deltaRows.write_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(deltaRows.write_date, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     deltRows = deltaRows;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"deltRows"
									
							);
						}
						
//////////
 

// for output
			rowsMerged = new rowsMergedStruct();
								
			rowsMerged.id = deltRows.id;								
			rowsMerged.name = deltRows.name;								
			rowsMerged.type_tax_use = deltRows.type_tax_use;								
			rowsMerged.tax_scope = deltRows.tax_scope;								
			rowsMerged.amount_type = deltRows.amount_type;								
			rowsMerged.active = deltRows.active;								
			rowsMerged.company_id = deltRows.company_id;								
			rowsMerged.sequence = deltRows.sequence;								
			rowsMerged.amount = deltRows.amount;								
			rowsMerged.description = deltRows.description;								
			rowsMerged.price_include = deltRows.price_include;								
			rowsMerged.include_base_amount = deltRows.include_base_amount;								
			rowsMerged.is_base_affected = deltRows.is_base_affected;								
			rowsMerged.analytic = deltRows.analytic;								
			rowsMerged.tax_group_id = deltRows.tax_group_id;								
			rowsMerged.tax_exigibility = deltRows.tax_exigibility;								
			rowsMerged.cash_basis_transition_account_id = deltRows.cash_basis_transition_account_id;								
			rowsMerged.country_id = deltRows.country_id;								
			rowsMerged.create_uid = deltRows.create_uid;								
			rowsMerged.create_date = deltRows.create_date;								
			rowsMerged.write_uid = deltRows.write_uid;								
			rowsMerged.write_date = deltRows.write_date;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMerged"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[22];
   				
	    		if(rowsMerged.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(rowsMerged.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.name != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(rowsMerged.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.type_tax_use != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(rowsMerged.type_tax_use)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_scope != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(rowsMerged.tax_scope)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.amount_type != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(rowsMerged.amount_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.active != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(rowsMerged.active)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.company_id != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(rowsMerged.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.sequence != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(rowsMerged.sequence)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.amount != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(rowsMerged.amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.description != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(rowsMerged.description)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.price_include != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(rowsMerged.price_include)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.include_base_amount != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(rowsMerged.include_base_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.is_base_affected != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(rowsMerged.is_base_affected)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.analytic != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(rowsMerged.analytic)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_group_id != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(rowsMerged.tax_group_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_exigibility != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(rowsMerged.tax_exigibility)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.cash_basis_transition_account_id != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(rowsMerged.cash_basis_transition_account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.country_id != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(rowsMerged.country_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_uid != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(rowsMerged.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_date != null) { //              
                 row_tLogRow_1[19]=    						
								FormatterUtils.format_Date(rowsMerged.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_uid != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(rowsMerged.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_date != null) { //              
                 row_tLogRow_1[21]=    						
								FormatterUtils.format_Date(rowsMerged.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     rowsMergedResult = rowsMerged;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMergedResult"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(rowsMergedResult.id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.name != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.type_tax_use != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.type_tax_use
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_scope != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_scope
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.amount_type != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.amount_type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.active != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.active
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.company_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.company_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.sequence != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.sequence
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.description != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.description
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.price_include != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.price_include
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.include_base_amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.include_base_amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.is_base_affected != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.is_base_affected
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.analytic != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.analytic
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_group_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_group_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_exigibility != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_exigibility
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.cash_basis_transition_account_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.cash_basis_transition_account_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.country_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.country_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.write_date, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "delta"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "rawFile"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_stageFile != null) {
						tHash_Lookup_stageFile.endGet();
					}
					globalMap.remove( "tHash_Lookup_stageFile" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rawFile");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"delta");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deltaRows");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						stageRows = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									stageRows = new stageRowsStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							stageRows.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							stageRows.type_tax_use = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							stageRows.tax_scope = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							stageRows.amount_type = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.sequence = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.sequence = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							stageRows.description = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.price_include = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_include", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.price_include = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.include_base_amount = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"include_base_amount", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.include_base_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.is_base_affected = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_base_affected", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.is_base_affected = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.analytic = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"analytic", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.analytic = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.tax_group_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_group_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.tax_group_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 15;
					
							stageRows.tax_exigibility = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 16;
					
							stageRows.cash_basis_transition_account_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 17;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.country_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"country_id", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.country_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 18;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 19;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									stageRows.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 20;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								stageRows.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 21;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									stageRows.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "stageRows", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									stageRows.write_date = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					stageRows = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "stageRows"
if(stageRows != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"stageRows"
									
							);
						}
						
//////////
 

// for output
			rowsMerged = new rowsMergedStruct();
								
			rowsMerged.id = stageRows.id;								
			rowsMerged.name = stageRows.name;								
			rowsMerged.type_tax_use = stageRows.type_tax_use;								
			rowsMerged.tax_scope = stageRows.tax_scope;								
			rowsMerged.amount_type = stageRows.amount_type;								
			rowsMerged.active = stageRows.active;								
			rowsMerged.company_id = stageRows.company_id;								
			rowsMerged.sequence = stageRows.sequence;								
			rowsMerged.amount = stageRows.amount;								
			rowsMerged.description = stageRows.description;								
			rowsMerged.price_include = stageRows.price_include;								
			rowsMerged.include_base_amount = stageRows.include_base_amount;								
			rowsMerged.is_base_affected = stageRows.is_base_affected;								
			rowsMerged.analytic = stageRows.analytic;								
			rowsMerged.tax_group_id = stageRows.tax_group_id;								
			rowsMerged.tax_exigibility = stageRows.tax_exigibility;								
			rowsMerged.cash_basis_transition_account_id = stageRows.cash_basis_transition_account_id;								
			rowsMerged.country_id = stageRows.country_id;								
			rowsMerged.create_uid = stageRows.create_uid;								
			rowsMerged.create_date = stageRows.create_date;								
			rowsMerged.write_uid = stageRows.write_uid;								
			rowsMerged.write_date = stageRows.write_date;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMerged"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[22];
   				
	    		if(rowsMerged.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(rowsMerged.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.name != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(rowsMerged.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.type_tax_use != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(rowsMerged.type_tax_use)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_scope != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(rowsMerged.tax_scope)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.amount_type != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(rowsMerged.amount_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.active != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(rowsMerged.active)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.company_id != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(rowsMerged.company_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.sequence != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(rowsMerged.sequence)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.amount != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(rowsMerged.amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.description != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(rowsMerged.description)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.price_include != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(rowsMerged.price_include)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.include_base_amount != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(rowsMerged.include_base_amount)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.is_base_affected != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(rowsMerged.is_base_affected)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.analytic != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(rowsMerged.analytic)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_group_id != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(rowsMerged.tax_group_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.tax_exigibility != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(rowsMerged.tax_exigibility)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.cash_basis_transition_account_id != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(rowsMerged.cash_basis_transition_account_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.country_id != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(rowsMerged.country_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_uid != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(rowsMerged.create_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.create_date != null) { //              
                 row_tLogRow_1[19]=    						
								FormatterUtils.format_Date(rowsMerged.create_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_uid != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(rowsMerged.write_uid)			
					          ;	
							
	    		} //			
    			   				
	    		if(rowsMerged.write_date != null) { //              
                 row_tLogRow_1[21]=    						
								FormatterUtils.format_Date(rowsMerged.write_date, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     rowsMergedResult = rowsMerged;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rowsMergedResult"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(rowsMergedResult.id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.name != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.type_tax_use != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.type_tax_use
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_scope != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_scope
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.amount_type != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.amount_type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.active != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.active
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.company_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.company_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.sequence != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.sequence
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.description != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.description
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.price_include != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.price_include
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.include_base_amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.include_base_amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.is_base_affected != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.is_base_affected
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.analytic != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.analytic
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_group_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_group_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.tax_exigibility != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.tax_exigibility
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.cash_basis_transition_account_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.cash_basis_transition_account_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.country_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.country_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.create_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_uid != null) {
                        sb_tFileOutputDelimited_2.append(
                            rowsMergedResult.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(rowsMergedResult.write_date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(rowsMergedResult.write_date, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "stageRows"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deltRows","stageRows");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rowsMerged");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rowsMergedResult");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_stageFile"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:RZRkxoXHwVY/m8nfdnF7RoYuEr0PX57O9LLvP9AP/bPCtSdd1gvUj5B9OF/odPwcYbROz9v40+HDmODktGDyrDppVOg=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PS4OCUVYGK",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,"us-east-2"));
        } else {
                builder_tS3Connection_1.withRegion("us-east-2");
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "accountTax.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageOut.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/stage")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class stageFileStruct implements routines.system.IPersistableComparableLookupRow<stageFileStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_putAccountTaxStage_DailyJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String type_tax_use;

				public String getType_tax_use () {
					return this.type_tax_use;
				}
				
			    public String tax_scope;

				public String getTax_scope () {
					return this.tax_scope;
				}
				
			    public String amount_type;

				public String getAmount_type () {
					return this.amount_type;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer sequence;

				public Integer getSequence () {
					return this.sequence;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Boolean price_include;

				public Boolean getPrice_include () {
					return this.price_include;
				}
				
			    public Boolean include_base_amount;

				public Boolean getInclude_base_amount () {
					return this.include_base_amount;
				}
				
			    public Boolean is_base_affected;

				public Boolean getIs_base_affected () {
					return this.is_base_affected;
				}
				
			    public Boolean analytic;

				public Boolean getAnalytic () {
					return this.analytic;
				}
				
			    public Integer tax_group_id;

				public Integer getTax_group_id () {
					return this.tax_group_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public String cash_basis_transition_account_id;

				public String getCash_basis_transition_account_id () {
					return this.cash_basis_transition_account_id;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final stageFileStruct other = (stageFileStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(stageFileStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.type_tax_use = this.type_tax_use;
	            other.tax_scope = this.tax_scope;
	            other.amount_type = this.amount_type;
	            other.active = this.active;
	            other.company_id = this.company_id;
	            other.sequence = this.sequence;
	            other.amount = this.amount;
	            other.description = this.description;
	            other.price_include = this.price_include;
	            other.include_base_amount = this.include_base_amount;
	            other.is_base_affected = this.is_base_affected;
	            other.analytic = this.analytic;
	            other.tax_group_id = this.tax_group_id;
	            other.tax_exigibility = this.tax_exigibility;
	            other.cash_basis_transition_account_id = this.cash_basis_transition_account_id;
	            other.country_id = this.country_id;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            
	}

	public void copyKeysDataTo(stageFileStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_putAccountTaxStage_DailyJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.type_tax_use = readString(dis,ois);
					
						this.tax_scope = readString(dis,ois);
					
						this.amount_type = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis,ois);
					
						this.sequence = readInteger(dis,ois);
					
						this.amount = readInteger(dis,ois);
					
						this.description = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = dis.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis,ois);
					
						this.tax_exigibility = readString(dis,ois);
					
						this.cash_basis_transition_account_id = readString(dis,ois);
					
						this.country_id = readInteger(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.type_tax_use = readString(dis,objectIn);
					
						this.tax_scope = readString(dis,objectIn);
					
						this.amount_type = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = objectIn.readBoolean();
           				}
					
						this.company_id = readInteger(dis,objectIn);
					
						this.sequence = readInteger(dis,objectIn);
					
						this.amount = readInteger(dis,objectIn);
					
						this.description = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.price_include = null;
           				} else {
           			    	this.price_include = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.include_base_amount = null;
           				} else {
           			    	this.include_base_amount = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_base_affected = null;
           				} else {
           			    	this.is_base_affected = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.analytic = null;
           				} else {
           			    	this.analytic = objectIn.readBoolean();
           				}
					
						this.tax_group_id = readInteger(dis,objectIn);
					
						this.tax_exigibility = readString(dis,objectIn);
					
						this.cash_basis_transition_account_id = readString(dis,objectIn);
					
						this.country_id = readInteger(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						writeString(this.type_tax_use, dos, oos);
					
						writeString(this.tax_scope, dos, oos);
					
						writeString(this.amount_type, dos, oos);
					
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.sequence, dos, oos);
					
					writeInteger(this.amount, dos, oos);
					
						writeString(this.description, dos, oos);
					
						if(this.price_include == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.price_include);
		            	}
					
						if(this.include_base_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.include_base_amount);
		            	}
					
						if(this.is_base_affected == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_base_affected);
		            	}
					
						if(this.analytic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.analytic);
		            	}
					
					writeInteger(this.tax_group_id, dos, oos);
					
						writeString(this.tax_exigibility, dos, oos);
					
						writeString(this.cash_basis_transition_account_id, dos, oos);
					
					writeInteger(this.country_id, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
						writeString(this.type_tax_use, dos, objectOut);
					
						writeString(this.tax_scope, dos, objectOut);
					
						writeString(this.amount_type, dos, objectOut);
					
						if(this.active == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.active);
		            	}
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.sequence, dos, objectOut);
					
					writeInteger(this.amount, dos, objectOut);
					
						writeString(this.description, dos, objectOut);
					
						if(this.price_include == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.price_include);
		            	}
					
						if(this.include_base_amount == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.include_base_amount);
		            	}
					
						if(this.is_base_affected == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_base_affected);
		            	}
					
						if(this.analytic == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.analytic);
		            	}
					
					writeInteger(this.tax_group_id, dos, objectOut);
					
						writeString(this.tax_exigibility, dos, objectOut);
					
						writeString(this.cash_basis_transition_account_id, dos, objectOut);
					
					writeInteger(this.country_id, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",type_tax_use="+type_tax_use);
		sb.append(",tax_scope="+tax_scope);
		sb.append(",amount_type="+amount_type);
		sb.append(",active="+String.valueOf(active));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",sequence="+String.valueOf(sequence));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",description="+description);
		sb.append(",price_include="+String.valueOf(price_include));
		sb.append(",include_base_amount="+String.valueOf(include_base_amount));
		sb.append(",is_base_affected="+String.valueOf(is_base_affected));
		sb.append(",analytic="+String.valueOf(analytic));
		sb.append(",tax_group_id="+String.valueOf(tax_group_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",cash_basis_transition_account_id="+cash_basis_transition_account_id);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stageFileStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		stageFileStruct stageFile = new stageFileStruct();




	
	/**
	 * [tAdvancedHash_stageFile begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_stageFile", false);
		start_Hash.put("tAdvancedHash_stageFile", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_stageFile";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"stageFile");
					}
				
		int tos_count_tAdvancedHash_stageFile = 0;
		

			   		// connection name:stageFile
			   		// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_2) outputs:(stageFile,stageFile) | target node:tAdvancedHash_stageFile - inputs:(stageFile) outputs:()
			   		// linked node: tMap_1 - inputs:(rawFile,stageFile) outputs:(delta)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_stageFile = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stageFileStruct> tHash_Lookup_stageFile =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<stageFileStruct>getLookup(matchingModeEnum_stageFile);
	   						   
		   	   	   globalMap.put("tHash_Lookup_stageFile", tHash_Lookup_stageFile);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_stageFile begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						stageFile = null;			
									
			    						stageFile = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									stageFile = new stageFileStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							stageFile.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							stageFile.type_tax_use = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							stageFile.tax_scope = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							stageFile.amount_type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.sequence = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.sequence = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							stageFile.description = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.price_include = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_include", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.price_include = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.include_base_amount = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"include_base_amount", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.include_base_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.is_base_affected = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_base_affected", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.is_base_affected = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.analytic = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"analytic", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.analytic = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.tax_group_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_group_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.tax_group_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							stageFile.tax_exigibility = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							stageFile.cash_basis_transition_account_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.country_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"country_id", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.country_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									stageFile.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								stageFile.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									stageFile.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "stageFile", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									stageFile.write_date = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					stageFile = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "stageFile"
if(stageFile != null) { 



	
	/**
	 * [tAdvancedHash_stageFile main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"stageFile"
						
						);
					}
					


			   
			   

					stageFileStruct stageFile_HashRow = new stageFileStruct();
		   	   	   
				
				stageFile_HashRow.id = stageFile.id;
				
				stageFile_HashRow.name = stageFile.name;
				
				stageFile_HashRow.type_tax_use = stageFile.type_tax_use;
				
				stageFile_HashRow.tax_scope = stageFile.tax_scope;
				
				stageFile_HashRow.amount_type = stageFile.amount_type;
				
				stageFile_HashRow.active = stageFile.active;
				
				stageFile_HashRow.company_id = stageFile.company_id;
				
				stageFile_HashRow.sequence = stageFile.sequence;
				
				stageFile_HashRow.amount = stageFile.amount;
				
				stageFile_HashRow.description = stageFile.description;
				
				stageFile_HashRow.price_include = stageFile.price_include;
				
				stageFile_HashRow.include_base_amount = stageFile.include_base_amount;
				
				stageFile_HashRow.is_base_affected = stageFile.is_base_affected;
				
				stageFile_HashRow.analytic = stageFile.analytic;
				
				stageFile_HashRow.tax_group_id = stageFile.tax_group_id;
				
				stageFile_HashRow.tax_exigibility = stageFile.tax_exigibility;
				
				stageFile_HashRow.cash_basis_transition_account_id = stageFile.cash_basis_transition_account_id;
				
				stageFile_HashRow.country_id = stageFile.country_id;
				
				stageFile_HashRow.create_uid = stageFile.create_uid;
				
				stageFile_HashRow.create_date = stageFile.create_date;
				
				stageFile_HashRow.write_uid = stageFile.write_uid;
				
				stageFile_HashRow.write_date = stageFile.write_date;
				
			tHash_Lookup_stageFile.put(stageFile_HashRow);
			
            




 


	tos_count_tAdvancedHash_stageFile++;

/**
 * [tAdvancedHash_stageFile main ] stop
 */
	
	/**
	 * [tAdvancedHash_stageFile process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

 



/**
 * [tAdvancedHash_stageFile process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_stageFile process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

 



/**
 * [tAdvancedHash_stageFile process_data_end ] stop
 */

} // End of branch "stageFile"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_stageFile end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

tHash_Lookup_stageFile.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"stageFile");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_stageFile", true);
end_Hash.put("tAdvancedHash_stageFile", System.currentTimeMillis());




/**
 * [tAdvancedHash_stageFile end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_stageFile finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_stageFile";

	

 



/**
 * [tAdvancedHash_stageFile finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final putAccountTaxStage_DailyJob putAccountTaxStage_DailyJobClass = new putAccountTaxStage_DailyJob();

        int exitCode = putAccountTaxStage_DailyJobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = putAccountTaxStage_DailyJob.class.getClassLoader().getResourceAsStream("pacifico/putaccounttaxstage_dailyjob_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = putAccountTaxStage_DailyJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : putAccountTaxStage_DailyJob");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     388696 characters generated by Talend Open Studio for Data Integration 
 *     on the December 7, 2022 at 11:31:54 PM CST
 ************************************************************************************************/