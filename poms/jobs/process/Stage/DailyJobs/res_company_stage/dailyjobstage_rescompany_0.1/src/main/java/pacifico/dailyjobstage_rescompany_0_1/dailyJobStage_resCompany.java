// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.dailyjobstage_rescompany_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dailyJobStage_resCompany Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class dailyJobStage_resCompany implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(AccessKeyId != null){
				
					this.setProperty("AccessKeyId", AccessKeyId.toString());
				
			}
			
			if(SecretAccessKey != null){
				
					this.setProperty("SecretAccessKey", SecretAccessKey.toString());
				
			}
			
			if(temp_path != null){
				
					this.setProperty("temp_path", temp_path.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String AccessKeyId;
public String getAccessKeyId(){
	return this.AccessKeyId;
}
public String SecretAccessKey;
public String getSecretAccessKey(){
	return this.SecretAccessKey;
}
public String temp_path;
public String getTemp_path(){
	return this.temp_path;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dailyJobStage_resCompany";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dailyJobStage_resCompany.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dailyJobStage_resCompany.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_dailyJobStage_resCompany.length) {
				if(length < 1024 && commonByteArray_PACIFICO_dailyJobStage_resCompany.length == 0) {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_dailyJobStage_resCompany, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.partner_id = readInteger(dis);
					
						this.currency_id = readInteger(dis);
					
					this.sequence = readString(dis);
					
					this.create_date = readDate(dis);
					
					this.parent_id = readString(dis);
					
					this.report_header = readString(dis);
					
					this.report_footer = readString(dis);
					
					this.company_details = readString(dis);
					
					this.logo_web = readString(dis);
					
					this.email = readString(dis);
					
						this.phone = readInteger(dis);
					
					this.mobile = readString(dis);
					
					this.company_registry = readString(dis);
					
						this.paperformat_id = readInteger(dis);
					
					this.external_report_layout_id = readString(dis);
					
					this.base_onboarding_company_state = readString(dis);
					
					this.font = readString(dis);
					
					this.primary_color = readString(dis);
					
					this.secondary_color = readString(dis);
					
					this.layout_background = readString(dis);
					
					this.create_uid = readString(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.resource_calendar_id = readInteger(dis);
					
					this.partner_gid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
					this.snailmail_cover = readString(dis);
					
					this.snailmail_duplex = readString(dis);
					
						this.fiscalyear_last_day = readInteger(dis);
					
						this.fiscalyear_last_month = readInteger(dis);
					
					this.period_lock_date = readString(dis);
					
					this.fiscalyear_lock_date = readString(dis);
					
					this.tax_lock_date = readString(dis);
					
						this.transfer_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis);
					
						this.bank_account_code_prefix = readInteger(dis);
					
						this.cash_account_code_prefix = readInteger(dis);
					
						this.default_cash_difference_income_account_id = readInteger(dis);
					
						this.default_cash_difference_expense_account_id = readInteger(dis);
					
						this.account_journal_suspense_account_id = readInteger(dis);
					
						this.account_journal_payment_debit_account_id = readInteger(dis);
					
						this.account_journal_payment_credit_account_id = readInteger(dis);
					
						this.transfer_account_code_prefix = readInteger(dis);
					
						this.account_sale_tax_id = readInteger(dis);
					
						this.account_purchase_tax_id = readInteger(dis);
					
					this.tax_calculation_rounding_method = readString(dis);
					
						this.currency_exchange_journal_id = readInteger(dis);
					
						this.income_currency_exchange_account_id = readInteger(dis);
					
						this.expense_currency_exchange_account_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis);
					
						this.property_stock_account_output_categ_id = readInteger(dis);
					
						this.property_stock_valuation_account_id = readInteger(dis);
					
					this.incoterm_id = readString(dis);
					
					this.qr_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
					this.account_opening_move_id = readString(dis);
					
					this.account_opening_date = readDate(dis);
					
					this.account_setup_bank_data_state = readString(dis);
					
					this.account_setup_fy_data_state = readString(dis);
					
					this.account_setup_coa_state = readString(dis);
					
					this.account_setup_taxes_state = readString(dis);
					
					this.account_onboarding_invoice_layout_state = readString(dis);
					
					this.account_onboarding_create_invoice_state = readString(dis);
					
					this.account_onboarding_sale_tax_state = readString(dis);
					
					this.account_invoice_onboarding_state = readString(dis);
					
					this.account_dashboard_onboarding_state = readString(dis);
					
					this.invoice_terms = readString(dis);
					
					this.terms_type = readString(dis);
					
					this.invoice_terms_html = readString(dis);
					
					this.account_setup_bill_state = readString(dis);
					
						this.account_default_pos_receivable_account_id = readInteger(dis);
					
					this.expense_accrual_account_id = readString(dis);
					
					this.revenue_accrual_account_id = readString(dis);
					
					this.automatic_entry_default_journal_id = readString(dis);
					
						this.account_fiscal_country_id = readInteger(dis);
					
					this.tax_exigibility = readString(dis);
					
						this.tax_cash_basis_journal_id = readInteger(dis);
					
					this.account_cash_basis_base_account_id = readString(dis);
					
					this.payment_acquirer_onboarding_state = readString(dis);
					
					this.payment_onboarding_payment_method = readString(dis);
					
					this.invoice_is_snailmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis);
					
					this.sale_quotation_onboarding_state = readString(dis);
					
					this.sale_onboarding_order_confirmation_state = readString(dis);
					
					this.sale_onboarding_sample_quotation_state = readString(dis);
					
					this.sale_onboarding_payment_method = readString(dis);
					
					this.sale_order_template_id = readString(dis);
					
						this.nomenclature_id = readInteger(dis);
					
						this.internal_transit_location_id = readInteger(dis);
					
					this.stock_move_email_validation = readString(dis);
					
						this.stock_mail_confirmation_template_id = readInteger(dis);
					
						this.annual_inventory_month = readInteger(dis);
					
						this.annual_inventory_day = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis);
					
					this.has_received_warning_stock_sms = readString(dis);
					
					this.point_of_sale_update_stock_quantities = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.partner_id,dos);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// String
				
						writeString(this.sequence,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// String
				
						writeString(this.parent_id,dos);
					
					// String
				
						writeString(this.report_header,dos);
					
					// String
				
						writeString(this.report_footer,dos);
					
					// String
				
						writeString(this.company_details,dos);
					
					// String
				
						writeString(this.logo_web,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// Integer
				
						writeInteger(this.phone,dos);
					
					// String
				
						writeString(this.mobile,dos);
					
					// String
				
						writeString(this.company_registry,dos);
					
					// Integer
				
						writeInteger(this.paperformat_id,dos);
					
					// String
				
						writeString(this.external_report_layout_id,dos);
					
					// String
				
						writeString(this.base_onboarding_company_state,dos);
					
					// String
				
						writeString(this.font,dos);
					
					// String
				
						writeString(this.primary_color,dos);
					
					// String
				
						writeString(this.secondary_color,dos);
					
					// String
				
						writeString(this.layout_background,dos);
					
					// String
				
						writeString(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.resource_calendar_id,dos);
					
					// String
				
						writeString(this.partner_gid,dos);
					
					// Boolean
				
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
					// Boolean
				
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
					// String
				
						writeString(this.snailmail_cover,dos);
					
					// String
				
						writeString(this.snailmail_duplex,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_day,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear_last_month,dos);
					
					// String
				
						writeString(this.period_lock_date,dos);
					
					// String
				
						writeString(this.fiscalyear_lock_date,dos);
					
					// String
				
						writeString(this.tax_lock_date,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_id,dos);
					
					// Boolean
				
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					// Integer
				
						writeInteger(this.chart_template_id,dos);
					
					// Integer
				
						writeInteger(this.bank_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.cash_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_income_account_id,dos);
					
					// Integer
				
						writeInteger(this.default_cash_difference_expense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_suspense_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_debit_account_id,dos);
					
					// Integer
				
						writeInteger(this.account_journal_payment_credit_account_id,dos);
					
					// Integer
				
						writeInteger(this.transfer_account_code_prefix,dos);
					
					// Integer
				
						writeInteger(this.account_sale_tax_id,dos);
					
					// Integer
				
						writeInteger(this.account_purchase_tax_id,dos);
					
					// String
				
						writeString(this.tax_calculation_rounding_method,dos);
					
					// Integer
				
						writeInteger(this.currency_exchange_journal_id,dos);
					
					// Integer
				
						writeInteger(this.income_currency_exchange_account_id,dos);
					
					// Integer
				
						writeInteger(this.expense_currency_exchange_account_id,dos);
					
					// Boolean
				
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					// Integer
				
						writeInteger(this.property_stock_account_input_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_account_output_categ_id,dos);
					
					// Integer
				
						writeInteger(this.property_stock_valuation_account_id,dos);
					
					// String
				
						writeString(this.incoterm_id,dos);
					
					// String
				
						writeString(this.qr_code,dos);
					
					// Boolean
				
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
					// Boolean
				
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
					// String
				
						writeString(this.account_opening_move_id,dos);
					
					// java.util.Date
				
						writeDate(this.account_opening_date,dos);
					
					// String
				
						writeString(this.account_setup_bank_data_state,dos);
					
					// String
				
						writeString(this.account_setup_fy_data_state,dos);
					
					// String
				
						writeString(this.account_setup_coa_state,dos);
					
					// String
				
						writeString(this.account_setup_taxes_state,dos);
					
					// String
				
						writeString(this.account_onboarding_invoice_layout_state,dos);
					
					// String
				
						writeString(this.account_onboarding_create_invoice_state,dos);
					
					// String
				
						writeString(this.account_onboarding_sale_tax_state,dos);
					
					// String
				
						writeString(this.account_invoice_onboarding_state,dos);
					
					// String
				
						writeString(this.account_dashboard_onboarding_state,dos);
					
					// String
				
						writeString(this.invoice_terms,dos);
					
					// String
				
						writeString(this.terms_type,dos);
					
					// String
				
						writeString(this.invoice_terms_html,dos);
					
					// String
				
						writeString(this.account_setup_bill_state,dos);
					
					// Integer
				
						writeInteger(this.account_default_pos_receivable_account_id,dos);
					
					// String
				
						writeString(this.expense_accrual_account_id,dos);
					
					// String
				
						writeString(this.revenue_accrual_account_id,dos);
					
					// String
				
						writeString(this.automatic_entry_default_journal_id,dos);
					
					// Integer
				
						writeInteger(this.account_fiscal_country_id,dos);
					
					// String
				
						writeString(this.tax_exigibility,dos);
					
					// Integer
				
						writeInteger(this.tax_cash_basis_journal_id,dos);
					
					// String
				
						writeString(this.account_cash_basis_base_account_id,dos);
					
					// String
				
						writeString(this.payment_acquirer_onboarding_state,dos);
					
					// String
				
						writeString(this.payment_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.invoice_is_snailmail,dos);
					
					// Boolean
				
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
					// Boolean
				
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					// Integer
				
						writeInteger(this.quotation_validity_days,dos);
					
					// String
				
						writeString(this.sale_quotation_onboarding_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_order_confirmation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_sample_quotation_state,dos);
					
					// String
				
						writeString(this.sale_onboarding_payment_method,dos);
					
					// String
				
						writeString(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.nomenclature_id,dos);
					
					// Integer
				
						writeInteger(this.internal_transit_location_id,dos);
					
					// String
				
						writeString(this.stock_move_email_validation,dos);
					
					// Integer
				
						writeInteger(this.stock_mail_confirmation_template_id,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_month,dos);
					
					// Integer
				
						writeInteger(this.annual_inventory_day,dos);
					
					// Boolean
				
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					// Integer
				
						writeInteger(this.stock_sms_confirmation_template_id,dos);
					
					// String
				
						writeString(this.has_received_warning_stock_sms,dos);
					
					// String
				
						writeString(this.point_of_sale_update_stock_quantities,dos);
					
					// Float
				
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		row5Struct row5 = new row5Struct();

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out1Struct row3 = out1;
out1Struct row4 = out1;

			row6Struct row6 = new row6Struct();
row6Struct row7 = row6;





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_1{
                                    public void putHeaderValue_0(java.io.Writer outtFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception{
                                    outtFileOutputDelimited_1.write("id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("partner_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("currency_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sequence");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("create_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("parent_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("report_header");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("report_footer");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("company_details");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("logo_web");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("email");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("phone");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mobile");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("company_registry");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("paperformat_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("external_report_layout_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("base_onboarding_company_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("font");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("primary_color");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("secondary_color");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("layout_background");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("create_uid");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("write_uid");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("write_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("resource_calendar_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("partner_gid");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("iap_enrich_auto_done");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("snailmail_color");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("snailmail_cover");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("snailmail_duplex");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fiscalyear_last_day");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fiscalyear_last_month");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("period_lock_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fiscalyear_lock_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_lock_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("transfer_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("expects_chart_of_accounts");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("chart_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("bank_account_code_prefix");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("cash_account_code_prefix");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("default_cash_difference_income_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("default_cash_difference_expense_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_journal_suspense_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_journal_payment_debit_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_journal_payment_credit_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("transfer_account_code_prefix");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_sale_tax_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_purchase_tax_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_calculation_rounding_method");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("currency_exchange_journal_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("income_currency_exchange_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("expense_currency_exchange_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("anglo_saxon_accounting");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("property_stock_account_input_categ_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("property_stock_account_output_categ_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("property_stock_valuation_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("incoterm_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("qr_code");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_is_email");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_is_print");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_opening_move_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_opening_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_bank_data_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_fy_data_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_coa_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_taxes_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_onboarding_invoice_layout_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_onboarding_create_invoice_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_onboarding_sale_tax_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_invoice_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_dashboard_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_terms");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("terms_type");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_terms_html");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_setup_bill_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_default_pos_receivable_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("expense_accrual_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("revenue_accrual_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("automatic_entry_default_journal_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_fiscal_country_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_exigibility");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("tax_cash_basis_journal_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("account_cash_basis_base_account_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("payment_acquirer_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("payment_onboarding_payment_method");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("invoice_is_snailmail");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("portal_confirmation_sign");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("portal_confirmation_pay");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("quotation_validity_days");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    }
                                    public void putHeaderValue_1(java.io.Writer outtFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception{
                                    outtFileOutputDelimited_1.write("sale_quotation_onboarding_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_onboarding_order_confirmation_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_onboarding_sample_quotation_state");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_onboarding_payment_method");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sale_order_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("nomenclature_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("internal_transit_location_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_move_email_validation");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_mail_confirmation_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("annual_inventory_month");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("annual_inventory_day");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_move_sms_validation");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("stock_sms_confirmation_template_id");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_received_warning_stock_sms");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("point_of_sale_update_stock_quantities");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("security_lead");
                                }
                                public void putValue_0(final row6Struct row7,StringBuilder sb_tFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception {
                                if(row7.id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.partner_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.partner_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.currency_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.currency_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.sequence != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.sequence
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.create_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row7.create_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.parent_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.parent_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.report_header != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.report_header
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.report_footer != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.report_footer
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.company_details != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.company_details
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.logo_web != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.logo_web
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.email != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.email
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.phone != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.phone
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.mobile != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.mobile
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.company_registry != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.company_registry
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.paperformat_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.paperformat_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.external_report_layout_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.external_report_layout_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.base_onboarding_company_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.base_onboarding_company_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.font != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.font
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.primary_color != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.primary_color
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.secondary_color != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.secondary_color
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.layout_background != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.layout_background
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.create_uid != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.create_uid
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.write_uid != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.write_uid
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.write_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row7.write_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.resource_calendar_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.resource_calendar_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.partner_gid != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.partner_gid
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.iap_enrich_auto_done != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.iap_enrich_auto_done
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.snailmail_color != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.snailmail_color
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.snailmail_cover != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.snailmail_cover
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.snailmail_duplex != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.snailmail_duplex
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.fiscalyear_last_day != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.fiscalyear_last_day
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.fiscalyear_last_month != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.fiscalyear_last_month
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.period_lock_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.period_lock_date
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.fiscalyear_lock_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.fiscalyear_lock_date
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.tax_lock_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.tax_lock_date
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.transfer_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.transfer_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.expects_chart_of_accounts != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.expects_chart_of_accounts
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.chart_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.chart_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.bank_account_code_prefix != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.bank_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.cash_account_code_prefix != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.cash_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.default_cash_difference_income_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.default_cash_difference_income_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.default_cash_difference_expense_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.default_cash_difference_expense_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_journal_suspense_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_journal_suspense_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_journal_payment_debit_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_journal_payment_debit_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_journal_payment_credit_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_journal_payment_credit_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.transfer_account_code_prefix != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.transfer_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_sale_tax_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_sale_tax_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_purchase_tax_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_purchase_tax_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.tax_calculation_rounding_method != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.tax_calculation_rounding_method
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.currency_exchange_journal_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.currency_exchange_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.income_currency_exchange_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.income_currency_exchange_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.expense_currency_exchange_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.expense_currency_exchange_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.anglo_saxon_accounting != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.anglo_saxon_accounting
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.property_stock_account_input_categ_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.property_stock_account_input_categ_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.property_stock_account_output_categ_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.property_stock_account_output_categ_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.property_stock_valuation_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.property_stock_valuation_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.incoterm_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.incoterm_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.qr_code != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.qr_code
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.invoice_is_email != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.invoice_is_email
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.invoice_is_print != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.invoice_is_print
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_opening_move_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_opening_move_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_opening_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row7.account_opening_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_setup_bank_data_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_setup_bank_data_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_setup_fy_data_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_setup_fy_data_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_setup_coa_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_setup_coa_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_setup_taxes_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_setup_taxes_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_onboarding_invoice_layout_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_onboarding_invoice_layout_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_onboarding_create_invoice_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_onboarding_create_invoice_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_onboarding_sale_tax_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_onboarding_sale_tax_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_invoice_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_invoice_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_dashboard_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_dashboard_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.invoice_terms != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.invoice_terms
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.terms_type != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.terms_type
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.invoice_terms_html != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.invoice_terms_html
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_setup_bill_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_setup_bill_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_default_pos_receivable_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_default_pos_receivable_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.expense_accrual_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.expense_accrual_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.revenue_accrual_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.revenue_accrual_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.automatic_entry_default_journal_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.automatic_entry_default_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_fiscal_country_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_fiscal_country_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.tax_exigibility != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.tax_exigibility
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.tax_cash_basis_journal_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.tax_cash_basis_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.account_cash_basis_base_account_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.account_cash_basis_base_account_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.payment_acquirer_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.payment_acquirer_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.payment_onboarding_payment_method != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.payment_onboarding_payment_method
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.invoice_is_snailmail != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.invoice_is_snailmail
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.portal_confirmation_sign != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.portal_confirmation_sign
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.portal_confirmation_pay != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.portal_confirmation_pay
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.quotation_validity_days != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.quotation_validity_days
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                }
                                public void putValue_1(final row6Struct row7,StringBuilder sb_tFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception {
                                if(row7.sale_quotation_onboarding_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.sale_quotation_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.sale_onboarding_order_confirmation_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.sale_onboarding_order_confirmation_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.sale_onboarding_sample_quotation_state != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.sale_onboarding_sample_quotation_state
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.sale_onboarding_payment_method != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.sale_onboarding_payment_method
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.sale_order_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.sale_order_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.nomenclature_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.nomenclature_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.internal_transit_location_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.internal_transit_location_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.stock_move_email_validation != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.stock_move_email_validation
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.stock_mail_confirmation_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.stock_mail_confirmation_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.annual_inventory_month != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.annual_inventory_month
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.annual_inventory_day != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.annual_inventory_day
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.stock_move_sms_validation != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.stock_move_sms_validation
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.stock_sms_confirmation_template_id != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.stock_sms_confirmation_template_id
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.has_received_warning_stock_sms != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.has_received_warning_stock_sms
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.point_of_sale_update_stock_quantities != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.point_of_sale_update_stock_quantities
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row7.security_lead != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row7.security_lead
                                );
                                }
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_1 fileOutputDelimitedUtil_tFileOutputDelimited_1=new FileOutputDelimitedUtil_tFileOutputDelimited_1();
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.temp_path+"/stageOut.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"US-ASCII"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_0(outtFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_1(outtFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[106];

        public void addRow(String[] row) {

            for (int i = 0; i < 106; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 105 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 105 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%73$-");
        			        sbformat.append(colLengths[72]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%74$-");
        			        sbformat.append(colLengths[73]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%75$-");
        			        sbformat.append(colLengths[74]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%76$-");
        			        sbformat.append(colLengths[75]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%77$-");
        			        sbformat.append(colLengths[76]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%78$-");
        			        sbformat.append(colLengths[77]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%79$-");
        			        sbformat.append(colLengths[78]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%80$-");
        			        sbformat.append(colLengths[79]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%81$-");
        			        sbformat.append(colLengths[80]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%82$-");
        			        sbformat.append(colLengths[81]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%83$-");
        			        sbformat.append(colLengths[82]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%84$-");
        			        sbformat.append(colLengths[83]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%85$-");
        			        sbformat.append(colLengths[84]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%86$-");
        			        sbformat.append(colLengths[85]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%87$-");
        			        sbformat.append(colLengths[86]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%88$-");
        			        sbformat.append(colLengths[87]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%89$-");
        			        sbformat.append(colLengths[88]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%90$-");
        			        sbformat.append(colLengths[89]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%91$-");
        			        sbformat.append(colLengths[90]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%92$-");
        			        sbformat.append(colLengths[91]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%93$-");
        			        sbformat.append(colLengths[92]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%94$-");
        			        sbformat.append(colLengths[93]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%95$-");
        			        sbformat.append(colLengths[94]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%96$-");
        			        sbformat.append(colLengths[95]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%97$-");
        			        sbformat.append(colLengths[96]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%98$-");
        			        sbformat.append(colLengths[97]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%99$-");
        			        sbformat.append(colLengths[98]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%100$-");
        			        sbformat.append(colLengths[99]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%101$-");
        			        sbformat.append(colLengths[100]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%102$-");
        			        sbformat.append(colLengths[101]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%103$-");
        			        sbformat.append(colLengths[102]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%104$-");
        			        sbformat.append(colLengths[103]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%105$-");
        			        sbformat.append(colLengths[104]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%106$-");
        			        sbformat.append(colLengths[105]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[77] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[78] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[79] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[80] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[81] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[82] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[83] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[84] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[85] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[86] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[87] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[88] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[89] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[90] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[91] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[92] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[93] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[94] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[95] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[96] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[97] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[98] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[99] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[100] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[101] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[102] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[103] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[104] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[105] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"id","name","partner_id","currency_id","sequence","create_date","parent_id","report_header","report_footer","company_details","logo_web","email","phone","mobile","company_registry","paperformat_id","external_report_layout_id","base_onboarding_company_state","font","primary_color","secondary_color","layout_background","create_uid","write_uid","write_date","resource_calendar_id","partner_gid","iap_enrich_auto_done","snailmail_color","snailmail_cover","snailmail_duplex","fiscalyear_last_day","fiscalyear_last_month","period_lock_date","fiscalyear_lock_date","tax_lock_date","transfer_account_id","expects_chart_of_accounts","chart_template_id","bank_account_code_prefix","cash_account_code_prefix","default_cash_difference_income_account_id","default_cash_difference_expense_account_id","account_journal_suspense_account_id","account_journal_payment_debit_account_id","account_journal_payment_credit_account_id","transfer_account_code_prefix","account_sale_tax_id","account_purchase_tax_id","tax_calculation_rounding_method","currency_exchange_journal_id","income_currency_exchange_account_id","expense_currency_exchange_account_id","anglo_saxon_accounting","property_stock_account_input_categ_id","property_stock_account_output_categ_id","property_stock_valuation_account_id","incoterm_id","qr_code","invoice_is_email","invoice_is_print","account_opening_move_id","account_opening_date","account_setup_bank_data_state","account_setup_fy_data_state","account_setup_coa_state","account_setup_taxes_state","account_onboarding_invoice_layout_state","account_onboarding_create_invoice_state","account_onboarding_sale_tax_state","account_invoice_onboarding_state","account_dashboard_onboarding_state","invoice_terms","terms_type","invoice_terms_html","account_setup_bill_state","account_default_pos_receivable_account_id","expense_accrual_account_id","revenue_accrual_account_id","automatic_entry_default_journal_id","account_fiscal_country_id","tax_exigibility","tax_cash_basis_journal_id","account_cash_basis_base_account_id","payment_acquirer_onboarding_state","payment_onboarding_payment_method","invoice_is_snailmail","portal_confirmation_sign","portal_confirmation_pay","quotation_validity_days","sale_quotation_onboarding_state","sale_onboarding_order_confirmation_state","sale_onboarding_sample_quotation_state","sale_onboarding_payment_method","sale_order_template_id","nomenclature_id","internal_transit_location_id","stock_move_email_validation","stock_mail_confirmation_template_id","annual_inventory_month","annual_inventory_day","stock_move_sms_validation","stock_sms_confirmation_template_id","has_received_warning_stock_sms","point_of_sale_update_stock_quantities","security_lead",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			

				class LogRowUtil_tLogRow_1{
						public void putTableVerticalValue_0(final row6Struct row6,String[] row_tLogRow_1){   				
	    					if(row6.id != null) { //              
                 				row_tLogRow_1[0]=    						    
				                String.valueOf(row6.id)			
					          ;	
	    					} //   				
	    					if(row6.name != null) { //              
                 				row_tLogRow_1[1]=    						    
				                String.valueOf(row6.name)			
					          ;	
	    					} //   				
	    					if(row6.partner_id != null) { //              
                 				row_tLogRow_1[2]=    						    
				                String.valueOf(row6.partner_id)			
					          ;	
	    					} //   				
	    					if(row6.currency_id != null) { //              
                 				row_tLogRow_1[3]=    						    
				                String.valueOf(row6.currency_id)			
					          ;	
	    					} //   				
	    					if(row6.sequence != null) { //              
                 				row_tLogRow_1[4]=    						    
				                String.valueOf(row6.sequence)			
					          ;	
	    					} //   				
	    					if(row6.create_date != null) { //              
                 				row_tLogRow_1[5]=    						
								FormatterUtils.format_Date(row6.create_date, "dd-MM-yyyy")
					          ;	
	    					} //   				
	    					if(row6.parent_id != null) { //              
                 				row_tLogRow_1[6]=    						    
				                String.valueOf(row6.parent_id)			
					          ;	
	    					} //   				
	    					if(row6.report_header != null) { //              
                 				row_tLogRow_1[7]=    						    
				                String.valueOf(row6.report_header)			
					          ;	
	    					} //   				
	    					if(row6.report_footer != null) { //              
                 				row_tLogRow_1[8]=    						    
				                String.valueOf(row6.report_footer)			
					          ;	
	    					} //   				
	    					if(row6.company_details != null) { //              
                 				row_tLogRow_1[9]=    						    
				                String.valueOf(row6.company_details)			
					          ;	
	    					} //   				
	    					if(row6.logo_web != null) { //              
                 				row_tLogRow_1[10]=    						    
				                String.valueOf(row6.logo_web)			
					          ;	
	    					} //   				
	    					if(row6.email != null) { //              
                 				row_tLogRow_1[11]=    						    
				                String.valueOf(row6.email)			
					          ;	
	    					} //   				
	    					if(row6.phone != null) { //              
                 				row_tLogRow_1[12]=    						    
				                String.valueOf(row6.phone)			
					          ;	
	    					} //   				
	    					if(row6.mobile != null) { //              
                 				row_tLogRow_1[13]=    						    
				                String.valueOf(row6.mobile)			
					          ;	
	    					} //   				
	    					if(row6.company_registry != null) { //              
                 				row_tLogRow_1[14]=    						    
				                String.valueOf(row6.company_registry)			
					          ;	
	    					} //   				
	    					if(row6.paperformat_id != null) { //              
                 				row_tLogRow_1[15]=    						    
				                String.valueOf(row6.paperformat_id)			
					          ;	
	    					} //   				
	    					if(row6.external_report_layout_id != null) { //              
                 				row_tLogRow_1[16]=    						    
				                String.valueOf(row6.external_report_layout_id)			
					          ;	
	    					} //   				
	    					if(row6.base_onboarding_company_state != null) { //              
                 				row_tLogRow_1[17]=    						    
				                String.valueOf(row6.base_onboarding_company_state)			
					          ;	
	    					} //   				
	    					if(row6.font != null) { //              
                 				row_tLogRow_1[18]=    						    
				                String.valueOf(row6.font)			
					          ;	
	    					} //   				
	    					if(row6.primary_color != null) { //              
                 				row_tLogRow_1[19]=    						    
				                String.valueOf(row6.primary_color)			
					          ;	
	    					} //   				
	    					if(row6.secondary_color != null) { //              
                 				row_tLogRow_1[20]=    						    
				                String.valueOf(row6.secondary_color)			
					          ;	
	    					} //   				
	    					if(row6.layout_background != null) { //              
                 				row_tLogRow_1[21]=    						    
				                String.valueOf(row6.layout_background)			
					          ;	
	    					} //   				
	    					if(row6.create_uid != null) { //              
                 				row_tLogRow_1[22]=    						    
				                String.valueOf(row6.create_uid)			
					          ;	
	    					} //   				
	    					if(row6.write_uid != null) { //              
                 				row_tLogRow_1[23]=    						    
				                String.valueOf(row6.write_uid)			
					          ;	
	    					} //   				
	    					if(row6.write_date != null) { //              
                 				row_tLogRow_1[24]=    						
								FormatterUtils.format_Date(row6.write_date, "dd-MM-yyyy")
					          ;	
	    					} //   				
	    					if(row6.resource_calendar_id != null) { //              
                 				row_tLogRow_1[25]=    						    
				                String.valueOf(row6.resource_calendar_id)			
					          ;	
	    					} //   				
	    					if(row6.partner_gid != null) { //              
                 				row_tLogRow_1[26]=    						    
				                String.valueOf(row6.partner_gid)			
					          ;	
	    					} //   				
	    					if(row6.iap_enrich_auto_done != null) { //              
                 				row_tLogRow_1[27]=    						    
				                String.valueOf(row6.iap_enrich_auto_done)			
					          ;	
	    					} //   				
	    					if(row6.snailmail_color != null) { //              
                 				row_tLogRow_1[28]=    						    
				                String.valueOf(row6.snailmail_color)			
					          ;	
	    					} //   				
	    					if(row6.snailmail_cover != null) { //              
                 				row_tLogRow_1[29]=    						    
				                String.valueOf(row6.snailmail_cover)			
					          ;	
	    					} //   				
	    					if(row6.snailmail_duplex != null) { //              
                 				row_tLogRow_1[30]=    						    
				                String.valueOf(row6.snailmail_duplex)			
					          ;	
	    					} //   				
	    					if(row6.fiscalyear_last_day != null) { //              
                 				row_tLogRow_1[31]=    						    
				                String.valueOf(row6.fiscalyear_last_day)			
					          ;	
	    					} //   				
	    					if(row6.fiscalyear_last_month != null) { //              
                 				row_tLogRow_1[32]=    						    
				                String.valueOf(row6.fiscalyear_last_month)			
					          ;	
	    					} //   				
	    					if(row6.period_lock_date != null) { //              
                 				row_tLogRow_1[33]=    						    
				                String.valueOf(row6.period_lock_date)			
					          ;	
	    					} //   				
	    					if(row6.fiscalyear_lock_date != null) { //              
                 				row_tLogRow_1[34]=    						    
				                String.valueOf(row6.fiscalyear_lock_date)			
					          ;	
	    					} //   				
	    					if(row6.tax_lock_date != null) { //              
                 				row_tLogRow_1[35]=    						    
				                String.valueOf(row6.tax_lock_date)			
					          ;	
	    					} //   				
	    					if(row6.transfer_account_id != null) { //              
                 				row_tLogRow_1[36]=    						    
				                String.valueOf(row6.transfer_account_id)			
					          ;	
	    					} //   				
	    					if(row6.expects_chart_of_accounts != null) { //              
                 				row_tLogRow_1[37]=    						    
				                String.valueOf(row6.expects_chart_of_accounts)			
					          ;	
	    					} //   				
	    					if(row6.chart_template_id != null) { //              
                 				row_tLogRow_1[38]=    						    
				                String.valueOf(row6.chart_template_id)			
					          ;	
	    					} //   				
	    					if(row6.bank_account_code_prefix != null) { //              
                 				row_tLogRow_1[39]=    						    
				                String.valueOf(row6.bank_account_code_prefix)			
					          ;	
	    					} //   				
	    					if(row6.cash_account_code_prefix != null) { //              
                 				row_tLogRow_1[40]=    						    
				                String.valueOf(row6.cash_account_code_prefix)			
					          ;	
	    					} //   				
	    					if(row6.default_cash_difference_income_account_id != null) { //              
                 				row_tLogRow_1[41]=    						    
				                String.valueOf(row6.default_cash_difference_income_account_id)			
					          ;	
	    					} //   				
	    					if(row6.default_cash_difference_expense_account_id != null) { //              
                 				row_tLogRow_1[42]=    						    
				                String.valueOf(row6.default_cash_difference_expense_account_id)			
					          ;	
	    					} //   				
	    					if(row6.account_journal_suspense_account_id != null) { //              
                 				row_tLogRow_1[43]=    						    
				                String.valueOf(row6.account_journal_suspense_account_id)			
					          ;	
	    					} //   				
	    					if(row6.account_journal_payment_debit_account_id != null) { //              
                 				row_tLogRow_1[44]=    						    
				                String.valueOf(row6.account_journal_payment_debit_account_id)			
					          ;	
	    					} //   				
	    					if(row6.account_journal_payment_credit_account_id != null) { //              
                 				row_tLogRow_1[45]=    						    
				                String.valueOf(row6.account_journal_payment_credit_account_id)			
					          ;	
	    					} //   				
	    					if(row6.transfer_account_code_prefix != null) { //              
                 				row_tLogRow_1[46]=    						    
				                String.valueOf(row6.transfer_account_code_prefix)			
					          ;	
	    					} //   				
	    					if(row6.account_sale_tax_id != null) { //              
                 				row_tLogRow_1[47]=    						    
				                String.valueOf(row6.account_sale_tax_id)			
					          ;	
	    					} //   				
	    					if(row6.account_purchase_tax_id != null) { //              
                 				row_tLogRow_1[48]=    						    
				                String.valueOf(row6.account_purchase_tax_id)			
					          ;	
	    					} //   				
	    					if(row6.tax_calculation_rounding_method != null) { //              
                 				row_tLogRow_1[49]=    						    
				                String.valueOf(row6.tax_calculation_rounding_method)			
					          ;	
	    					} //   				
	    					if(row6.currency_exchange_journal_id != null) { //              
                 				row_tLogRow_1[50]=    						    
				                String.valueOf(row6.currency_exchange_journal_id)			
					          ;	
	    					} //   				
	    					if(row6.income_currency_exchange_account_id != null) { //              
                 				row_tLogRow_1[51]=    						    
				                String.valueOf(row6.income_currency_exchange_account_id)			
					          ;	
	    					} //   				
	    					if(row6.expense_currency_exchange_account_id != null) { //              
                 				row_tLogRow_1[52]=    						    
				                String.valueOf(row6.expense_currency_exchange_account_id)			
					          ;	
	    					} //   				
	    					if(row6.anglo_saxon_accounting != null) { //              
                 				row_tLogRow_1[53]=    						    
				                String.valueOf(row6.anglo_saxon_accounting)			
					          ;	
	    					} //   				
	    					if(row6.property_stock_account_input_categ_id != null) { //              
                 				row_tLogRow_1[54]=    						    
				                String.valueOf(row6.property_stock_account_input_categ_id)			
					          ;	
	    					} //   				
	    					if(row6.property_stock_account_output_categ_id != null) { //              
                 				row_tLogRow_1[55]=    						    
				                String.valueOf(row6.property_stock_account_output_categ_id)			
					          ;	
	    					} //   				
	    					if(row6.property_stock_valuation_account_id != null) { //              
                 				row_tLogRow_1[56]=    						    
				                String.valueOf(row6.property_stock_valuation_account_id)			
					          ;	
	    					} //   				
	    					if(row6.incoterm_id != null) { //              
                 				row_tLogRow_1[57]=    						    
				                String.valueOf(row6.incoterm_id)			
					          ;	
	    					} //   				
	    					if(row6.qr_code != null) { //              
                 				row_tLogRow_1[58]=    						    
				                String.valueOf(row6.qr_code)			
					          ;	
	    					} //   				
	    					if(row6.invoice_is_email != null) { //              
                 				row_tLogRow_1[59]=    						    
				                String.valueOf(row6.invoice_is_email)			
					          ;	
	    					} //   				
	    					if(row6.invoice_is_print != null) { //              
                 				row_tLogRow_1[60]=    						    
				                String.valueOf(row6.invoice_is_print)			
					          ;	
	    					} //   				
	    					if(row6.account_opening_move_id != null) { //              
                 				row_tLogRow_1[61]=    						    
				                String.valueOf(row6.account_opening_move_id)			
					          ;	
	    					} //   				
	    					if(row6.account_opening_date != null) { //              
                 				row_tLogRow_1[62]=    						
								FormatterUtils.format_Date(row6.account_opening_date, "dd-MM-yyyy")
					          ;	
	    					} //   				
	    					if(row6.account_setup_bank_data_state != null) { //              
                 				row_tLogRow_1[63]=    						    
				                String.valueOf(row6.account_setup_bank_data_state)			
					          ;	
	    					} //   				
	    					if(row6.account_setup_fy_data_state != null) { //              
                 				row_tLogRow_1[64]=    						    
				                String.valueOf(row6.account_setup_fy_data_state)			
					          ;	
	    					} //   				
	    					if(row6.account_setup_coa_state != null) { //              
                 				row_tLogRow_1[65]=    						    
				                String.valueOf(row6.account_setup_coa_state)			
					          ;	
	    					} //   				
	    					if(row6.account_setup_taxes_state != null) { //              
                 				row_tLogRow_1[66]=    						    
				                String.valueOf(row6.account_setup_taxes_state)			
					          ;	
	    					} //   				
	    					if(row6.account_onboarding_invoice_layout_state != null) { //              
                 				row_tLogRow_1[67]=    						    
				                String.valueOf(row6.account_onboarding_invoice_layout_state)			
					          ;	
	    					} //   				
	    					if(row6.account_onboarding_create_invoice_state != null) { //              
                 				row_tLogRow_1[68]=    						    
				                String.valueOf(row6.account_onboarding_create_invoice_state)			
					          ;	
	    					} //   				
	    					if(row6.account_onboarding_sale_tax_state != null) { //              
                 				row_tLogRow_1[69]=    						    
				                String.valueOf(row6.account_onboarding_sale_tax_state)			
					          ;	
	    					} //   				
	    					if(row6.account_invoice_onboarding_state != null) { //              
                 				row_tLogRow_1[70]=    						    
				                String.valueOf(row6.account_invoice_onboarding_state)			
					          ;	
	    					} //   				
	    					if(row6.account_dashboard_onboarding_state != null) { //              
                 				row_tLogRow_1[71]=    						    
				                String.valueOf(row6.account_dashboard_onboarding_state)			
					          ;	
	    					} //   				
	    					if(row6.invoice_terms != null) { //              
                 				row_tLogRow_1[72]=    						    
				                String.valueOf(row6.invoice_terms)			
					          ;	
	    					} //   				
	    					if(row6.terms_type != null) { //              
                 				row_tLogRow_1[73]=    						    
				                String.valueOf(row6.terms_type)			
					          ;	
	    					} //   				
	    					if(row6.invoice_terms_html != null) { //              
                 				row_tLogRow_1[74]=    						    
				                String.valueOf(row6.invoice_terms_html)			
					          ;	
	    					} //   				
	    					if(row6.account_setup_bill_state != null) { //              
                 				row_tLogRow_1[75]=    						    
				                String.valueOf(row6.account_setup_bill_state)			
					          ;	
	    					} //   				
	    					if(row6.account_default_pos_receivable_account_id != null) { //              
                 				row_tLogRow_1[76]=    						    
				                String.valueOf(row6.account_default_pos_receivable_account_id)			
					          ;	
	    					} //   				
	    					if(row6.expense_accrual_account_id != null) { //              
                 				row_tLogRow_1[77]=    						    
				                String.valueOf(row6.expense_accrual_account_id)			
					          ;	
	    					} //   				
	    					if(row6.revenue_accrual_account_id != null) { //              
                 				row_tLogRow_1[78]=    						    
				                String.valueOf(row6.revenue_accrual_account_id)			
					          ;	
	    					} //   				
	    					if(row6.automatic_entry_default_journal_id != null) { //              
                 				row_tLogRow_1[79]=    						    
				                String.valueOf(row6.automatic_entry_default_journal_id)			
					          ;	
	    					} //   				
	    					if(row6.account_fiscal_country_id != null) { //              
                 				row_tLogRow_1[80]=    						    
				                String.valueOf(row6.account_fiscal_country_id)			
					          ;	
	    					} //   				
	    					if(row6.tax_exigibility != null) { //              
                 				row_tLogRow_1[81]=    						    
				                String.valueOf(row6.tax_exigibility)			
					          ;	
	    					} //   				
	    					if(row6.tax_cash_basis_journal_id != null) { //              
                 				row_tLogRow_1[82]=    						    
				                String.valueOf(row6.tax_cash_basis_journal_id)			
					          ;	
	    					} //   				
	    					if(row6.account_cash_basis_base_account_id != null) { //              
                 				row_tLogRow_1[83]=    						    
				                String.valueOf(row6.account_cash_basis_base_account_id)			
					          ;	
	    					} //   				
	    					if(row6.payment_acquirer_onboarding_state != null) { //              
                 				row_tLogRow_1[84]=    						    
				                String.valueOf(row6.payment_acquirer_onboarding_state)			
					          ;	
	    					} //   				
	    					if(row6.payment_onboarding_payment_method != null) { //              
                 				row_tLogRow_1[85]=    						    
				                String.valueOf(row6.payment_onboarding_payment_method)			
					          ;	
	    					} //   				
	    					if(row6.invoice_is_snailmail != null) { //              
                 				row_tLogRow_1[86]=    						    
				                String.valueOf(row6.invoice_is_snailmail)			
					          ;	
	    					} //   				
	    					if(row6.portal_confirmation_sign != null) { //              
                 				row_tLogRow_1[87]=    						    
				                String.valueOf(row6.portal_confirmation_sign)			
					          ;	
	    					} //   				
	    					if(row6.portal_confirmation_pay != null) { //              
                 				row_tLogRow_1[88]=    						    
				                String.valueOf(row6.portal_confirmation_pay)			
					          ;	
	    					} //   				
	    					if(row6.quotation_validity_days != null) { //              
                 				row_tLogRow_1[89]=    						    
				                String.valueOf(row6.quotation_validity_days)			
					          ;	
	    					} //   				
	    					if(row6.sale_quotation_onboarding_state != null) { //              
                 				row_tLogRow_1[90]=    						    
				                String.valueOf(row6.sale_quotation_onboarding_state)			
					          ;	
	    					} //   				
	    					if(row6.sale_onboarding_order_confirmation_state != null) { //              
                 				row_tLogRow_1[91]=    						    
				                String.valueOf(row6.sale_onboarding_order_confirmation_state)			
					          ;	
	    					} //   				
	    					if(row6.sale_onboarding_sample_quotation_state != null) { //              
                 				row_tLogRow_1[92]=    						    
				                String.valueOf(row6.sale_onboarding_sample_quotation_state)			
					          ;	
	    					} //   				
	    					if(row6.sale_onboarding_payment_method != null) { //              
                 				row_tLogRow_1[93]=    						    
				                String.valueOf(row6.sale_onboarding_payment_method)			
					          ;	
	    					} //   				
	    					if(row6.sale_order_template_id != null) { //              
                 				row_tLogRow_1[94]=    						    
				                String.valueOf(row6.sale_order_template_id)			
					          ;	
	    					} //   				
	    					if(row6.nomenclature_id != null) { //              
                 				row_tLogRow_1[95]=    						    
				                String.valueOf(row6.nomenclature_id)			
					          ;	
	    					} //   				
	    					if(row6.internal_transit_location_id != null) { //              
                 				row_tLogRow_1[96]=    						    
				                String.valueOf(row6.internal_transit_location_id)			
					          ;	
	    					} //   				
	    					if(row6.stock_move_email_validation != null) { //              
                 				row_tLogRow_1[97]=    						    
				                String.valueOf(row6.stock_move_email_validation)			
					          ;	
	    					} //   				
	    					if(row6.stock_mail_confirmation_template_id != null) { //              
                 				row_tLogRow_1[98]=    						    
				                String.valueOf(row6.stock_mail_confirmation_template_id)			
					          ;	
	    					} //   				
	    					if(row6.annual_inventory_month != null) { //              
                 				row_tLogRow_1[99]=    						    
				                String.valueOf(row6.annual_inventory_month)			
					          ;	
	    					} //
						}
						public void putTableVerticalValue_1(final row6Struct row6,String[] row_tLogRow_1){   				
	    					if(row6.annual_inventory_day != null) { //              
                 				row_tLogRow_1[100]=    						    
				                String.valueOf(row6.annual_inventory_day)			
					          ;	
	    					} //   				
	    					if(row6.stock_move_sms_validation != null) { //              
                 				row_tLogRow_1[101]=    						    
				                String.valueOf(row6.stock_move_sms_validation)			
					          ;	
	    					} //   				
	    					if(row6.stock_sms_confirmation_template_id != null) { //              
                 				row_tLogRow_1[102]=    						    
				                String.valueOf(row6.stock_sms_confirmation_template_id)			
					          ;	
	    					} //   				
	    					if(row6.has_received_warning_stock_sms != null) { //              
                 				row_tLogRow_1[103]=    						    
				                String.valueOf(row6.has_received_warning_stock_sms)			
					          ;	
	    					} //   				
	    					if(row6.point_of_sale_update_stock_quantities != null) { //              
                 				row_tLogRow_1[104]=    						    
				                String.valueOf(row6.point_of_sale_update_stock_quantities)			
					          ;	
	    					} //   				
	    					if(row6.security_lead != null) { //              
                 				row_tLogRow_1[105]=    						
								FormatterUtils.formatUnwithE(row6.security_lead)
					          ;	
	    					} //
						}
			}
			LogRowUtil_tLogRow_1 logRowUtil_tLogRow_1=new LogRowUtil_tLogRow_1();


 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4","row5");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_3{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,row5Struct row5 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row5.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.partner_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.partner_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.currency_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.currency_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row5.sequence = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row5.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
							row5.parent_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
							row5.report_header = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
							row5.report_footer = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							row5.company_details = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
							row5.logo_web = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
							row5.email = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.phone = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"phone", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.phone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
							row5.mobile = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
							row5.company_registry = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 15;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.paperformat_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"paperformat_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.paperformat_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 16;
					
							row5.external_report_layout_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 17;
					
							row5.base_onboarding_company_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 18;
					
							row5.font = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 19;
					
							row5.primary_color = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 20;
					
							row5.secondary_color = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 21;
					
							row5.layout_background = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 22;
					
							row5.create_uid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 23;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 24;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row5.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 25;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.resource_calendar_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"resource_calendar_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.resource_calendar_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 26;
					
							row5.partner_gid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 27;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.iap_enrich_auto_done = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iap_enrich_auto_done", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.iap_enrich_auto_done = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 28;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.snailmail_color = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"snailmail_color", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.snailmail_color = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 29;
					
							row5.snailmail_cover = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 30;
					
							row5.snailmail_duplex = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 31;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.fiscalyear_last_day = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_day", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.fiscalyear_last_day = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 32;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.fiscalyear_last_month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_month", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.fiscalyear_last_month = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 33;
					
							row5.period_lock_date = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 34;
					
							row5.fiscalyear_lock_date = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 35;
					
							row5.tax_lock_date = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 36;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.transfer_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.transfer_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 37;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.expects_chart_of_accounts = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expects_chart_of_accounts", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.expects_chart_of_accounts = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 38;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.chart_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"chart_template_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.chart_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 39;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.bank_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"bank_account_code_prefix", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.bank_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 40;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.cash_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"cash_account_code_prefix", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.cash_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 41;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.default_cash_difference_income_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_income_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.default_cash_difference_income_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 42;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.default_cash_difference_expense_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_expense_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.default_cash_difference_expense_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 43;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_journal_suspense_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_suspense_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_journal_suspense_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 44;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_journal_payment_debit_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_debit_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_journal_payment_debit_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 45;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_journal_payment_credit_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_credit_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_journal_payment_credit_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 46;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.transfer_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_code_prefix", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.transfer_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 47;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_sale_tax_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_sale_tax_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_sale_tax_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 48;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_purchase_tax_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_purchase_tax_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_purchase_tax_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 49;
					
							row5.tax_calculation_rounding_method = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 50;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.currency_exchange_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_exchange_journal_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.currency_exchange_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 51;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.income_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"income_currency_exchange_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.income_currency_exchange_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 52;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.expense_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expense_currency_exchange_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.expense_currency_exchange_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 53;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.anglo_saxon_accounting = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"anglo_saxon_accounting", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.anglo_saxon_accounting = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 54;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.property_stock_account_input_categ_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_input_categ_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.property_stock_account_input_categ_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 55;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.property_stock_account_output_categ_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_output_categ_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.property_stock_account_output_categ_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 56;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.property_stock_valuation_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_valuation_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.property_stock_valuation_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 57;
					
							row5.incoterm_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 58;
					
							row5.qr_code = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 59;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.invoice_is_email = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_email", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.invoice_is_email = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 60;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.invoice_is_print = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_print", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.invoice_is_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 61;
					
							row5.account_opening_move_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 62;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row5.account_opening_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_opening_date", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_opening_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 63;
					
							row5.account_setup_bank_data_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 64;
					
							row5.account_setup_fy_data_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 65;
					
							row5.account_setup_coa_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 66;
					
							row5.account_setup_taxes_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 67;
					
							row5.account_onboarding_invoice_layout_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 68;
					
							row5.account_onboarding_create_invoice_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 69;
					
							row5.account_onboarding_sale_tax_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 70;
					
							row5.account_invoice_onboarding_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 71;
					
							row5.account_dashboard_onboarding_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 72;
					
							row5.invoice_terms = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 73;
					
							row5.terms_type = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 74;
					
							row5.invoice_terms_html = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 75;
					
							row5.account_setup_bill_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 76;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_default_pos_receivable_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_default_pos_receivable_account_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_default_pos_receivable_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 77;
					
							row5.expense_accrual_account_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 78;
					
							row5.revenue_accrual_account_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 79;
					
							row5.automatic_entry_default_journal_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 80;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.account_fiscal_country_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_fiscal_country_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.account_fiscal_country_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 81;
					
							row5.tax_exigibility = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 82;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.tax_cash_basis_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_cash_basis_journal_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.tax_cash_basis_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 83;
					
							row5.account_cash_basis_base_account_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 84;
					
							row5.payment_acquirer_onboarding_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 85;
					
							row5.payment_onboarding_payment_method = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 86;
					
							row5.invoice_is_snailmail = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 87;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.portal_confirmation_sign = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_sign", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.portal_confirmation_sign = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 88;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.portal_confirmation_pay = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_pay", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.portal_confirmation_pay = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 89;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.quotation_validity_days = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"quotation_validity_days", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.quotation_validity_days = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 90;
					
							row5.sale_quotation_onboarding_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 91;
					
							row5.sale_onboarding_order_confirmation_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 92;
					
							row5.sale_onboarding_sample_quotation_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 93;
					
							row5.sale_onboarding_payment_method = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 94;
					
							row5.sale_order_template_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 95;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.nomenclature_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nomenclature_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.nomenclature_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 96;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.internal_transit_location_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"internal_transit_location_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.internal_transit_location_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 97;
					
							row5.stock_move_email_validation = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 98;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.stock_mail_confirmation_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_mail_confirmation_template_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.stock_mail_confirmation_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 99;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.annual_inventory_month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_month", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.annual_inventory_month = null;
								
							
						}
					
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,row5Struct row5 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 100;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.annual_inventory_day = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_day", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.annual_inventory_day = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 101;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.stock_move_sms_validation = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_move_sms_validation", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.stock_move_sms_validation = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 102;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.stock_sms_confirmation_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_sms_confirmation_template_id", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.stock_sms_confirmation_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 103;
					
							row5.has_received_warning_stock_sms = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 104;
					
							row5.point_of_sale_update_stock_quantities = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 105;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row5.security_lead = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"security_lead", "row5", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									row5.security_lead = null;
								
							
						}
					
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3,row5Struct row5 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_3,row5 );
					
						valueToConn_1(fid_tFileInputDelimited_3,row5 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_3 rowHelper_tFileInputDelimited_3  = new RowHelper_tFileInputDelimited_3();
			
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = context.temp_path+"/stage.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row5 = new row5Struct();
									try {
										
			rowHelper_tFileInputDelimited_3.valueToConn(fid_tFileInputDelimited_3, row5 );
		
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row5"
									
							);
						}
						
//////////
 

// for output
			row6 = new row6Struct();
								
			row6.id = row5.id;								
			row6.name = row5.name;								
			row6.partner_id = row5.partner_id;								
			row6.currency_id = row5.currency_id;								
			row6.sequence = row5.sequence;								
			row6.create_date = row5.create_date;								
			row6.parent_id = row5.parent_id;								
			row6.report_header = row5.report_header;								
			row6.report_footer = row5.report_footer;								
			row6.company_details = row5.company_details;								
			row6.logo_web = row5.logo_web;								
			row6.email = row5.email;								
			row6.phone = row5.phone;								
			row6.mobile = row5.mobile;								
			row6.company_registry = row5.company_registry;								
			row6.paperformat_id = row5.paperformat_id;								
			row6.external_report_layout_id = row5.external_report_layout_id;								
			row6.base_onboarding_company_state = row5.base_onboarding_company_state;								
			row6.font = row5.font;								
			row6.primary_color = row5.primary_color;								
			row6.secondary_color = row5.secondary_color;								
			row6.layout_background = row5.layout_background;								
			row6.create_uid = row5.create_uid;								
			row6.write_uid = row5.write_uid;								
			row6.write_date = row5.write_date;								
			row6.resource_calendar_id = row5.resource_calendar_id;								
			row6.partner_gid = row5.partner_gid;								
			row6.iap_enrich_auto_done = row5.iap_enrich_auto_done;								
			row6.snailmail_color = row5.snailmail_color;								
			row6.snailmail_cover = row5.snailmail_cover;								
			row6.snailmail_duplex = row5.snailmail_duplex;								
			row6.fiscalyear_last_day = row5.fiscalyear_last_day;								
			row6.fiscalyear_last_month = row5.fiscalyear_last_month;								
			row6.period_lock_date = row5.period_lock_date;								
			row6.fiscalyear_lock_date = row5.fiscalyear_lock_date;								
			row6.tax_lock_date = row5.tax_lock_date;								
			row6.transfer_account_id = row5.transfer_account_id;								
			row6.expects_chart_of_accounts = row5.expects_chart_of_accounts;								
			row6.chart_template_id = row5.chart_template_id;								
			row6.bank_account_code_prefix = row5.bank_account_code_prefix;								
			row6.cash_account_code_prefix = row5.cash_account_code_prefix;								
			row6.default_cash_difference_income_account_id = row5.default_cash_difference_income_account_id;								
			row6.default_cash_difference_expense_account_id = row5.default_cash_difference_expense_account_id;								
			row6.account_journal_suspense_account_id = row5.account_journal_suspense_account_id;								
			row6.account_journal_payment_debit_account_id = row5.account_journal_payment_debit_account_id;								
			row6.account_journal_payment_credit_account_id = row5.account_journal_payment_credit_account_id;								
			row6.transfer_account_code_prefix = row5.transfer_account_code_prefix;								
			row6.account_sale_tax_id = row5.account_sale_tax_id;								
			row6.account_purchase_tax_id = row5.account_purchase_tax_id;								
			row6.tax_calculation_rounding_method = row5.tax_calculation_rounding_method;								
			row6.currency_exchange_journal_id = row5.currency_exchange_journal_id;								
			row6.income_currency_exchange_account_id = row5.income_currency_exchange_account_id;								
			row6.expense_currency_exchange_account_id = row5.expense_currency_exchange_account_id;								
			row6.anglo_saxon_accounting = row5.anglo_saxon_accounting;								
			row6.property_stock_account_input_categ_id = row5.property_stock_account_input_categ_id;								
			row6.property_stock_account_output_categ_id = row5.property_stock_account_output_categ_id;								
			row6.property_stock_valuation_account_id = row5.property_stock_valuation_account_id;								
			row6.incoterm_id = row5.incoterm_id;								
			row6.qr_code = row5.qr_code;								
			row6.invoice_is_email = row5.invoice_is_email;								
			row6.invoice_is_print = row5.invoice_is_print;								
			row6.account_opening_move_id = row5.account_opening_move_id;								
			row6.account_opening_date = row5.account_opening_date;								
			row6.account_setup_bank_data_state = row5.account_setup_bank_data_state;								
			row6.account_setup_fy_data_state = row5.account_setup_fy_data_state;								
			row6.account_setup_coa_state = row5.account_setup_coa_state;								
			row6.account_setup_taxes_state = row5.account_setup_taxes_state;								
			row6.account_onboarding_invoice_layout_state = row5.account_onboarding_invoice_layout_state;								
			row6.account_onboarding_create_invoice_state = row5.account_onboarding_create_invoice_state;								
			row6.account_onboarding_sale_tax_state = row5.account_onboarding_sale_tax_state;								
			row6.account_invoice_onboarding_state = row5.account_invoice_onboarding_state;								
			row6.account_dashboard_onboarding_state = row5.account_dashboard_onboarding_state;								
			row6.invoice_terms = row5.invoice_terms;								
			row6.terms_type = row5.terms_type;								
			row6.invoice_terms_html = row5.invoice_terms_html;								
			row6.account_setup_bill_state = row5.account_setup_bill_state;								
			row6.account_default_pos_receivable_account_id = row5.account_default_pos_receivable_account_id;								
			row6.expense_accrual_account_id = row5.expense_accrual_account_id;								
			row6.revenue_accrual_account_id = row5.revenue_accrual_account_id;								
			row6.automatic_entry_default_journal_id = row5.automatic_entry_default_journal_id;								
			row6.account_fiscal_country_id = row5.account_fiscal_country_id;								
			row6.tax_exigibility = row5.tax_exigibility;								
			row6.tax_cash_basis_journal_id = row5.tax_cash_basis_journal_id;								
			row6.account_cash_basis_base_account_id = row5.account_cash_basis_base_account_id;								
			row6.payment_acquirer_onboarding_state = row5.payment_acquirer_onboarding_state;								
			row6.payment_onboarding_payment_method = row5.payment_onboarding_payment_method;								
			row6.invoice_is_snailmail = row5.invoice_is_snailmail;								
			row6.portal_confirmation_sign = row5.portal_confirmation_sign;								
			row6.portal_confirmation_pay = row5.portal_confirmation_pay;								
			row6.quotation_validity_days = row5.quotation_validity_days;								
			row6.sale_quotation_onboarding_state = row5.sale_quotation_onboarding_state;								
			row6.sale_onboarding_order_confirmation_state = row5.sale_onboarding_order_confirmation_state;								
			row6.sale_onboarding_sample_quotation_state = row5.sale_onboarding_sample_quotation_state;								
			row6.sale_onboarding_payment_method = row5.sale_onboarding_payment_method;								
			row6.sale_order_template_id = row5.sale_order_template_id;								
			row6.nomenclature_id = row5.nomenclature_id;								
			row6.internal_transit_location_id = row5.internal_transit_location_id;								
			row6.stock_move_email_validation = row5.stock_move_email_validation;								
			row6.stock_mail_confirmation_template_id = row5.stock_mail_confirmation_template_id;								
			row6.annual_inventory_month = row5.annual_inventory_month;								
			row6.annual_inventory_day = row5.annual_inventory_day;								
			row6.stock_move_sms_validation = row5.stock_move_sms_validation;								
			row6.stock_sms_confirmation_template_id = row5.stock_sms_confirmation_template_id;								
			row6.has_received_warning_stock_sms = row5.has_received_warning_stock_sms;								
			row6.point_of_sale_update_stock_quantities = row5.point_of_sale_update_stock_quantities;								
			row6.security_lead = row5.security_lead;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[106];

						logRowUtil_tLogRow_1.putTableVerticalValue_0(row6,row_tLogRow_1);
						logRowUtil_tLogRow_1.putTableVerticalValue_1(row6,row_tLogRow_1); 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row7 = row6;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_0(row7,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_1(row7,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_2{
                                public void putValue_0(final out1Struct row3,StringBuilder sb_tFileOutputDelimited_2,final String OUT_DELIM_tFileOutputDelimited_2)throws java.lang.Exception {
                                if(row3.id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.partner_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.partner_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.currency_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.currency_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.sequence != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.sequence
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.create_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row3.create_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.parent_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.parent_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.report_header != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.report_header
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.report_footer != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.report_footer
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.company_details != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.company_details
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.logo_web != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.logo_web
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.email != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.email
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.phone != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.phone
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.mobile != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.mobile
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.company_registry != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.company_registry
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.paperformat_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.paperformat_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.external_report_layout_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.external_report_layout_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.base_onboarding_company_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.base_onboarding_company_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.font != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.font
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.primary_color != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.primary_color
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.secondary_color != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.secondary_color
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.layout_background != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.layout_background
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.create_uid != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.create_uid
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.write_uid != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.write_uid
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.write_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row3.write_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.resource_calendar_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.resource_calendar_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.partner_gid != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.partner_gid
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.iap_enrich_auto_done != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.iap_enrich_auto_done
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.snailmail_color != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.snailmail_color
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.snailmail_cover != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.snailmail_cover
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.snailmail_duplex != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.snailmail_duplex
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.fiscalyear_last_day != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.fiscalyear_last_day
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.fiscalyear_last_month != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.fiscalyear_last_month
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.period_lock_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.period_lock_date
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.fiscalyear_lock_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.fiscalyear_lock_date
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.tax_lock_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.tax_lock_date
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.transfer_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.transfer_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.expects_chart_of_accounts != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.expects_chart_of_accounts
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.chart_template_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.chart_template_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.bank_account_code_prefix != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.bank_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.cash_account_code_prefix != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.cash_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.default_cash_difference_income_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.default_cash_difference_income_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.default_cash_difference_expense_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.default_cash_difference_expense_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_journal_suspense_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_journal_suspense_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_journal_payment_debit_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_journal_payment_debit_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_journal_payment_credit_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_journal_payment_credit_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.transfer_account_code_prefix != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.transfer_account_code_prefix
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_sale_tax_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_sale_tax_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_purchase_tax_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_purchase_tax_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.tax_calculation_rounding_method != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.tax_calculation_rounding_method
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.currency_exchange_journal_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.currency_exchange_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.income_currency_exchange_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.income_currency_exchange_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.expense_currency_exchange_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.expense_currency_exchange_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.anglo_saxon_accounting != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.anglo_saxon_accounting
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.property_stock_account_input_categ_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.property_stock_account_input_categ_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.property_stock_account_output_categ_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.property_stock_account_output_categ_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.property_stock_valuation_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.property_stock_valuation_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.incoterm_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.incoterm_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.qr_code != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.qr_code
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.invoice_is_email != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.invoice_is_email
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.invoice_is_print != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.invoice_is_print
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_opening_move_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_opening_move_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_opening_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row3.account_opening_date, "dd-MM-yyyy")
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_setup_bank_data_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_setup_bank_data_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_setup_fy_data_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_setup_fy_data_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_setup_coa_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_setup_coa_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_setup_taxes_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_setup_taxes_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_onboarding_invoice_layout_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_onboarding_invoice_layout_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_onboarding_create_invoice_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_onboarding_create_invoice_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_onboarding_sale_tax_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_onboarding_sale_tax_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_invoice_onboarding_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_invoice_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_dashboard_onboarding_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_dashboard_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.invoice_terms != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.invoice_terms
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.terms_type != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.terms_type
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.invoice_terms_html != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.invoice_terms_html
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_setup_bill_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_setup_bill_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_default_pos_receivable_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_default_pos_receivable_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.expense_accrual_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.expense_accrual_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.revenue_accrual_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.revenue_accrual_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.automatic_entry_default_journal_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.automatic_entry_default_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_fiscal_country_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_fiscal_country_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.tax_exigibility != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.tax_exigibility
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.tax_cash_basis_journal_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.tax_cash_basis_journal_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.account_cash_basis_base_account_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.account_cash_basis_base_account_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.payment_acquirer_onboarding_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.payment_acquirer_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.payment_onboarding_payment_method != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.payment_onboarding_payment_method
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.invoice_is_snailmail != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.invoice_is_snailmail
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.portal_confirmation_sign != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.portal_confirmation_sign
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.portal_confirmation_pay != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.portal_confirmation_pay
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.quotation_validity_days != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.quotation_validity_days
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                }
                                public void putValue_1(final out1Struct row3,StringBuilder sb_tFileOutputDelimited_2,final String OUT_DELIM_tFileOutputDelimited_2)throws java.lang.Exception {
                                if(row3.sale_quotation_onboarding_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.sale_quotation_onboarding_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.sale_onboarding_order_confirmation_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.sale_onboarding_order_confirmation_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.sale_onboarding_sample_quotation_state != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.sale_onboarding_sample_quotation_state
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.sale_onboarding_payment_method != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.sale_onboarding_payment_method
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.sale_order_template_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.sale_order_template_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.nomenclature_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.nomenclature_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.internal_transit_location_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.internal_transit_location_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.stock_move_email_validation != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.stock_move_email_validation
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.stock_mail_confirmation_template_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.stock_mail_confirmation_template_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.annual_inventory_month != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.annual_inventory_month
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.annual_inventory_day != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.annual_inventory_day
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.stock_move_sms_validation != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.stock_move_sms_validation
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.stock_sms_confirmation_template_id != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.stock_sms_confirmation_template_id
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.has_received_warning_stock_sms != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.has_received_warning_stock_sms
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.point_of_sale_update_stock_quantities != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.point_of_sale_update_stock_quantities
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row3.security_lead != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row3.security_lead
                                );
                                }
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_2 fileOutputDelimitedUtil_tFileOutputDelimited_2=new FileOutputDelimitedUtil_tFileOutputDelimited_2();
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.temp_path+"/delta.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[106];

        public void addRow(String[] row) {

            for (int i = 0; i < 106; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 105 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 105 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%73$-");
        			        sbformat.append(colLengths[72]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%74$-");
        			        sbformat.append(colLengths[73]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%75$-");
        			        sbformat.append(colLengths[74]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%76$-");
        			        sbformat.append(colLengths[75]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%77$-");
        			        sbformat.append(colLengths[76]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%78$-");
        			        sbformat.append(colLengths[77]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%79$-");
        			        sbformat.append(colLengths[78]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%80$-");
        			        sbformat.append(colLengths[79]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%81$-");
        			        sbformat.append(colLengths[80]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%82$-");
        			        sbformat.append(colLengths[81]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%83$-");
        			        sbformat.append(colLengths[82]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%84$-");
        			        sbformat.append(colLengths[83]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%85$-");
        			        sbformat.append(colLengths[84]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%86$-");
        			        sbformat.append(colLengths[85]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%87$-");
        			        sbformat.append(colLengths[86]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%88$-");
        			        sbformat.append(colLengths[87]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%89$-");
        			        sbformat.append(colLengths[88]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%90$-");
        			        sbformat.append(colLengths[89]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%91$-");
        			        sbformat.append(colLengths[90]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%92$-");
        			        sbformat.append(colLengths[91]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%93$-");
        			        sbformat.append(colLengths[92]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%94$-");
        			        sbformat.append(colLengths[93]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%95$-");
        			        sbformat.append(colLengths[94]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%96$-");
        			        sbformat.append(colLengths[95]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%97$-");
        			        sbformat.append(colLengths[96]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%98$-");
        			        sbformat.append(colLengths[97]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%99$-");
        			        sbformat.append(colLengths[98]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%100$-");
        			        sbformat.append(colLengths[99]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%101$-");
        			        sbformat.append(colLengths[100]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%102$-");
        			        sbformat.append(colLengths[101]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%103$-");
        			        sbformat.append(colLengths[102]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%104$-");
        			        sbformat.append(colLengths[103]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%105$-");
        			        sbformat.append(colLengths[104]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%106$-");
        			        sbformat.append(colLengths[105]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[77] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[78] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[79] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[80] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[81] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[82] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[83] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[84] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[85] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[86] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[87] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[88] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[89] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[90] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[91] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[92] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[93] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[94] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[95] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[96] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[97] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[98] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[99] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[100] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[101] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[102] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[103] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[104] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[105] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"id","name","partner_id","currency_id","sequence","create_date","parent_id","report_header","report_footer","company_details","logo_web","email","phone","mobile","company_registry","paperformat_id","external_report_layout_id","base_onboarding_company_state","font","primary_color","secondary_color","layout_background","create_uid","write_uid","write_date","resource_calendar_id","partner_gid","iap_enrich_auto_done","snailmail_color","snailmail_cover","snailmail_duplex","fiscalyear_last_day","fiscalyear_last_month","period_lock_date","fiscalyear_lock_date","tax_lock_date","transfer_account_id","expects_chart_of_accounts","chart_template_id","bank_account_code_prefix","cash_account_code_prefix","default_cash_difference_income_account_id","default_cash_difference_expense_account_id","account_journal_suspense_account_id","account_journal_payment_debit_account_id","account_journal_payment_credit_account_id","transfer_account_code_prefix","account_sale_tax_id","account_purchase_tax_id","tax_calculation_rounding_method","currency_exchange_journal_id","income_currency_exchange_account_id","expense_currency_exchange_account_id","anglo_saxon_accounting","property_stock_account_input_categ_id","property_stock_account_output_categ_id","property_stock_valuation_account_id","incoterm_id","qr_code","invoice_is_email","invoice_is_print","account_opening_move_id","account_opening_date","account_setup_bank_data_state","account_setup_fy_data_state","account_setup_coa_state","account_setup_taxes_state","account_onboarding_invoice_layout_state","account_onboarding_create_invoice_state","account_onboarding_sale_tax_state","account_invoice_onboarding_state","account_dashboard_onboarding_state","invoice_terms","terms_type","invoice_terms_html","account_setup_bill_state","account_default_pos_receivable_account_id","expense_accrual_account_id","revenue_accrual_account_id","automatic_entry_default_journal_id","account_fiscal_country_id","tax_exigibility","tax_cash_basis_journal_id","account_cash_basis_base_account_id","payment_acquirer_onboarding_state","payment_onboarding_payment_method","invoice_is_snailmail","portal_confirmation_sign","portal_confirmation_pay","quotation_validity_days","sale_quotation_onboarding_state","sale_onboarding_order_confirmation_state","sale_onboarding_sample_quotation_state","sale_onboarding_payment_method","sale_order_template_id","nomenclature_id","internal_transit_location_id","stock_move_email_validation","stock_mail_confirmation_template_id","annual_inventory_month","annual_inventory_day","stock_move_sms_validation","stock_sms_confirmation_template_id","has_received_warning_stock_sms","point_of_sale_update_stock_quantities","security_lead",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			

				class LogRowUtil_tLogRow_2{
						public void putTableVerticalValue_0(final out1Struct out1,String[] row_tLogRow_2){   				
	    					if(out1.id != null) { //              
                 				row_tLogRow_2[0]=    						    
				                String.valueOf(out1.id)			
					          ;	
	    					} //   				
	    					if(out1.name != null) { //              
                 				row_tLogRow_2[1]=    						    
				                String.valueOf(out1.name)			
					          ;	
	    					} //   				
	    					if(out1.partner_id != null) { //              
                 				row_tLogRow_2[2]=    						    
				                String.valueOf(out1.partner_id)			
					          ;	
	    					} //   				
	    					if(out1.currency_id != null) { //              
                 				row_tLogRow_2[3]=    						    
				                String.valueOf(out1.currency_id)			
					          ;	
	    					} //   				
	    					if(out1.sequence != null) { //              
                 				row_tLogRow_2[4]=    						    
				                String.valueOf(out1.sequence)			
					          ;	
	    					} //   				
	    					if(out1.create_date != null) { //              
                 				row_tLogRow_2[5]=    						
								FormatterUtils.format_Date(out1.create_date, "dd-MM-yyyy")
					          ;	
	    					} //   				
	    					if(out1.parent_id != null) { //              
                 				row_tLogRow_2[6]=    						    
				                String.valueOf(out1.parent_id)			
					          ;	
	    					} //   				
	    					if(out1.report_header != null) { //              
                 				row_tLogRow_2[7]=    						    
				                String.valueOf(out1.report_header)			
					          ;	
	    					} //   				
	    					if(out1.report_footer != null) { //              
                 				row_tLogRow_2[8]=    						    
				                String.valueOf(out1.report_footer)			
					          ;	
	    					} //   				
	    					if(out1.company_details != null) { //              
                 				row_tLogRow_2[9]=    						    
				                String.valueOf(out1.company_details)			
					          ;	
	    					} //   				
	    					if(out1.logo_web != null) { //              
                 				row_tLogRow_2[10]=    						    
				                String.valueOf(out1.logo_web)			
					          ;	
	    					} //   				
	    					if(out1.email != null) { //              
                 				row_tLogRow_2[11]=    						    
				                String.valueOf(out1.email)			
					          ;	
	    					} //   				
	    					if(out1.phone != null) { //              
                 				row_tLogRow_2[12]=    						    
				                String.valueOf(out1.phone)			
					          ;	
	    					} //   				
	    					if(out1.mobile != null) { //              
                 				row_tLogRow_2[13]=    						    
				                String.valueOf(out1.mobile)			
					          ;	
	    					} //   				
	    					if(out1.company_registry != null) { //              
                 				row_tLogRow_2[14]=    						    
				                String.valueOf(out1.company_registry)			
					          ;	
	    					} //   				
	    					if(out1.paperformat_id != null) { //              
                 				row_tLogRow_2[15]=    						    
				                String.valueOf(out1.paperformat_id)			
					          ;	
	    					} //   				
	    					if(out1.external_report_layout_id != null) { //              
                 				row_tLogRow_2[16]=    						    
				                String.valueOf(out1.external_report_layout_id)			
					          ;	
	    					} //   				
	    					if(out1.base_onboarding_company_state != null) { //              
                 				row_tLogRow_2[17]=    						    
				                String.valueOf(out1.base_onboarding_company_state)			
					          ;	
	    					} //   				
	    					if(out1.font != null) { //              
                 				row_tLogRow_2[18]=    						    
				                String.valueOf(out1.font)			
					          ;	
	    					} //   				
	    					if(out1.primary_color != null) { //              
                 				row_tLogRow_2[19]=    						    
				                String.valueOf(out1.primary_color)			
					          ;	
	    					} //   				
	    					if(out1.secondary_color != null) { //              
                 				row_tLogRow_2[20]=    						    
				                String.valueOf(out1.secondary_color)			
					          ;	
	    					} //   				
	    					if(out1.layout_background != null) { //              
                 				row_tLogRow_2[21]=    						    
				                String.valueOf(out1.layout_background)			
					          ;	
	    					} //   				
	    					if(out1.create_uid != null) { //              
                 				row_tLogRow_2[22]=    						    
				                String.valueOf(out1.create_uid)			
					          ;	
	    					} //   				
	    					if(out1.write_uid != null) { //              
                 				row_tLogRow_2[23]=    						    
				                String.valueOf(out1.write_uid)			
					          ;	
	    					} //   				
	    					if(out1.write_date != null) { //              
                 				row_tLogRow_2[24]=    						
								FormatterUtils.format_Date(out1.write_date, "dd-MM-yyyy")
					          ;	
	    					} //   				
	    					if(out1.resource_calendar_id != null) { //              
                 				row_tLogRow_2[25]=    						    
				                String.valueOf(out1.resource_calendar_id)			
					          ;	
	    					} //   				
	    					if(out1.partner_gid != null) { //              
                 				row_tLogRow_2[26]=    						    
				                String.valueOf(out1.partner_gid)			
					          ;	
	    					} //   				
	    					if(out1.iap_enrich_auto_done != null) { //              
                 				row_tLogRow_2[27]=    						    
				                String.valueOf(out1.iap_enrich_auto_done)			
					          ;	
	    					} //   				
	    					if(out1.snailmail_color != null) { //              
                 				row_tLogRow_2[28]=    						    
				                String.valueOf(out1.snailmail_color)			
					          ;	
	    					} //   				
	    					if(out1.snailmail_cover != null) { //              
                 				row_tLogRow_2[29]=    						    
				                String.valueOf(out1.snailmail_cover)			
					          ;	
	    					} //   				
	    					if(out1.snailmail_duplex != null) { //              
                 				row_tLogRow_2[30]=    						    
				                String.valueOf(out1.snailmail_duplex)			
					          ;	
	    					} //   				
	    					if(out1.fiscalyear_last_day != null) { //              
                 				row_tLogRow_2[31]=    						    
				                String.valueOf(out1.fiscalyear_last_day)			
					          ;	
	    					} //   				
	    					if(out1.fiscalyear_last_month != null) { //              
                 				row_tLogRow_2[32]=    						    
				                String.valueOf(out1.fiscalyear_last_month)			
					          ;	
	    					} //   				
	    					if(out1.period_lock_date != null) { //              
                 				row_tLogRow_2[33]=    						    
				                String.valueOf(out1.period_lock_date)			
					          ;	
	    					} //   				
	    					if(out1.fiscalyear_lock_date != null) { //              
                 				row_tLogRow_2[34]=    						    
				                String.valueOf(out1.fiscalyear_lock_date)			
					          ;	
	    					} //   				
	    					if(out1.tax_lock_date != null) { //              
                 				row_tLogRow_2[35]=    						    
				                String.valueOf(out1.tax_lock_date)			
					          ;	
	    					} //   				
	    					if(out1.transfer_account_id != null) { //              
                 				row_tLogRow_2[36]=    						    
				                String.valueOf(out1.transfer_account_id)			
					          ;	
	    					} //   				
	    					if(out1.expects_chart_of_accounts != null) { //              
                 				row_tLogRow_2[37]=    						    
				                String.valueOf(out1.expects_chart_of_accounts)			
					          ;	
	    					} //   				
	    					if(out1.chart_template_id != null) { //              
                 				row_tLogRow_2[38]=    						    
				                String.valueOf(out1.chart_template_id)			
					          ;	
	    					} //   				
	    					if(out1.bank_account_code_prefix != null) { //              
                 				row_tLogRow_2[39]=    						    
				                String.valueOf(out1.bank_account_code_prefix)			
					          ;	
	    					} //   				
	    					if(out1.cash_account_code_prefix != null) { //              
                 				row_tLogRow_2[40]=    						    
				                String.valueOf(out1.cash_account_code_prefix)			
					          ;	
	    					} //   				
	    					if(out1.default_cash_difference_income_account_id != null) { //              
                 				row_tLogRow_2[41]=    						    
				                String.valueOf(out1.default_cash_difference_income_account_id)			
					          ;	
	    					} //   				
	    					if(out1.default_cash_difference_expense_account_id != null) { //              
                 				row_tLogRow_2[42]=    						    
				                String.valueOf(out1.default_cash_difference_expense_account_id)			
					          ;	
	    					} //   				
	    					if(out1.account_journal_suspense_account_id != null) { //              
                 				row_tLogRow_2[43]=    						    
				                String.valueOf(out1.account_journal_suspense_account_id)			
					          ;	
	    					} //   				
	    					if(out1.account_journal_payment_debit_account_id != null) { //              
                 				row_tLogRow_2[44]=    						    
				                String.valueOf(out1.account_journal_payment_debit_account_id)			
					          ;	
	    					} //   				
	    					if(out1.account_journal_payment_credit_account_id != null) { //              
                 				row_tLogRow_2[45]=    						    
				                String.valueOf(out1.account_journal_payment_credit_account_id)			
					          ;	
	    					} //   				
	    					if(out1.transfer_account_code_prefix != null) { //              
                 				row_tLogRow_2[46]=    						    
				                String.valueOf(out1.transfer_account_code_prefix)			
					          ;	
	    					} //   				
	    					if(out1.account_sale_tax_id != null) { //              
                 				row_tLogRow_2[47]=    						    
				                String.valueOf(out1.account_sale_tax_id)			
					          ;	
	    					} //   				
	    					if(out1.account_purchase_tax_id != null) { //              
                 				row_tLogRow_2[48]=    						    
				                String.valueOf(out1.account_purchase_tax_id)			
					          ;	
	    					} //   				
	    					if(out1.tax_calculation_rounding_method != null) { //              
                 				row_tLogRow_2[49]=    						    
				                String.valueOf(out1.tax_calculation_rounding_method)			
					          ;	
	    					} //   				
	    					if(out1.currency_exchange_journal_id != null) { //              
                 				row_tLogRow_2[50]=    						    
				                String.valueOf(out1.currency_exchange_journal_id)			
					          ;	
	    					} //   				
	    					if(out1.income_currency_exchange_account_id != null) { //              
                 				row_tLogRow_2[51]=    						    
				                String.valueOf(out1.income_currency_exchange_account_id)			
					          ;	
	    					} //   				
	    					if(out1.expense_currency_exchange_account_id != null) { //              
                 				row_tLogRow_2[52]=    						    
				                String.valueOf(out1.expense_currency_exchange_account_id)			
					          ;	
	    					} //   				
	    					if(out1.anglo_saxon_accounting != null) { //              
                 				row_tLogRow_2[53]=    						    
				                String.valueOf(out1.anglo_saxon_accounting)			
					          ;	
	    					} //   				
	    					if(out1.property_stock_account_input_categ_id != null) { //              
                 				row_tLogRow_2[54]=    						    
				                String.valueOf(out1.property_stock_account_input_categ_id)			
					          ;	
	    					} //   				
	    					if(out1.property_stock_account_output_categ_id != null) { //              
                 				row_tLogRow_2[55]=    						    
				                String.valueOf(out1.property_stock_account_output_categ_id)			
					          ;	
	    					} //   				
	    					if(out1.property_stock_valuation_account_id != null) { //              
                 				row_tLogRow_2[56]=    						    
				                String.valueOf(out1.property_stock_valuation_account_id)			
					          ;	
	    					} //   				
	    					if(out1.incoterm_id != null) { //              
                 				row_tLogRow_2[57]=    						    
				                String.valueOf(out1.incoterm_id)			
					          ;	
	    					} //   				
	    					if(out1.qr_code != null) { //              
                 				row_tLogRow_2[58]=    						    
				                String.valueOf(out1.qr_code)			
					          ;	
	    					} //   				
	    					if(out1.invoice_is_email != null) { //              
                 				row_tLogRow_2[59]=    						    
				                String.valueOf(out1.invoice_is_email)			
					          ;	
	    					} //   				
	    					if(out1.invoice_is_print != null) { //              
                 				row_tLogRow_2[60]=    						    
				                String.valueOf(out1.invoice_is_print)			
					          ;	
	    					} //   				
	    					if(out1.account_opening_move_id != null) { //              
                 				row_tLogRow_2[61]=    						    
				                String.valueOf(out1.account_opening_move_id)			
					          ;	
	    					} //   				
	    					if(out1.account_opening_date != null) { //              
                 				row_tLogRow_2[62]=    						
								FormatterUtils.format_Date(out1.account_opening_date, "dd-MM-yyyy")
					          ;	
	    					} //   				
	    					if(out1.account_setup_bank_data_state != null) { //              
                 				row_tLogRow_2[63]=    						    
				                String.valueOf(out1.account_setup_bank_data_state)			
					          ;	
	    					} //   				
	    					if(out1.account_setup_fy_data_state != null) { //              
                 				row_tLogRow_2[64]=    						    
				                String.valueOf(out1.account_setup_fy_data_state)			
					          ;	
	    					} //   				
	    					if(out1.account_setup_coa_state != null) { //              
                 				row_tLogRow_2[65]=    						    
				                String.valueOf(out1.account_setup_coa_state)			
					          ;	
	    					} //   				
	    					if(out1.account_setup_taxes_state != null) { //              
                 				row_tLogRow_2[66]=    						    
				                String.valueOf(out1.account_setup_taxes_state)			
					          ;	
	    					} //   				
	    					if(out1.account_onboarding_invoice_layout_state != null) { //              
                 				row_tLogRow_2[67]=    						    
				                String.valueOf(out1.account_onboarding_invoice_layout_state)			
					          ;	
	    					} //   				
	    					if(out1.account_onboarding_create_invoice_state != null) { //              
                 				row_tLogRow_2[68]=    						    
				                String.valueOf(out1.account_onboarding_create_invoice_state)			
					          ;	
	    					} //   				
	    					if(out1.account_onboarding_sale_tax_state != null) { //              
                 				row_tLogRow_2[69]=    						    
				                String.valueOf(out1.account_onboarding_sale_tax_state)			
					          ;	
	    					} //   				
	    					if(out1.account_invoice_onboarding_state != null) { //              
                 				row_tLogRow_2[70]=    						    
				                String.valueOf(out1.account_invoice_onboarding_state)			
					          ;	
	    					} //   				
	    					if(out1.account_dashboard_onboarding_state != null) { //              
                 				row_tLogRow_2[71]=    						    
				                String.valueOf(out1.account_dashboard_onboarding_state)			
					          ;	
	    					} //   				
	    					if(out1.invoice_terms != null) { //              
                 				row_tLogRow_2[72]=    						    
				                String.valueOf(out1.invoice_terms)			
					          ;	
	    					} //   				
	    					if(out1.terms_type != null) { //              
                 				row_tLogRow_2[73]=    						    
				                String.valueOf(out1.terms_type)			
					          ;	
	    					} //   				
	    					if(out1.invoice_terms_html != null) { //              
                 				row_tLogRow_2[74]=    						    
				                String.valueOf(out1.invoice_terms_html)			
					          ;	
	    					} //   				
	    					if(out1.account_setup_bill_state != null) { //              
                 				row_tLogRow_2[75]=    						    
				                String.valueOf(out1.account_setup_bill_state)			
					          ;	
	    					} //   				
	    					if(out1.account_default_pos_receivable_account_id != null) { //              
                 				row_tLogRow_2[76]=    						    
				                String.valueOf(out1.account_default_pos_receivable_account_id)			
					          ;	
	    					} //   				
	    					if(out1.expense_accrual_account_id != null) { //              
                 				row_tLogRow_2[77]=    						    
				                String.valueOf(out1.expense_accrual_account_id)			
					          ;	
	    					} //   				
	    					if(out1.revenue_accrual_account_id != null) { //              
                 				row_tLogRow_2[78]=    						    
				                String.valueOf(out1.revenue_accrual_account_id)			
					          ;	
	    					} //   				
	    					if(out1.automatic_entry_default_journal_id != null) { //              
                 				row_tLogRow_2[79]=    						    
				                String.valueOf(out1.automatic_entry_default_journal_id)			
					          ;	
	    					} //   				
	    					if(out1.account_fiscal_country_id != null) { //              
                 				row_tLogRow_2[80]=    						    
				                String.valueOf(out1.account_fiscal_country_id)			
					          ;	
	    					} //   				
	    					if(out1.tax_exigibility != null) { //              
                 				row_tLogRow_2[81]=    						    
				                String.valueOf(out1.tax_exigibility)			
					          ;	
	    					} //   				
	    					if(out1.tax_cash_basis_journal_id != null) { //              
                 				row_tLogRow_2[82]=    						    
				                String.valueOf(out1.tax_cash_basis_journal_id)			
					          ;	
	    					} //   				
	    					if(out1.account_cash_basis_base_account_id != null) { //              
                 				row_tLogRow_2[83]=    						    
				                String.valueOf(out1.account_cash_basis_base_account_id)			
					          ;	
	    					} //   				
	    					if(out1.payment_acquirer_onboarding_state != null) { //              
                 				row_tLogRow_2[84]=    						    
				                String.valueOf(out1.payment_acquirer_onboarding_state)			
					          ;	
	    					} //   				
	    					if(out1.payment_onboarding_payment_method != null) { //              
                 				row_tLogRow_2[85]=    						    
				                String.valueOf(out1.payment_onboarding_payment_method)			
					          ;	
	    					} //   				
	    					if(out1.invoice_is_snailmail != null) { //              
                 				row_tLogRow_2[86]=    						    
				                String.valueOf(out1.invoice_is_snailmail)			
					          ;	
	    					} //   				
	    					if(out1.portal_confirmation_sign != null) { //              
                 				row_tLogRow_2[87]=    						    
				                String.valueOf(out1.portal_confirmation_sign)			
					          ;	
	    					} //   				
	    					if(out1.portal_confirmation_pay != null) { //              
                 				row_tLogRow_2[88]=    						    
				                String.valueOf(out1.portal_confirmation_pay)			
					          ;	
	    					} //   				
	    					if(out1.quotation_validity_days != null) { //              
                 				row_tLogRow_2[89]=    						    
				                String.valueOf(out1.quotation_validity_days)			
					          ;	
	    					} //   				
	    					if(out1.sale_quotation_onboarding_state != null) { //              
                 				row_tLogRow_2[90]=    						    
				                String.valueOf(out1.sale_quotation_onboarding_state)			
					          ;	
	    					} //   				
	    					if(out1.sale_onboarding_order_confirmation_state != null) { //              
                 				row_tLogRow_2[91]=    						    
				                String.valueOf(out1.sale_onboarding_order_confirmation_state)			
					          ;	
	    					} //   				
	    					if(out1.sale_onboarding_sample_quotation_state != null) { //              
                 				row_tLogRow_2[92]=    						    
				                String.valueOf(out1.sale_onboarding_sample_quotation_state)			
					          ;	
	    					} //   				
	    					if(out1.sale_onboarding_payment_method != null) { //              
                 				row_tLogRow_2[93]=    						    
				                String.valueOf(out1.sale_onboarding_payment_method)			
					          ;	
	    					} //   				
	    					if(out1.sale_order_template_id != null) { //              
                 				row_tLogRow_2[94]=    						    
				                String.valueOf(out1.sale_order_template_id)			
					          ;	
	    					} //   				
	    					if(out1.nomenclature_id != null) { //              
                 				row_tLogRow_2[95]=    						    
				                String.valueOf(out1.nomenclature_id)			
					          ;	
	    					} //   				
	    					if(out1.internal_transit_location_id != null) { //              
                 				row_tLogRow_2[96]=    						    
				                String.valueOf(out1.internal_transit_location_id)			
					          ;	
	    					} //   				
	    					if(out1.stock_move_email_validation != null) { //              
                 				row_tLogRow_2[97]=    						    
				                String.valueOf(out1.stock_move_email_validation)			
					          ;	
	    					} //   				
	    					if(out1.stock_mail_confirmation_template_id != null) { //              
                 				row_tLogRow_2[98]=    						    
				                String.valueOf(out1.stock_mail_confirmation_template_id)			
					          ;	
	    					} //   				
	    					if(out1.annual_inventory_month != null) { //              
                 				row_tLogRow_2[99]=    						    
				                String.valueOf(out1.annual_inventory_month)			
					          ;	
	    					} //
						}
						public void putTableVerticalValue_1(final out1Struct out1,String[] row_tLogRow_2){   				
	    					if(out1.annual_inventory_day != null) { //              
                 				row_tLogRow_2[100]=    						    
				                String.valueOf(out1.annual_inventory_day)			
					          ;	
	    					} //   				
	    					if(out1.stock_move_sms_validation != null) { //              
                 				row_tLogRow_2[101]=    						    
				                String.valueOf(out1.stock_move_sms_validation)			
					          ;	
	    					} //   				
	    					if(out1.stock_sms_confirmation_template_id != null) { //              
                 				row_tLogRow_2[102]=    						    
				                String.valueOf(out1.stock_sms_confirmation_template_id)			
					          ;	
	    					} //   				
	    					if(out1.has_received_warning_stock_sms != null) { //              
                 				row_tLogRow_2[103]=    						    
				                String.valueOf(out1.has_received_warning_stock_sms)			
					          ;	
	    					} //   				
	    					if(out1.point_of_sale_update_stock_quantities != null) { //              
                 				row_tLogRow_2[104]=    						    
				                String.valueOf(out1.point_of_sale_update_stock_quantities)			
					          ;	
	    					} //   				
	    					if(out1.security_lead != null) { //              
                 				row_tLogRow_2[105]=    						
								FormatterUtils.formatUnwithE(out1.security_lead)
					          ;	
	    					} //
						}
			}
			LogRowUtil_tLogRow_2 logRowUtil_tLogRow_2=new LogRowUtil_tLogRow_2();


 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.partner_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.partner_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.currency_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.currency_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.sequence = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.parent_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.report_header = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.report_footer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.company_details = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.logo_web = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.email = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.phone = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"phone", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.phone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1.mobile = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row1.company_registry = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.paperformat_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"paperformat_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.paperformat_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row1.external_report_layout_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row1.base_onboarding_company_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row1.font = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row1.primary_color = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row1.secondary_color = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row1.layout_background = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row1.create_uid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.resource_calendar_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"resource_calendar_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.resource_calendar_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row1.partner_gid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.iap_enrich_auto_done = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iap_enrich_auto_done", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.iap_enrich_auto_done = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.snailmail_color = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"snailmail_color", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.snailmail_color = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row1.snailmail_cover = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row1.snailmail_duplex = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.fiscalyear_last_day = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_day", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.fiscalyear_last_day = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.fiscalyear_last_month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_month", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.fiscalyear_last_month = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row1.period_lock_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row1.fiscalyear_lock_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row1.tax_lock_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.transfer_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.transfer_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.expects_chart_of_accounts = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expects_chart_of_accounts", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.expects_chart_of_accounts = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.chart_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"chart_template_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.chart_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.bank_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"bank_account_code_prefix", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.bank_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.cash_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"cash_account_code_prefix", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.cash_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.default_cash_difference_income_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_income_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.default_cash_difference_income_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.default_cash_difference_expense_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_expense_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.default_cash_difference_expense_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_journal_suspense_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_suspense_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_journal_suspense_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_journal_payment_debit_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_debit_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_journal_payment_debit_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_journal_payment_credit_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_credit_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_journal_payment_credit_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.transfer_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_code_prefix", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.transfer_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_sale_tax_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_sale_tax_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_sale_tax_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_purchase_tax_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_purchase_tax_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_purchase_tax_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row1.tax_calculation_rounding_method = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.currency_exchange_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_exchange_journal_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.currency_exchange_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.income_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"income_currency_exchange_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.income_currency_exchange_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.expense_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expense_currency_exchange_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.expense_currency_exchange_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.anglo_saxon_accounting = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"anglo_saxon_accounting", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.anglo_saxon_accounting = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.property_stock_account_input_categ_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_input_categ_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.property_stock_account_input_categ_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.property_stock_account_output_categ_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_output_categ_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.property_stock_account_output_categ_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.property_stock_valuation_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_valuation_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.property_stock_valuation_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row1.incoterm_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
							row1.qr_code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.invoice_is_email = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_email", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.invoice_is_email = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.invoice_is_print = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_print", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.invoice_is_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
							row1.account_opening_move_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.account_opening_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_opening_date", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_opening_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
							row1.account_setup_bank_data_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
							row1.account_setup_fy_data_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 65;
					
							row1.account_setup_coa_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 66;
					
							row1.account_setup_taxes_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 67;
					
							row1.account_onboarding_invoice_layout_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 68;
					
							row1.account_onboarding_create_invoice_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 69;
					
							row1.account_onboarding_sale_tax_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 70;
					
							row1.account_invoice_onboarding_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 71;
					
							row1.account_dashboard_onboarding_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 72;
					
							row1.invoice_terms = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 73;
					
							row1.terms_type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 74;
					
							row1.invoice_terms_html = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 75;
					
							row1.account_setup_bill_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 76;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_default_pos_receivable_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_default_pos_receivable_account_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_default_pos_receivable_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 77;
					
							row1.expense_accrual_account_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 78;
					
							row1.revenue_accrual_account_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 79;
					
							row1.automatic_entry_default_journal_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 80;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.account_fiscal_country_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_fiscal_country_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.account_fiscal_country_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 81;
					
							row1.tax_exigibility = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 82;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.tax_cash_basis_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_cash_basis_journal_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.tax_cash_basis_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 83;
					
							row1.account_cash_basis_base_account_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 84;
					
							row1.payment_acquirer_onboarding_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 85;
					
							row1.payment_onboarding_payment_method = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 86;
					
							row1.invoice_is_snailmail = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 87;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.portal_confirmation_sign = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_sign", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.portal_confirmation_sign = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 88;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.portal_confirmation_pay = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_pay", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.portal_confirmation_pay = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 89;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.quotation_validity_days = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"quotation_validity_days", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.quotation_validity_days = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 90;
					
							row1.sale_quotation_onboarding_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 91;
					
							row1.sale_onboarding_order_confirmation_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 92;
					
							row1.sale_onboarding_sample_quotation_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 93;
					
							row1.sale_onboarding_payment_method = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 94;
					
							row1.sale_order_template_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 95;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.nomenclature_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nomenclature_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.nomenclature_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 96;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.internal_transit_location_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"internal_transit_location_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.internal_transit_location_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 97;
					
							row1.stock_move_email_validation = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 98;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.stock_mail_confirmation_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_mail_confirmation_template_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.stock_mail_confirmation_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 99;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.annual_inventory_month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_month", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.annual_inventory_month = null;
								
							
						}
					
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 100;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.annual_inventory_day = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_day", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.annual_inventory_day = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 101;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.stock_move_sms_validation = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_move_sms_validation", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.stock_move_sms_validation = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 102;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.stock_sms_confirmation_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_sms_confirmation_template_id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.stock_sms_confirmation_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 103;
					
							row1.has_received_warning_stock_sms = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 104;
					
							row1.point_of_sale_update_stock_quantities = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 105;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.security_lead = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"security_lead", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.security_lead = null;
								
							
						}
					
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_1,row1 );
					
						valueToConn_1(fid_tFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.temp_path+"/raw.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/raw.csv", "ISO-8859-15",";","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
			rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1 );
		
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.id =  row1.id ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.id = '" + row2HashKey.id + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out1'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out1_tmp.id = row1.id ;
out1_tmp.name = row1.name ;
out1_tmp.partner_id = row1.partner_id ;
out1_tmp.currency_id = row1.currency_id ;
out1_tmp.sequence = row1.sequence ;
out1_tmp.create_date = row1.create_date ;
out1_tmp.parent_id = row1.parent_id ;
out1_tmp.report_header = row1.report_header ;
out1_tmp.report_footer = row1.report_footer ;
out1_tmp.company_details = row1.company_details ;
out1_tmp.logo_web = row1.logo_web ;
out1_tmp.email = row1.email ;
out1_tmp.phone = row1.phone ;
out1_tmp.mobile = row1.mobile ;
out1_tmp.company_registry = row1.company_registry ;
out1_tmp.paperformat_id = row1.paperformat_id ;
out1_tmp.external_report_layout_id = row1.external_report_layout_id ;
out1_tmp.base_onboarding_company_state = row1.base_onboarding_company_state ;
out1_tmp.font = row1.font ;
out1_tmp.primary_color = row1.primary_color ;
out1_tmp.secondary_color = row1.secondary_color ;
out1_tmp.layout_background = row1.layout_background ;
out1_tmp.create_uid = row1.create_uid ;
out1_tmp.write_uid = row1.write_uid ;
out1_tmp.write_date = row1.write_date ;
out1_tmp.resource_calendar_id = row1.resource_calendar_id ;
out1_tmp.partner_gid = row1.partner_gid ;
out1_tmp.iap_enrich_auto_done = row1.iap_enrich_auto_done ;
out1_tmp.snailmail_color = row1.snailmail_color ;
out1_tmp.snailmail_cover = row1.snailmail_cover ;
out1_tmp.snailmail_duplex = row1.snailmail_duplex ;
out1_tmp.fiscalyear_last_day = row1.fiscalyear_last_day ;
out1_tmp.fiscalyear_last_month = row1.fiscalyear_last_month ;
out1_tmp.period_lock_date = row1.period_lock_date ;
out1_tmp.fiscalyear_lock_date = row1.fiscalyear_lock_date ;
out1_tmp.tax_lock_date = row1.tax_lock_date ;
out1_tmp.transfer_account_id = row1.transfer_account_id ;
out1_tmp.expects_chart_of_accounts = row1.expects_chart_of_accounts ;
out1_tmp.chart_template_id = row1.chart_template_id ;
out1_tmp.bank_account_code_prefix = row1.bank_account_code_prefix ;
out1_tmp.cash_account_code_prefix = row1.cash_account_code_prefix ;
out1_tmp.default_cash_difference_income_account_id = row1.default_cash_difference_income_account_id ;
out1_tmp.default_cash_difference_expense_account_id = row1.default_cash_difference_expense_account_id ;
out1_tmp.account_journal_suspense_account_id = row1.account_journal_suspense_account_id ;
out1_tmp.account_journal_payment_debit_account_id = row1.account_journal_payment_debit_account_id ;
out1_tmp.account_journal_payment_credit_account_id = row1.account_journal_payment_credit_account_id ;
out1_tmp.transfer_account_code_prefix = row1.transfer_account_code_prefix ;
out1_tmp.account_sale_tax_id = row1.account_sale_tax_id ;
out1_tmp.account_purchase_tax_id = row1.account_purchase_tax_id ;
out1_tmp.tax_calculation_rounding_method = row1.tax_calculation_rounding_method ;
out1_tmp.currency_exchange_journal_id = row1.currency_exchange_journal_id ;
out1_tmp.income_currency_exchange_account_id = row1.income_currency_exchange_account_id ;
out1_tmp.expense_currency_exchange_account_id = row1.expense_currency_exchange_account_id ;
out1_tmp.anglo_saxon_accounting = row1.anglo_saxon_accounting ;
out1_tmp.property_stock_account_input_categ_id = row1.property_stock_account_input_categ_id ;
out1_tmp.property_stock_account_output_categ_id = row1.property_stock_account_output_categ_id ;
out1_tmp.property_stock_valuation_account_id = row1.property_stock_valuation_account_id ;
out1_tmp.incoterm_id = row1.incoterm_id ;
out1_tmp.qr_code = row1.qr_code ;
out1_tmp.invoice_is_email = row1.invoice_is_email ;
out1_tmp.invoice_is_print = row1.invoice_is_print ;
out1_tmp.account_opening_move_id = row1.account_opening_move_id ;
out1_tmp.account_opening_date = row1.account_opening_date ;
out1_tmp.account_setup_bank_data_state = row1.account_setup_bank_data_state ;
out1_tmp.account_setup_fy_data_state = row1.account_setup_fy_data_state ;
out1_tmp.account_setup_coa_state = row1.account_setup_coa_state ;
out1_tmp.account_setup_taxes_state = row1.account_setup_taxes_state ;
out1_tmp.account_onboarding_invoice_layout_state = row1.account_onboarding_invoice_layout_state ;
out1_tmp.account_onboarding_create_invoice_state = row1.account_onboarding_create_invoice_state ;
out1_tmp.account_onboarding_sale_tax_state = row1.account_onboarding_sale_tax_state ;
out1_tmp.account_invoice_onboarding_state = row1.account_invoice_onboarding_state ;
out1_tmp.account_dashboard_onboarding_state = row1.account_dashboard_onboarding_state ;
out1_tmp.invoice_terms = row1.invoice_terms ;
out1_tmp.terms_type = row1.terms_type ;
out1_tmp.invoice_terms_html = row1.invoice_terms_html ;
out1_tmp.account_setup_bill_state = row1.account_setup_bill_state ;
out1_tmp.account_default_pos_receivable_account_id = row1.account_default_pos_receivable_account_id ;
out1_tmp.expense_accrual_account_id = row1.expense_accrual_account_id ;
out1_tmp.revenue_accrual_account_id = row1.revenue_accrual_account_id ;
out1_tmp.automatic_entry_default_journal_id = row1.automatic_entry_default_journal_id ;
out1_tmp.account_fiscal_country_id = row1.account_fiscal_country_id ;
out1_tmp.tax_exigibility = row1.tax_exigibility ;
out1_tmp.tax_cash_basis_journal_id = row1.tax_cash_basis_journal_id ;
out1_tmp.account_cash_basis_base_account_id = row1.account_cash_basis_base_account_id ;
out1_tmp.payment_acquirer_onboarding_state = row1.payment_acquirer_onboarding_state ;
out1_tmp.payment_onboarding_payment_method = row1.payment_onboarding_payment_method ;
out1_tmp.invoice_is_snailmail = row1.invoice_is_snailmail ;
out1_tmp.portal_confirmation_sign = row1.portal_confirmation_sign ;
out1_tmp.portal_confirmation_pay = row1.portal_confirmation_pay ;
out1_tmp.quotation_validity_days = row1.quotation_validity_days ;
out1_tmp.sale_quotation_onboarding_state = row1.sale_quotation_onboarding_state ;
out1_tmp.sale_onboarding_order_confirmation_state = row1.sale_onboarding_order_confirmation_state ;
out1_tmp.sale_onboarding_sample_quotation_state = row1.sale_onboarding_sample_quotation_state ;
out1_tmp.sale_onboarding_payment_method = row1.sale_onboarding_payment_method ;
out1_tmp.sale_order_template_id = row1.sale_order_template_id ;
out1_tmp.nomenclature_id = row1.nomenclature_id ;
out1_tmp.internal_transit_location_id = row1.internal_transit_location_id ;
out1_tmp.stock_move_email_validation = row1.stock_move_email_validation ;
out1_tmp.stock_mail_confirmation_template_id = row1.stock_mail_confirmation_template_id ;
out1_tmp.annual_inventory_month = row1.annual_inventory_month ;
out1_tmp.annual_inventory_day = row1.annual_inventory_day ;
out1_tmp.stock_move_sms_validation = row1.stock_move_sms_validation ;
out1_tmp.stock_sms_confirmation_template_id = row1.stock_sms_confirmation_template_id ;
out1_tmp.has_received_warning_stock_sms = row1.has_received_warning_stock_sms ;
out1_tmp.point_of_sale_update_stock_quantities = row1.point_of_sale_update_stock_quantities ;
out1_tmp.security_lead = row1.security_lead ;
out1 = out1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[106];

						logRowUtil_tLogRow_2.putTableVerticalValue_0(out1,row_tLogRow_2);
						logRowUtil_tLogRow_2.putTableVerticalValue_1(out1,row_tLogRow_2); 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = out1;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_0(row3,sb_tFileOutputDelimited_2,OUT_DELIM_tFileOutputDelimited_2);
                            fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_1(row3,sb_tFileOutputDelimited_2,OUT_DELIM_tFileOutputDelimited_2);
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 
     row4 = row3;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row4"
									
							);
						}
						
//////////
 

// for output
			row6 = new row6Struct();
								
			row6.id = row4.id;								
			row6.name = row4.name;								
			row6.partner_id = row4.partner_id;								
			row6.currency_id = row4.currency_id;								
			row6.sequence = row4.sequence;								
			row6.create_date = row4.create_date;								
			row6.parent_id = row4.parent_id;								
			row6.report_header = row4.report_header;								
			row6.report_footer = row4.report_footer;								
			row6.company_details = row4.company_details;								
			row6.logo_web = row4.logo_web;								
			row6.email = row4.email;								
			row6.phone = row4.phone;								
			row6.mobile = row4.mobile;								
			row6.company_registry = row4.company_registry;								
			row6.paperformat_id = row4.paperformat_id;								
			row6.external_report_layout_id = row4.external_report_layout_id;								
			row6.base_onboarding_company_state = row4.base_onboarding_company_state;								
			row6.font = row4.font;								
			row6.primary_color = row4.primary_color;								
			row6.secondary_color = row4.secondary_color;								
			row6.layout_background = row4.layout_background;								
			row6.create_uid = row4.create_uid;								
			row6.write_uid = row4.write_uid;								
			row6.write_date = row4.write_date;								
			row6.resource_calendar_id = row4.resource_calendar_id;								
			row6.partner_gid = row4.partner_gid;								
			row6.iap_enrich_auto_done = row4.iap_enrich_auto_done;								
			row6.snailmail_color = row4.snailmail_color;								
			row6.snailmail_cover = row4.snailmail_cover;								
			row6.snailmail_duplex = row4.snailmail_duplex;								
			row6.fiscalyear_last_day = row4.fiscalyear_last_day;								
			row6.fiscalyear_last_month = row4.fiscalyear_last_month;								
			row6.period_lock_date = row4.period_lock_date;								
			row6.fiscalyear_lock_date = row4.fiscalyear_lock_date;								
			row6.tax_lock_date = row4.tax_lock_date;								
			row6.transfer_account_id = row4.transfer_account_id;								
			row6.expects_chart_of_accounts = row4.expects_chart_of_accounts;								
			row6.chart_template_id = row4.chart_template_id;								
			row6.bank_account_code_prefix = row4.bank_account_code_prefix;								
			row6.cash_account_code_prefix = row4.cash_account_code_prefix;								
			row6.default_cash_difference_income_account_id = row4.default_cash_difference_income_account_id;								
			row6.default_cash_difference_expense_account_id = row4.default_cash_difference_expense_account_id;								
			row6.account_journal_suspense_account_id = row4.account_journal_suspense_account_id;								
			row6.account_journal_payment_debit_account_id = row4.account_journal_payment_debit_account_id;								
			row6.account_journal_payment_credit_account_id = row4.account_journal_payment_credit_account_id;								
			row6.transfer_account_code_prefix = row4.transfer_account_code_prefix;								
			row6.account_sale_tax_id = row4.account_sale_tax_id;								
			row6.account_purchase_tax_id = row4.account_purchase_tax_id;								
			row6.tax_calculation_rounding_method = row4.tax_calculation_rounding_method;								
			row6.currency_exchange_journal_id = row4.currency_exchange_journal_id;								
			row6.income_currency_exchange_account_id = row4.income_currency_exchange_account_id;								
			row6.expense_currency_exchange_account_id = row4.expense_currency_exchange_account_id;								
			row6.anglo_saxon_accounting = row4.anglo_saxon_accounting;								
			row6.property_stock_account_input_categ_id = row4.property_stock_account_input_categ_id;								
			row6.property_stock_account_output_categ_id = row4.property_stock_account_output_categ_id;								
			row6.property_stock_valuation_account_id = row4.property_stock_valuation_account_id;								
			row6.incoterm_id = row4.incoterm_id;								
			row6.qr_code = row4.qr_code;								
			row6.invoice_is_email = row4.invoice_is_email;								
			row6.invoice_is_print = row4.invoice_is_print;								
			row6.account_opening_move_id = row4.account_opening_move_id;								
			row6.account_opening_date = row4.account_opening_date;								
			row6.account_setup_bank_data_state = row4.account_setup_bank_data_state;								
			row6.account_setup_fy_data_state = row4.account_setup_fy_data_state;								
			row6.account_setup_coa_state = row4.account_setup_coa_state;								
			row6.account_setup_taxes_state = row4.account_setup_taxes_state;								
			row6.account_onboarding_invoice_layout_state = row4.account_onboarding_invoice_layout_state;								
			row6.account_onboarding_create_invoice_state = row4.account_onboarding_create_invoice_state;								
			row6.account_onboarding_sale_tax_state = row4.account_onboarding_sale_tax_state;								
			row6.account_invoice_onboarding_state = row4.account_invoice_onboarding_state;								
			row6.account_dashboard_onboarding_state = row4.account_dashboard_onboarding_state;								
			row6.invoice_terms = row4.invoice_terms;								
			row6.terms_type = row4.terms_type;								
			row6.invoice_terms_html = row4.invoice_terms_html;								
			row6.account_setup_bill_state = row4.account_setup_bill_state;								
			row6.account_default_pos_receivable_account_id = row4.account_default_pos_receivable_account_id;								
			row6.expense_accrual_account_id = row4.expense_accrual_account_id;								
			row6.revenue_accrual_account_id = row4.revenue_accrual_account_id;								
			row6.automatic_entry_default_journal_id = row4.automatic_entry_default_journal_id;								
			row6.account_fiscal_country_id = row4.account_fiscal_country_id;								
			row6.tax_exigibility = row4.tax_exigibility;								
			row6.tax_cash_basis_journal_id = row4.tax_cash_basis_journal_id;								
			row6.account_cash_basis_base_account_id = row4.account_cash_basis_base_account_id;								
			row6.payment_acquirer_onboarding_state = row4.payment_acquirer_onboarding_state;								
			row6.payment_onboarding_payment_method = row4.payment_onboarding_payment_method;								
			row6.invoice_is_snailmail = row4.invoice_is_snailmail;								
			row6.portal_confirmation_sign = row4.portal_confirmation_sign;								
			row6.portal_confirmation_pay = row4.portal_confirmation_pay;								
			row6.quotation_validity_days = row4.quotation_validity_days;								
			row6.sale_quotation_onboarding_state = row4.sale_quotation_onboarding_state;								
			row6.sale_onboarding_order_confirmation_state = row4.sale_onboarding_order_confirmation_state;								
			row6.sale_onboarding_sample_quotation_state = row4.sale_onboarding_sample_quotation_state;								
			row6.sale_onboarding_payment_method = row4.sale_onboarding_payment_method;								
			row6.sale_order_template_id = row4.sale_order_template_id;								
			row6.nomenclature_id = row4.nomenclature_id;								
			row6.internal_transit_location_id = row4.internal_transit_location_id;								
			row6.stock_move_email_validation = row4.stock_move_email_validation;								
			row6.stock_mail_confirmation_template_id = row4.stock_mail_confirmation_template_id;								
			row6.annual_inventory_month = row4.annual_inventory_month;								
			row6.annual_inventory_day = row4.annual_inventory_day;								
			row6.stock_move_sms_validation = row4.stock_move_sms_validation;								
			row6.stock_sms_confirmation_template_id = row4.stock_sms_confirmation_template_id;								
			row6.has_received_warning_stock_sms = row4.has_received_warning_stock_sms;								
			row6.point_of_sale_update_stock_quantities = row4.point_of_sale_update_stock_quantities;								
			row6.security_lead = row4.security_lead;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[106];

						logRowUtil_tLogRow_1.putTableVerticalValue_0(row6,row_tLogRow_1);
						logRowUtil_tLogRow_1.putTableVerticalValue_1(row6,row_tLogRow_1); 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row7 = row6;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_0(row7,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_1(row7,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/raw.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */









	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4","row5");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */









	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	    
	final String decryptedPassword_tS3Connection_1 = context.SecretAccessKey; 

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(context.AccessKeyId,decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,"us-east-2"));
        } else {
                builder_tS3Connection_1.withRegion("us-east-2");
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "resCompany.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = context.temp_path+"/stageOut.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/stage", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/stage")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/stage", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_dailyJobStage_resCompany = new byte[0];
    static byte[] commonByteArray_PACIFICO_dailyJobStage_resCompany = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer partner_id;

				public Integer getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public String sequence;

				public String getSequence () {
					return this.sequence;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public String parent_id;

				public String getParent_id () {
					return this.parent_id;
				}
				
			    public String report_header;

				public String getReport_header () {
					return this.report_header;
				}
				
			    public String report_footer;

				public String getReport_footer () {
					return this.report_footer;
				}
				
			    public String company_details;

				public String getCompany_details () {
					return this.company_details;
				}
				
			    public String logo_web;

				public String getLogo_web () {
					return this.logo_web;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public Integer phone;

				public Integer getPhone () {
					return this.phone;
				}
				
			    public String mobile;

				public String getMobile () {
					return this.mobile;
				}
				
			    public String company_registry;

				public String getCompany_registry () {
					return this.company_registry;
				}
				
			    public Integer paperformat_id;

				public Integer getPaperformat_id () {
					return this.paperformat_id;
				}
				
			    public String external_report_layout_id;

				public String getExternal_report_layout_id () {
					return this.external_report_layout_id;
				}
				
			    public String base_onboarding_company_state;

				public String getBase_onboarding_company_state () {
					return this.base_onboarding_company_state;
				}
				
			    public String font;

				public String getFont () {
					return this.font;
				}
				
			    public String primary_color;

				public String getPrimary_color () {
					return this.primary_color;
				}
				
			    public String secondary_color;

				public String getSecondary_color () {
					return this.secondary_color;
				}
				
			    public String layout_background;

				public String getLayout_background () {
					return this.layout_background;
				}
				
			    public String create_uid;

				public String getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer resource_calendar_id;

				public Integer getResource_calendar_id () {
					return this.resource_calendar_id;
				}
				
			    public String partner_gid;

				public String getPartner_gid () {
					return this.partner_gid;
				}
				
			    public Boolean iap_enrich_auto_done;

				public Boolean getIap_enrich_auto_done () {
					return this.iap_enrich_auto_done;
				}
				
			    public Boolean snailmail_color;

				public Boolean getSnailmail_color () {
					return this.snailmail_color;
				}
				
			    public String snailmail_cover;

				public String getSnailmail_cover () {
					return this.snailmail_cover;
				}
				
			    public String snailmail_duplex;

				public String getSnailmail_duplex () {
					return this.snailmail_duplex;
				}
				
			    public Integer fiscalyear_last_day;

				public Integer getFiscalyear_last_day () {
					return this.fiscalyear_last_day;
				}
				
			    public Integer fiscalyear_last_month;

				public Integer getFiscalyear_last_month () {
					return this.fiscalyear_last_month;
				}
				
			    public String period_lock_date;

				public String getPeriod_lock_date () {
					return this.period_lock_date;
				}
				
			    public String fiscalyear_lock_date;

				public String getFiscalyear_lock_date () {
					return this.fiscalyear_lock_date;
				}
				
			    public String tax_lock_date;

				public String getTax_lock_date () {
					return this.tax_lock_date;
				}
				
			    public Integer transfer_account_id;

				public Integer getTransfer_account_id () {
					return this.transfer_account_id;
				}
				
			    public Boolean expects_chart_of_accounts;

				public Boolean getExpects_chart_of_accounts () {
					return this.expects_chart_of_accounts;
				}
				
			    public Integer chart_template_id;

				public Integer getChart_template_id () {
					return this.chart_template_id;
				}
				
			    public Integer bank_account_code_prefix;

				public Integer getBank_account_code_prefix () {
					return this.bank_account_code_prefix;
				}
				
			    public Integer cash_account_code_prefix;

				public Integer getCash_account_code_prefix () {
					return this.cash_account_code_prefix;
				}
				
			    public Integer default_cash_difference_income_account_id;

				public Integer getDefault_cash_difference_income_account_id () {
					return this.default_cash_difference_income_account_id;
				}
				
			    public Integer default_cash_difference_expense_account_id;

				public Integer getDefault_cash_difference_expense_account_id () {
					return this.default_cash_difference_expense_account_id;
				}
				
			    public Integer account_journal_suspense_account_id;

				public Integer getAccount_journal_suspense_account_id () {
					return this.account_journal_suspense_account_id;
				}
				
			    public Integer account_journal_payment_debit_account_id;

				public Integer getAccount_journal_payment_debit_account_id () {
					return this.account_journal_payment_debit_account_id;
				}
				
			    public Integer account_journal_payment_credit_account_id;

				public Integer getAccount_journal_payment_credit_account_id () {
					return this.account_journal_payment_credit_account_id;
				}
				
			    public Integer transfer_account_code_prefix;

				public Integer getTransfer_account_code_prefix () {
					return this.transfer_account_code_prefix;
				}
				
			    public Integer account_sale_tax_id;

				public Integer getAccount_sale_tax_id () {
					return this.account_sale_tax_id;
				}
				
			    public Integer account_purchase_tax_id;

				public Integer getAccount_purchase_tax_id () {
					return this.account_purchase_tax_id;
				}
				
			    public String tax_calculation_rounding_method;

				public String getTax_calculation_rounding_method () {
					return this.tax_calculation_rounding_method;
				}
				
			    public Integer currency_exchange_journal_id;

				public Integer getCurrency_exchange_journal_id () {
					return this.currency_exchange_journal_id;
				}
				
			    public Integer income_currency_exchange_account_id;

				public Integer getIncome_currency_exchange_account_id () {
					return this.income_currency_exchange_account_id;
				}
				
			    public Integer expense_currency_exchange_account_id;

				public Integer getExpense_currency_exchange_account_id () {
					return this.expense_currency_exchange_account_id;
				}
				
			    public Boolean anglo_saxon_accounting;

				public Boolean getAnglo_saxon_accounting () {
					return this.anglo_saxon_accounting;
				}
				
			    public Integer property_stock_account_input_categ_id;

				public Integer getProperty_stock_account_input_categ_id () {
					return this.property_stock_account_input_categ_id;
				}
				
			    public Integer property_stock_account_output_categ_id;

				public Integer getProperty_stock_account_output_categ_id () {
					return this.property_stock_account_output_categ_id;
				}
				
			    public Integer property_stock_valuation_account_id;

				public Integer getProperty_stock_valuation_account_id () {
					return this.property_stock_valuation_account_id;
				}
				
			    public String incoterm_id;

				public String getIncoterm_id () {
					return this.incoterm_id;
				}
				
			    public String qr_code;

				public String getQr_code () {
					return this.qr_code;
				}
				
			    public Boolean invoice_is_email;

				public Boolean getInvoice_is_email () {
					return this.invoice_is_email;
				}
				
			    public Boolean invoice_is_print;

				public Boolean getInvoice_is_print () {
					return this.invoice_is_print;
				}
				
			    public String account_opening_move_id;

				public String getAccount_opening_move_id () {
					return this.account_opening_move_id;
				}
				
			    public java.util.Date account_opening_date;

				public java.util.Date getAccount_opening_date () {
					return this.account_opening_date;
				}
				
			    public String account_setup_bank_data_state;

				public String getAccount_setup_bank_data_state () {
					return this.account_setup_bank_data_state;
				}
				
			    public String account_setup_fy_data_state;

				public String getAccount_setup_fy_data_state () {
					return this.account_setup_fy_data_state;
				}
				
			    public String account_setup_coa_state;

				public String getAccount_setup_coa_state () {
					return this.account_setup_coa_state;
				}
				
			    public String account_setup_taxes_state;

				public String getAccount_setup_taxes_state () {
					return this.account_setup_taxes_state;
				}
				
			    public String account_onboarding_invoice_layout_state;

				public String getAccount_onboarding_invoice_layout_state () {
					return this.account_onboarding_invoice_layout_state;
				}
				
			    public String account_onboarding_create_invoice_state;

				public String getAccount_onboarding_create_invoice_state () {
					return this.account_onboarding_create_invoice_state;
				}
				
			    public String account_onboarding_sale_tax_state;

				public String getAccount_onboarding_sale_tax_state () {
					return this.account_onboarding_sale_tax_state;
				}
				
			    public String account_invoice_onboarding_state;

				public String getAccount_invoice_onboarding_state () {
					return this.account_invoice_onboarding_state;
				}
				
			    public String account_dashboard_onboarding_state;

				public String getAccount_dashboard_onboarding_state () {
					return this.account_dashboard_onboarding_state;
				}
				
			    public String invoice_terms;

				public String getInvoice_terms () {
					return this.invoice_terms;
				}
				
			    public String terms_type;

				public String getTerms_type () {
					return this.terms_type;
				}
				
			    public String invoice_terms_html;

				public String getInvoice_terms_html () {
					return this.invoice_terms_html;
				}
				
			    public String account_setup_bill_state;

				public String getAccount_setup_bill_state () {
					return this.account_setup_bill_state;
				}
				
			    public Integer account_default_pos_receivable_account_id;

				public Integer getAccount_default_pos_receivable_account_id () {
					return this.account_default_pos_receivable_account_id;
				}
				
			    public String expense_accrual_account_id;

				public String getExpense_accrual_account_id () {
					return this.expense_accrual_account_id;
				}
				
			    public String revenue_accrual_account_id;

				public String getRevenue_accrual_account_id () {
					return this.revenue_accrual_account_id;
				}
				
			    public String automatic_entry_default_journal_id;

				public String getAutomatic_entry_default_journal_id () {
					return this.automatic_entry_default_journal_id;
				}
				
			    public Integer account_fiscal_country_id;

				public Integer getAccount_fiscal_country_id () {
					return this.account_fiscal_country_id;
				}
				
			    public String tax_exigibility;

				public String getTax_exigibility () {
					return this.tax_exigibility;
				}
				
			    public Integer tax_cash_basis_journal_id;

				public Integer getTax_cash_basis_journal_id () {
					return this.tax_cash_basis_journal_id;
				}
				
			    public String account_cash_basis_base_account_id;

				public String getAccount_cash_basis_base_account_id () {
					return this.account_cash_basis_base_account_id;
				}
				
			    public String payment_acquirer_onboarding_state;

				public String getPayment_acquirer_onboarding_state () {
					return this.payment_acquirer_onboarding_state;
				}
				
			    public String payment_onboarding_payment_method;

				public String getPayment_onboarding_payment_method () {
					return this.payment_onboarding_payment_method;
				}
				
			    public String invoice_is_snailmail;

				public String getInvoice_is_snailmail () {
					return this.invoice_is_snailmail;
				}
				
			    public Boolean portal_confirmation_sign;

				public Boolean getPortal_confirmation_sign () {
					return this.portal_confirmation_sign;
				}
				
			    public Boolean portal_confirmation_pay;

				public Boolean getPortal_confirmation_pay () {
					return this.portal_confirmation_pay;
				}
				
			    public Integer quotation_validity_days;

				public Integer getQuotation_validity_days () {
					return this.quotation_validity_days;
				}
				
			    public String sale_quotation_onboarding_state;

				public String getSale_quotation_onboarding_state () {
					return this.sale_quotation_onboarding_state;
				}
				
			    public String sale_onboarding_order_confirmation_state;

				public String getSale_onboarding_order_confirmation_state () {
					return this.sale_onboarding_order_confirmation_state;
				}
				
			    public String sale_onboarding_sample_quotation_state;

				public String getSale_onboarding_sample_quotation_state () {
					return this.sale_onboarding_sample_quotation_state;
				}
				
			    public String sale_onboarding_payment_method;

				public String getSale_onboarding_payment_method () {
					return this.sale_onboarding_payment_method;
				}
				
			    public String sale_order_template_id;

				public String getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer nomenclature_id;

				public Integer getNomenclature_id () {
					return this.nomenclature_id;
				}
				
			    public Integer internal_transit_location_id;

				public Integer getInternal_transit_location_id () {
					return this.internal_transit_location_id;
				}
				
			    public String stock_move_email_validation;

				public String getStock_move_email_validation () {
					return this.stock_move_email_validation;
				}
				
			    public Integer stock_mail_confirmation_template_id;

				public Integer getStock_mail_confirmation_template_id () {
					return this.stock_mail_confirmation_template_id;
				}
				
			    public Integer annual_inventory_month;

				public Integer getAnnual_inventory_month () {
					return this.annual_inventory_month;
				}
				
			    public Integer annual_inventory_day;

				public Integer getAnnual_inventory_day () {
					return this.annual_inventory_day;
				}
				
			    public Boolean stock_move_sms_validation;

				public Boolean getStock_move_sms_validation () {
					return this.stock_move_sms_validation;
				}
				
			    public Integer stock_sms_confirmation_template_id;

				public Integer getStock_sms_confirmation_template_id () {
					return this.stock_sms_confirmation_template_id;
				}
				
			    public String has_received_warning_stock_sms;

				public String getHas_received_warning_stock_sms () {
					return this.has_received_warning_stock_sms;
				}
				
			    public String point_of_sale_update_stock_quantities;

				public String getPoint_of_sale_update_stock_quantities () {
					return this.point_of_sale_update_stock_quantities;
				}
				
			    public Float security_lead;

				public Float getSecurity_lead () {
					return this.security_lead;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.partner_id = this.partner_id;
	            other.currency_id = this.currency_id;
	            other.sequence = this.sequence;
	            other.create_date = this.create_date;
	            other.parent_id = this.parent_id;
	            other.report_header = this.report_header;
	            other.report_footer = this.report_footer;
	            other.company_details = this.company_details;
	            other.logo_web = this.logo_web;
	            other.email = this.email;
	            other.phone = this.phone;
	            other.mobile = this.mobile;
	            other.company_registry = this.company_registry;
	            other.paperformat_id = this.paperformat_id;
	            other.external_report_layout_id = this.external_report_layout_id;
	            other.base_onboarding_company_state = this.base_onboarding_company_state;
	            other.font = this.font;
	            other.primary_color = this.primary_color;
	            other.secondary_color = this.secondary_color;
	            other.layout_background = this.layout_background;
	            other.create_uid = this.create_uid;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.resource_calendar_id = this.resource_calendar_id;
	            other.partner_gid = this.partner_gid;
	            other.iap_enrich_auto_done = this.iap_enrich_auto_done;
	            other.snailmail_color = this.snailmail_color;
	            other.snailmail_cover = this.snailmail_cover;
	            other.snailmail_duplex = this.snailmail_duplex;
	            other.fiscalyear_last_day = this.fiscalyear_last_day;
	            other.fiscalyear_last_month = this.fiscalyear_last_month;
	            other.period_lock_date = this.period_lock_date;
	            other.fiscalyear_lock_date = this.fiscalyear_lock_date;
	            other.tax_lock_date = this.tax_lock_date;
	            other.transfer_account_id = this.transfer_account_id;
	            other.expects_chart_of_accounts = this.expects_chart_of_accounts;
	            other.chart_template_id = this.chart_template_id;
	            other.bank_account_code_prefix = this.bank_account_code_prefix;
	            other.cash_account_code_prefix = this.cash_account_code_prefix;
	            other.default_cash_difference_income_account_id = this.default_cash_difference_income_account_id;
	            other.default_cash_difference_expense_account_id = this.default_cash_difference_expense_account_id;
	            other.account_journal_suspense_account_id = this.account_journal_suspense_account_id;
	            other.account_journal_payment_debit_account_id = this.account_journal_payment_debit_account_id;
	            other.account_journal_payment_credit_account_id = this.account_journal_payment_credit_account_id;
	            other.transfer_account_code_prefix = this.transfer_account_code_prefix;
	            other.account_sale_tax_id = this.account_sale_tax_id;
	            other.account_purchase_tax_id = this.account_purchase_tax_id;
	            other.tax_calculation_rounding_method = this.tax_calculation_rounding_method;
	            other.currency_exchange_journal_id = this.currency_exchange_journal_id;
	            other.income_currency_exchange_account_id = this.income_currency_exchange_account_id;
	            other.expense_currency_exchange_account_id = this.expense_currency_exchange_account_id;
	            other.anglo_saxon_accounting = this.anglo_saxon_accounting;
	            other.property_stock_account_input_categ_id = this.property_stock_account_input_categ_id;
	            other.property_stock_account_output_categ_id = this.property_stock_account_output_categ_id;
	            other.property_stock_valuation_account_id = this.property_stock_valuation_account_id;
	            other.incoterm_id = this.incoterm_id;
	            other.qr_code = this.qr_code;
	            other.invoice_is_email = this.invoice_is_email;
	            other.invoice_is_print = this.invoice_is_print;
	            other.account_opening_move_id = this.account_opening_move_id;
	            other.account_opening_date = this.account_opening_date;
	            other.account_setup_bank_data_state = this.account_setup_bank_data_state;
	            other.account_setup_fy_data_state = this.account_setup_fy_data_state;
	            other.account_setup_coa_state = this.account_setup_coa_state;
	            other.account_setup_taxes_state = this.account_setup_taxes_state;
	            other.account_onboarding_invoice_layout_state = this.account_onboarding_invoice_layout_state;
	            other.account_onboarding_create_invoice_state = this.account_onboarding_create_invoice_state;
	            other.account_onboarding_sale_tax_state = this.account_onboarding_sale_tax_state;
	            other.account_invoice_onboarding_state = this.account_invoice_onboarding_state;
	            other.account_dashboard_onboarding_state = this.account_dashboard_onboarding_state;
	            other.invoice_terms = this.invoice_terms;
	            other.terms_type = this.terms_type;
	            other.invoice_terms_html = this.invoice_terms_html;
	            other.account_setup_bill_state = this.account_setup_bill_state;
	            other.account_default_pos_receivable_account_id = this.account_default_pos_receivable_account_id;
	            other.expense_accrual_account_id = this.expense_accrual_account_id;
	            other.revenue_accrual_account_id = this.revenue_accrual_account_id;
	            other.automatic_entry_default_journal_id = this.automatic_entry_default_journal_id;
	            other.account_fiscal_country_id = this.account_fiscal_country_id;
	            other.tax_exigibility = this.tax_exigibility;
	            other.tax_cash_basis_journal_id = this.tax_cash_basis_journal_id;
	            other.account_cash_basis_base_account_id = this.account_cash_basis_base_account_id;
	            other.payment_acquirer_onboarding_state = this.payment_acquirer_onboarding_state;
	            other.payment_onboarding_payment_method = this.payment_onboarding_payment_method;
	            other.invoice_is_snailmail = this.invoice_is_snailmail;
	            other.portal_confirmation_sign = this.portal_confirmation_sign;
	            other.portal_confirmation_pay = this.portal_confirmation_pay;
	            other.quotation_validity_days = this.quotation_validity_days;
	            other.sale_quotation_onboarding_state = this.sale_quotation_onboarding_state;
	            other.sale_onboarding_order_confirmation_state = this.sale_onboarding_order_confirmation_state;
	            other.sale_onboarding_sample_quotation_state = this.sale_onboarding_sample_quotation_state;
	            other.sale_onboarding_payment_method = this.sale_onboarding_payment_method;
	            other.sale_order_template_id = this.sale_order_template_id;
	            other.nomenclature_id = this.nomenclature_id;
	            other.internal_transit_location_id = this.internal_transit_location_id;
	            other.stock_move_email_validation = this.stock_move_email_validation;
	            other.stock_mail_confirmation_template_id = this.stock_mail_confirmation_template_id;
	            other.annual_inventory_month = this.annual_inventory_month;
	            other.annual_inventory_day = this.annual_inventory_day;
	            other.stock_move_sms_validation = this.stock_move_sms_validation;
	            other.stock_sms_confirmation_template_id = this.stock_sms_confirmation_template_id;
	            other.has_received_warning_stock_sms = this.has_received_warning_stock_sms;
	            other.point_of_sale_update_stock_quantities = this.point_of_sale_update_stock_quantities;
	            other.security_lead = this.security_lead;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_dailyJobStage_resCompany) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.partner_id = readInteger(dis,ois);
					
						this.currency_id = readInteger(dis,ois);
					
						this.sequence = readString(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.parent_id = readString(dis,ois);
					
						this.report_header = readString(dis,ois);
					
						this.report_footer = readString(dis,ois);
					
						this.company_details = readString(dis,ois);
					
						this.logo_web = readString(dis,ois);
					
						this.email = readString(dis,ois);
					
						this.phone = readInteger(dis,ois);
					
						this.mobile = readString(dis,ois);
					
						this.company_registry = readString(dis,ois);
					
						this.paperformat_id = readInteger(dis,ois);
					
						this.external_report_layout_id = readString(dis,ois);
					
						this.base_onboarding_company_state = readString(dis,ois);
					
						this.font = readString(dis,ois);
					
						this.primary_color = readString(dis,ois);
					
						this.secondary_color = readString(dis,ois);
					
						this.layout_background = readString(dis,ois);
					
						this.create_uid = readString(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.resource_calendar_id = readInteger(dis,ois);
					
						this.partner_gid = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = dis.readBoolean();
           				}
					
						this.snailmail_cover = readString(dis,ois);
					
						this.snailmail_duplex = readString(dis,ois);
					
						this.fiscalyear_last_day = readInteger(dis,ois);
					
						this.fiscalyear_last_month = readInteger(dis,ois);
					
						this.period_lock_date = readString(dis,ois);
					
						this.fiscalyear_lock_date = readString(dis,ois);
					
						this.tax_lock_date = readString(dis,ois);
					
						this.transfer_account_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = dis.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis,ois);
					
						this.bank_account_code_prefix = readInteger(dis,ois);
					
						this.cash_account_code_prefix = readInteger(dis,ois);
					
						this.default_cash_difference_income_account_id = readInteger(dis,ois);
					
						this.default_cash_difference_expense_account_id = readInteger(dis,ois);
					
						this.account_journal_suspense_account_id = readInteger(dis,ois);
					
						this.account_journal_payment_debit_account_id = readInteger(dis,ois);
					
						this.account_journal_payment_credit_account_id = readInteger(dis,ois);
					
						this.transfer_account_code_prefix = readInteger(dis,ois);
					
						this.account_sale_tax_id = readInteger(dis,ois);
					
						this.account_purchase_tax_id = readInteger(dis,ois);
					
						this.tax_calculation_rounding_method = readString(dis,ois);
					
						this.currency_exchange_journal_id = readInteger(dis,ois);
					
						this.income_currency_exchange_account_id = readInteger(dis,ois);
					
						this.expense_currency_exchange_account_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = dis.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis,ois);
					
						this.property_stock_account_output_categ_id = readInteger(dis,ois);
					
						this.property_stock_valuation_account_id = readInteger(dis,ois);
					
						this.incoterm_id = readString(dis,ois);
					
						this.qr_code = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = dis.readBoolean();
           				}
					
						this.account_opening_move_id = readString(dis,ois);
					
						this.account_opening_date = readDate(dis,ois);
					
						this.account_setup_bank_data_state = readString(dis,ois);
					
						this.account_setup_fy_data_state = readString(dis,ois);
					
						this.account_setup_coa_state = readString(dis,ois);
					
						this.account_setup_taxes_state = readString(dis,ois);
					
						this.account_onboarding_invoice_layout_state = readString(dis,ois);
					
						this.account_onboarding_create_invoice_state = readString(dis,ois);
					
						this.account_onboarding_sale_tax_state = readString(dis,ois);
					
						this.account_invoice_onboarding_state = readString(dis,ois);
					
						this.account_dashboard_onboarding_state = readString(dis,ois);
					
						this.invoice_terms = readString(dis,ois);
					
						this.terms_type = readString(dis,ois);
					
						this.invoice_terms_html = readString(dis,ois);
					
						this.account_setup_bill_state = readString(dis,ois);
					
						this.account_default_pos_receivable_account_id = readInteger(dis,ois);
					
						this.expense_accrual_account_id = readString(dis,ois);
					
						this.revenue_accrual_account_id = readString(dis,ois);
					
						this.automatic_entry_default_journal_id = readString(dis,ois);
					
						this.account_fiscal_country_id = readInteger(dis,ois);
					
						this.tax_exigibility = readString(dis,ois);
					
						this.tax_cash_basis_journal_id = readInteger(dis,ois);
					
						this.account_cash_basis_base_account_id = readString(dis,ois);
					
						this.payment_acquirer_onboarding_state = readString(dis,ois);
					
						this.payment_onboarding_payment_method = readString(dis,ois);
					
						this.invoice_is_snailmail = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = dis.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis,ois);
					
						this.sale_quotation_onboarding_state = readString(dis,ois);
					
						this.sale_onboarding_order_confirmation_state = readString(dis,ois);
					
						this.sale_onboarding_sample_quotation_state = readString(dis,ois);
					
						this.sale_onboarding_payment_method = readString(dis,ois);
					
						this.sale_order_template_id = readString(dis,ois);
					
						this.nomenclature_id = readInteger(dis,ois);
					
						this.internal_transit_location_id = readInteger(dis,ois);
					
						this.stock_move_email_validation = readString(dis,ois);
					
						this.stock_mail_confirmation_template_id = readInteger(dis,ois);
					
						this.annual_inventory_month = readInteger(dis,ois);
					
						this.annual_inventory_day = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = dis.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis,ois);
					
						this.has_received_warning_stock_sms = readString(dis,ois);
					
						this.point_of_sale_update_stock_quantities = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.partner_id = readInteger(dis,objectIn);
					
						this.currency_id = readInteger(dis,objectIn);
					
						this.sequence = readString(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.parent_id = readString(dis,objectIn);
					
						this.report_header = readString(dis,objectIn);
					
						this.report_footer = readString(dis,objectIn);
					
						this.company_details = readString(dis,objectIn);
					
						this.logo_web = readString(dis,objectIn);
					
						this.email = readString(dis,objectIn);
					
						this.phone = readInteger(dis,objectIn);
					
						this.mobile = readString(dis,objectIn);
					
						this.company_registry = readString(dis,objectIn);
					
						this.paperformat_id = readInteger(dis,objectIn);
					
						this.external_report_layout_id = readString(dis,objectIn);
					
						this.base_onboarding_company_state = readString(dis,objectIn);
					
						this.font = readString(dis,objectIn);
					
						this.primary_color = readString(dis,objectIn);
					
						this.secondary_color = readString(dis,objectIn);
					
						this.layout_background = readString(dis,objectIn);
					
						this.create_uid = readString(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.resource_calendar_id = readInteger(dis,objectIn);
					
						this.partner_gid = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.iap_enrich_auto_done = null;
           				} else {
           			    	this.iap_enrich_auto_done = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.snailmail_color = null;
           				} else {
           			    	this.snailmail_color = objectIn.readBoolean();
           				}
					
						this.snailmail_cover = readString(dis,objectIn);
					
						this.snailmail_duplex = readString(dis,objectIn);
					
						this.fiscalyear_last_day = readInteger(dis,objectIn);
					
						this.fiscalyear_last_month = readInteger(dis,objectIn);
					
						this.period_lock_date = readString(dis,objectIn);
					
						this.fiscalyear_lock_date = readString(dis,objectIn);
					
						this.tax_lock_date = readString(dis,objectIn);
					
						this.transfer_account_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.expects_chart_of_accounts = null;
           				} else {
           			    	this.expects_chart_of_accounts = objectIn.readBoolean();
           				}
					
						this.chart_template_id = readInteger(dis,objectIn);
					
						this.bank_account_code_prefix = readInteger(dis,objectIn);
					
						this.cash_account_code_prefix = readInteger(dis,objectIn);
					
						this.default_cash_difference_income_account_id = readInteger(dis,objectIn);
					
						this.default_cash_difference_expense_account_id = readInteger(dis,objectIn);
					
						this.account_journal_suspense_account_id = readInteger(dis,objectIn);
					
						this.account_journal_payment_debit_account_id = readInteger(dis,objectIn);
					
						this.account_journal_payment_credit_account_id = readInteger(dis,objectIn);
					
						this.transfer_account_code_prefix = readInteger(dis,objectIn);
					
						this.account_sale_tax_id = readInteger(dis,objectIn);
					
						this.account_purchase_tax_id = readInteger(dis,objectIn);
					
						this.tax_calculation_rounding_method = readString(dis,objectIn);
					
						this.currency_exchange_journal_id = readInteger(dis,objectIn);
					
						this.income_currency_exchange_account_id = readInteger(dis,objectIn);
					
						this.expense_currency_exchange_account_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.anglo_saxon_accounting = null;
           				} else {
           			    	this.anglo_saxon_accounting = objectIn.readBoolean();
           				}
					
						this.property_stock_account_input_categ_id = readInteger(dis,objectIn);
					
						this.property_stock_account_output_categ_id = readInteger(dis,objectIn);
					
						this.property_stock_valuation_account_id = readInteger(dis,objectIn);
					
						this.incoterm_id = readString(dis,objectIn);
					
						this.qr_code = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.invoice_is_email = null;
           				} else {
           			    	this.invoice_is_email = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.invoice_is_print = null;
           				} else {
           			    	this.invoice_is_print = objectIn.readBoolean();
           				}
					
						this.account_opening_move_id = readString(dis,objectIn);
					
						this.account_opening_date = readDate(dis,objectIn);
					
						this.account_setup_bank_data_state = readString(dis,objectIn);
					
						this.account_setup_fy_data_state = readString(dis,objectIn);
					
						this.account_setup_coa_state = readString(dis,objectIn);
					
						this.account_setup_taxes_state = readString(dis,objectIn);
					
						this.account_onboarding_invoice_layout_state = readString(dis,objectIn);
					
						this.account_onboarding_create_invoice_state = readString(dis,objectIn);
					
						this.account_onboarding_sale_tax_state = readString(dis,objectIn);
					
						this.account_invoice_onboarding_state = readString(dis,objectIn);
					
						this.account_dashboard_onboarding_state = readString(dis,objectIn);
					
						this.invoice_terms = readString(dis,objectIn);
					
						this.terms_type = readString(dis,objectIn);
					
						this.invoice_terms_html = readString(dis,objectIn);
					
						this.account_setup_bill_state = readString(dis,objectIn);
					
						this.account_default_pos_receivable_account_id = readInteger(dis,objectIn);
					
						this.expense_accrual_account_id = readString(dis,objectIn);
					
						this.revenue_accrual_account_id = readString(dis,objectIn);
					
						this.automatic_entry_default_journal_id = readString(dis,objectIn);
					
						this.account_fiscal_country_id = readInteger(dis,objectIn);
					
						this.tax_exigibility = readString(dis,objectIn);
					
						this.tax_cash_basis_journal_id = readInteger(dis,objectIn);
					
						this.account_cash_basis_base_account_id = readString(dis,objectIn);
					
						this.payment_acquirer_onboarding_state = readString(dis,objectIn);
					
						this.payment_onboarding_payment_method = readString(dis,objectIn);
					
						this.invoice_is_snailmail = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_sign = null;
           				} else {
           			    	this.portal_confirmation_sign = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.portal_confirmation_pay = null;
           				} else {
           			    	this.portal_confirmation_pay = objectIn.readBoolean();
           				}
					
						this.quotation_validity_days = readInteger(dis,objectIn);
					
						this.sale_quotation_onboarding_state = readString(dis,objectIn);
					
						this.sale_onboarding_order_confirmation_state = readString(dis,objectIn);
					
						this.sale_onboarding_sample_quotation_state = readString(dis,objectIn);
					
						this.sale_onboarding_payment_method = readString(dis,objectIn);
					
						this.sale_order_template_id = readString(dis,objectIn);
					
						this.nomenclature_id = readInteger(dis,objectIn);
					
						this.internal_transit_location_id = readInteger(dis,objectIn);
					
						this.stock_move_email_validation = readString(dis,objectIn);
					
						this.stock_mail_confirmation_template_id = readInteger(dis,objectIn);
					
						this.annual_inventory_month = readInteger(dis,objectIn);
					
						this.annual_inventory_day = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.stock_move_sms_validation = null;
           				} else {
           			    	this.stock_move_sms_validation = objectIn.readBoolean();
           				}
					
						this.stock_sms_confirmation_template_id = readInteger(dis,objectIn);
					
						this.has_received_warning_stock_sms = readString(dis,objectIn);
					
						this.point_of_sale_update_stock_quantities = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.security_lead = null;
           				} else {
           			    	this.security_lead = objectIn.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
					writeInteger(this.partner_id, dos, oos);
					
					writeInteger(this.currency_id, dos, oos);
					
						writeString(this.sequence, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
						writeString(this.parent_id, dos, oos);
					
						writeString(this.report_header, dos, oos);
					
						writeString(this.report_footer, dos, oos);
					
						writeString(this.company_details, dos, oos);
					
						writeString(this.logo_web, dos, oos);
					
						writeString(this.email, dos, oos);
					
					writeInteger(this.phone, dos, oos);
					
						writeString(this.mobile, dos, oos);
					
						writeString(this.company_registry, dos, oos);
					
					writeInteger(this.paperformat_id, dos, oos);
					
						writeString(this.external_report_layout_id, dos, oos);
					
						writeString(this.base_onboarding_company_state, dos, oos);
					
						writeString(this.font, dos, oos);
					
						writeString(this.primary_color, dos, oos);
					
						writeString(this.secondary_color, dos, oos);
					
						writeString(this.layout_background, dos, oos);
					
						writeString(this.create_uid, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
					writeInteger(this.resource_calendar_id, dos, oos);
					
						writeString(this.partner_gid, dos, oos);
					
						if(this.iap_enrich_auto_done == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
						if(this.snailmail_color == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.snailmail_color);
		            	}
					
						writeString(this.snailmail_cover, dos, oos);
					
						writeString(this.snailmail_duplex, dos, oos);
					
					writeInteger(this.fiscalyear_last_day, dos, oos);
					
					writeInteger(this.fiscalyear_last_month, dos, oos);
					
						writeString(this.period_lock_date, dos, oos);
					
						writeString(this.fiscalyear_lock_date, dos, oos);
					
						writeString(this.tax_lock_date, dos, oos);
					
					writeInteger(this.transfer_account_id, dos, oos);
					
						if(this.expects_chart_of_accounts == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					writeInteger(this.chart_template_id, dos, oos);
					
					writeInteger(this.bank_account_code_prefix, dos, oos);
					
					writeInteger(this.cash_account_code_prefix, dos, oos);
					
					writeInteger(this.default_cash_difference_income_account_id, dos, oos);
					
					writeInteger(this.default_cash_difference_expense_account_id, dos, oos);
					
					writeInteger(this.account_journal_suspense_account_id, dos, oos);
					
					writeInteger(this.account_journal_payment_debit_account_id, dos, oos);
					
					writeInteger(this.account_journal_payment_credit_account_id, dos, oos);
					
					writeInteger(this.transfer_account_code_prefix, dos, oos);
					
					writeInteger(this.account_sale_tax_id, dos, oos);
					
					writeInteger(this.account_purchase_tax_id, dos, oos);
					
						writeString(this.tax_calculation_rounding_method, dos, oos);
					
					writeInteger(this.currency_exchange_journal_id, dos, oos);
					
					writeInteger(this.income_currency_exchange_account_id, dos, oos);
					
					writeInteger(this.expense_currency_exchange_account_id, dos, oos);
					
						if(this.anglo_saxon_accounting == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					writeInteger(this.property_stock_account_input_categ_id, dos, oos);
					
					writeInteger(this.property_stock_account_output_categ_id, dos, oos);
					
					writeInteger(this.property_stock_valuation_account_id, dos, oos);
					
						writeString(this.incoterm_id, dos, oos);
					
						writeString(this.qr_code, dos, oos);
					
						if(this.invoice_is_email == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_email);
		            	}
					
						if(this.invoice_is_print == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.invoice_is_print);
		            	}
					
						writeString(this.account_opening_move_id, dos, oos);
					
						writeDate(this.account_opening_date, dos, oos);
					
						writeString(this.account_setup_bank_data_state, dos, oos);
					
						writeString(this.account_setup_fy_data_state, dos, oos);
					
						writeString(this.account_setup_coa_state, dos, oos);
					
						writeString(this.account_setup_taxes_state, dos, oos);
					
						writeString(this.account_onboarding_invoice_layout_state, dos, oos);
					
						writeString(this.account_onboarding_create_invoice_state, dos, oos);
					
						writeString(this.account_onboarding_sale_tax_state, dos, oos);
					
						writeString(this.account_invoice_onboarding_state, dos, oos);
					
						writeString(this.account_dashboard_onboarding_state, dos, oos);
					
						writeString(this.invoice_terms, dos, oos);
					
						writeString(this.terms_type, dos, oos);
					
						writeString(this.invoice_terms_html, dos, oos);
					
						writeString(this.account_setup_bill_state, dos, oos);
					
					writeInteger(this.account_default_pos_receivable_account_id, dos, oos);
					
						writeString(this.expense_accrual_account_id, dos, oos);
					
						writeString(this.revenue_accrual_account_id, dos, oos);
					
						writeString(this.automatic_entry_default_journal_id, dos, oos);
					
					writeInteger(this.account_fiscal_country_id, dos, oos);
					
						writeString(this.tax_exigibility, dos, oos);
					
					writeInteger(this.tax_cash_basis_journal_id, dos, oos);
					
						writeString(this.account_cash_basis_base_account_id, dos, oos);
					
						writeString(this.payment_acquirer_onboarding_state, dos, oos);
					
						writeString(this.payment_onboarding_payment_method, dos, oos);
					
						writeString(this.invoice_is_snailmail, dos, oos);
					
						if(this.portal_confirmation_sign == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_sign);
		            	}
					
						if(this.portal_confirmation_pay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					writeInteger(this.quotation_validity_days, dos, oos);
					
						writeString(this.sale_quotation_onboarding_state, dos, oos);
					
						writeString(this.sale_onboarding_order_confirmation_state, dos, oos);
					
						writeString(this.sale_onboarding_sample_quotation_state, dos, oos);
					
						writeString(this.sale_onboarding_payment_method, dos, oos);
					
						writeString(this.sale_order_template_id, dos, oos);
					
					writeInteger(this.nomenclature_id, dos, oos);
					
					writeInteger(this.internal_transit_location_id, dos, oos);
					
						writeString(this.stock_move_email_validation, dos, oos);
					
					writeInteger(this.stock_mail_confirmation_template_id, dos, oos);
					
					writeInteger(this.annual_inventory_month, dos, oos);
					
					writeInteger(this.annual_inventory_day, dos, oos);
					
						if(this.stock_move_sms_validation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					writeInteger(this.stock_sms_confirmation_template_id, dos, oos);
					
						writeString(this.has_received_warning_stock_sms, dos, oos);
					
						writeString(this.point_of_sale_update_stock_quantities, dos, oos);
					
						if(this.security_lead == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
					writeInteger(this.partner_id, dos, objectOut);
					
					writeInteger(this.currency_id, dos, objectOut);
					
						writeString(this.sequence, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
						writeString(this.parent_id, dos, objectOut);
					
						writeString(this.report_header, dos, objectOut);
					
						writeString(this.report_footer, dos, objectOut);
					
						writeString(this.company_details, dos, objectOut);
					
						writeString(this.logo_web, dos, objectOut);
					
						writeString(this.email, dos, objectOut);
					
					writeInteger(this.phone, dos, objectOut);
					
						writeString(this.mobile, dos, objectOut);
					
						writeString(this.company_registry, dos, objectOut);
					
					writeInteger(this.paperformat_id, dos, objectOut);
					
						writeString(this.external_report_layout_id, dos, objectOut);
					
						writeString(this.base_onboarding_company_state, dos, objectOut);
					
						writeString(this.font, dos, objectOut);
					
						writeString(this.primary_color, dos, objectOut);
					
						writeString(this.secondary_color, dos, objectOut);
					
						writeString(this.layout_background, dos, objectOut);
					
						writeString(this.create_uid, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
					writeInteger(this.resource_calendar_id, dos, objectOut);
					
						writeString(this.partner_gid, dos, objectOut);
					
						if(this.iap_enrich_auto_done == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.iap_enrich_auto_done);
		            	}
					
						if(this.snailmail_color == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.snailmail_color);
		            	}
					
						writeString(this.snailmail_cover, dos, objectOut);
					
						writeString(this.snailmail_duplex, dos, objectOut);
					
					writeInteger(this.fiscalyear_last_day, dos, objectOut);
					
					writeInteger(this.fiscalyear_last_month, dos, objectOut);
					
						writeString(this.period_lock_date, dos, objectOut);
					
						writeString(this.fiscalyear_lock_date, dos, objectOut);
					
						writeString(this.tax_lock_date, dos, objectOut);
					
					writeInteger(this.transfer_account_id, dos, objectOut);
					
						if(this.expects_chart_of_accounts == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.expects_chart_of_accounts);
		            	}
					
					writeInteger(this.chart_template_id, dos, objectOut);
					
					writeInteger(this.bank_account_code_prefix, dos, objectOut);
					
					writeInteger(this.cash_account_code_prefix, dos, objectOut);
					
					writeInteger(this.default_cash_difference_income_account_id, dos, objectOut);
					
					writeInteger(this.default_cash_difference_expense_account_id, dos, objectOut);
					
					writeInteger(this.account_journal_suspense_account_id, dos, objectOut);
					
					writeInteger(this.account_journal_payment_debit_account_id, dos, objectOut);
					
					writeInteger(this.account_journal_payment_credit_account_id, dos, objectOut);
					
					writeInteger(this.transfer_account_code_prefix, dos, objectOut);
					
					writeInteger(this.account_sale_tax_id, dos, objectOut);
					
					writeInteger(this.account_purchase_tax_id, dos, objectOut);
					
						writeString(this.tax_calculation_rounding_method, dos, objectOut);
					
					writeInteger(this.currency_exchange_journal_id, dos, objectOut);
					
					writeInteger(this.income_currency_exchange_account_id, dos, objectOut);
					
					writeInteger(this.expense_currency_exchange_account_id, dos, objectOut);
					
						if(this.anglo_saxon_accounting == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.anglo_saxon_accounting);
		            	}
					
					writeInteger(this.property_stock_account_input_categ_id, dos, objectOut);
					
					writeInteger(this.property_stock_account_output_categ_id, dos, objectOut);
					
					writeInteger(this.property_stock_valuation_account_id, dos, objectOut);
					
						writeString(this.incoterm_id, dos, objectOut);
					
						writeString(this.qr_code, dos, objectOut);
					
						if(this.invoice_is_email == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.invoice_is_email);
		            	}
					
						if(this.invoice_is_print == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.invoice_is_print);
		            	}
					
						writeString(this.account_opening_move_id, dos, objectOut);
					
						writeDate(this.account_opening_date, dos, objectOut);
					
						writeString(this.account_setup_bank_data_state, dos, objectOut);
					
						writeString(this.account_setup_fy_data_state, dos, objectOut);
					
						writeString(this.account_setup_coa_state, dos, objectOut);
					
						writeString(this.account_setup_taxes_state, dos, objectOut);
					
						writeString(this.account_onboarding_invoice_layout_state, dos, objectOut);
					
						writeString(this.account_onboarding_create_invoice_state, dos, objectOut);
					
						writeString(this.account_onboarding_sale_tax_state, dos, objectOut);
					
						writeString(this.account_invoice_onboarding_state, dos, objectOut);
					
						writeString(this.account_dashboard_onboarding_state, dos, objectOut);
					
						writeString(this.invoice_terms, dos, objectOut);
					
						writeString(this.terms_type, dos, objectOut);
					
						writeString(this.invoice_terms_html, dos, objectOut);
					
						writeString(this.account_setup_bill_state, dos, objectOut);
					
					writeInteger(this.account_default_pos_receivable_account_id, dos, objectOut);
					
						writeString(this.expense_accrual_account_id, dos, objectOut);
					
						writeString(this.revenue_accrual_account_id, dos, objectOut);
					
						writeString(this.automatic_entry_default_journal_id, dos, objectOut);
					
					writeInteger(this.account_fiscal_country_id, dos, objectOut);
					
						writeString(this.tax_exigibility, dos, objectOut);
					
					writeInteger(this.tax_cash_basis_journal_id, dos, objectOut);
					
						writeString(this.account_cash_basis_base_account_id, dos, objectOut);
					
						writeString(this.payment_acquirer_onboarding_state, dos, objectOut);
					
						writeString(this.payment_onboarding_payment_method, dos, objectOut);
					
						writeString(this.invoice_is_snailmail, dos, objectOut);
					
						if(this.portal_confirmation_sign == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.portal_confirmation_sign);
		            	}
					
						if(this.portal_confirmation_pay == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.portal_confirmation_pay);
		            	}
					
					writeInteger(this.quotation_validity_days, dos, objectOut);
					
						writeString(this.sale_quotation_onboarding_state, dos, objectOut);
					
						writeString(this.sale_onboarding_order_confirmation_state, dos, objectOut);
					
						writeString(this.sale_onboarding_sample_quotation_state, dos, objectOut);
					
						writeString(this.sale_onboarding_payment_method, dos, objectOut);
					
						writeString(this.sale_order_template_id, dos, objectOut);
					
					writeInteger(this.nomenclature_id, dos, objectOut);
					
					writeInteger(this.internal_transit_location_id, dos, objectOut);
					
						writeString(this.stock_move_email_validation, dos, objectOut);
					
					writeInteger(this.stock_mail_confirmation_template_id, dos, objectOut);
					
					writeInteger(this.annual_inventory_month, dos, objectOut);
					
					writeInteger(this.annual_inventory_day, dos, objectOut);
					
						if(this.stock_move_sms_validation == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.stock_move_sms_validation);
		            	}
					
					writeInteger(this.stock_sms_confirmation_template_id, dos, objectOut);
					
						writeString(this.has_received_warning_stock_sms, dos, objectOut);
					
						writeString(this.point_of_sale_update_stock_quantities, dos, objectOut);
					
						if(this.security_lead == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.security_lead);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",sequence="+sequence);
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",parent_id="+parent_id);
		sb.append(",report_header="+report_header);
		sb.append(",report_footer="+report_footer);
		sb.append(",company_details="+company_details);
		sb.append(",logo_web="+logo_web);
		sb.append(",email="+email);
		sb.append(",phone="+String.valueOf(phone));
		sb.append(",mobile="+mobile);
		sb.append(",company_registry="+company_registry);
		sb.append(",paperformat_id="+String.valueOf(paperformat_id));
		sb.append(",external_report_layout_id="+external_report_layout_id);
		sb.append(",base_onboarding_company_state="+base_onboarding_company_state);
		sb.append(",font="+font);
		sb.append(",primary_color="+primary_color);
		sb.append(",secondary_color="+secondary_color);
		sb.append(",layout_background="+layout_background);
		sb.append(",create_uid="+create_uid);
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",resource_calendar_id="+String.valueOf(resource_calendar_id));
		sb.append(",partner_gid="+partner_gid);
		sb.append(",iap_enrich_auto_done="+String.valueOf(iap_enrich_auto_done));
		sb.append(",snailmail_color="+String.valueOf(snailmail_color));
		sb.append(",snailmail_cover="+snailmail_cover);
		sb.append(",snailmail_duplex="+snailmail_duplex);
		sb.append(",fiscalyear_last_day="+String.valueOf(fiscalyear_last_day));
		sb.append(",fiscalyear_last_month="+String.valueOf(fiscalyear_last_month));
		sb.append(",period_lock_date="+period_lock_date);
		sb.append(",fiscalyear_lock_date="+fiscalyear_lock_date);
		sb.append(",tax_lock_date="+tax_lock_date);
		sb.append(",transfer_account_id="+String.valueOf(transfer_account_id));
		sb.append(",expects_chart_of_accounts="+String.valueOf(expects_chart_of_accounts));
		sb.append(",chart_template_id="+String.valueOf(chart_template_id));
		sb.append(",bank_account_code_prefix="+String.valueOf(bank_account_code_prefix));
		sb.append(",cash_account_code_prefix="+String.valueOf(cash_account_code_prefix));
		sb.append(",default_cash_difference_income_account_id="+String.valueOf(default_cash_difference_income_account_id));
		sb.append(",default_cash_difference_expense_account_id="+String.valueOf(default_cash_difference_expense_account_id));
		sb.append(",account_journal_suspense_account_id="+String.valueOf(account_journal_suspense_account_id));
		sb.append(",account_journal_payment_debit_account_id="+String.valueOf(account_journal_payment_debit_account_id));
		sb.append(",account_journal_payment_credit_account_id="+String.valueOf(account_journal_payment_credit_account_id));
		sb.append(",transfer_account_code_prefix="+String.valueOf(transfer_account_code_prefix));
		sb.append(",account_sale_tax_id="+String.valueOf(account_sale_tax_id));
		sb.append(",account_purchase_tax_id="+String.valueOf(account_purchase_tax_id));
		sb.append(",tax_calculation_rounding_method="+tax_calculation_rounding_method);
		sb.append(",currency_exchange_journal_id="+String.valueOf(currency_exchange_journal_id));
		sb.append(",income_currency_exchange_account_id="+String.valueOf(income_currency_exchange_account_id));
		sb.append(",expense_currency_exchange_account_id="+String.valueOf(expense_currency_exchange_account_id));
		sb.append(",anglo_saxon_accounting="+String.valueOf(anglo_saxon_accounting));
		sb.append(",property_stock_account_input_categ_id="+String.valueOf(property_stock_account_input_categ_id));
		sb.append(",property_stock_account_output_categ_id="+String.valueOf(property_stock_account_output_categ_id));
		sb.append(",property_stock_valuation_account_id="+String.valueOf(property_stock_valuation_account_id));
		sb.append(",incoterm_id="+incoterm_id);
		sb.append(",qr_code="+qr_code);
		sb.append(",invoice_is_email="+String.valueOf(invoice_is_email));
		sb.append(",invoice_is_print="+String.valueOf(invoice_is_print));
		sb.append(",account_opening_move_id="+account_opening_move_id);
		sb.append(",account_opening_date="+String.valueOf(account_opening_date));
		sb.append(",account_setup_bank_data_state="+account_setup_bank_data_state);
		sb.append(",account_setup_fy_data_state="+account_setup_fy_data_state);
		sb.append(",account_setup_coa_state="+account_setup_coa_state);
		sb.append(",account_setup_taxes_state="+account_setup_taxes_state);
		sb.append(",account_onboarding_invoice_layout_state="+account_onboarding_invoice_layout_state);
		sb.append(",account_onboarding_create_invoice_state="+account_onboarding_create_invoice_state);
		sb.append(",account_onboarding_sale_tax_state="+account_onboarding_sale_tax_state);
		sb.append(",account_invoice_onboarding_state="+account_invoice_onboarding_state);
		sb.append(",account_dashboard_onboarding_state="+account_dashboard_onboarding_state);
		sb.append(",invoice_terms="+invoice_terms);
		sb.append(",terms_type="+terms_type);
		sb.append(",invoice_terms_html="+invoice_terms_html);
		sb.append(",account_setup_bill_state="+account_setup_bill_state);
		sb.append(",account_default_pos_receivable_account_id="+String.valueOf(account_default_pos_receivable_account_id));
		sb.append(",expense_accrual_account_id="+expense_accrual_account_id);
		sb.append(",revenue_accrual_account_id="+revenue_accrual_account_id);
		sb.append(",automatic_entry_default_journal_id="+automatic_entry_default_journal_id);
		sb.append(",account_fiscal_country_id="+String.valueOf(account_fiscal_country_id));
		sb.append(",tax_exigibility="+tax_exigibility);
		sb.append(",tax_cash_basis_journal_id="+String.valueOf(tax_cash_basis_journal_id));
		sb.append(",account_cash_basis_base_account_id="+account_cash_basis_base_account_id);
		sb.append(",payment_acquirer_onboarding_state="+payment_acquirer_onboarding_state);
		sb.append(",payment_onboarding_payment_method="+payment_onboarding_payment_method);
		sb.append(",invoice_is_snailmail="+invoice_is_snailmail);
		sb.append(",portal_confirmation_sign="+String.valueOf(portal_confirmation_sign));
		sb.append(",portal_confirmation_pay="+String.valueOf(portal_confirmation_pay));
		sb.append(",quotation_validity_days="+String.valueOf(quotation_validity_days));
		sb.append(",sale_quotation_onboarding_state="+sale_quotation_onboarding_state);
		sb.append(",sale_onboarding_order_confirmation_state="+sale_onboarding_order_confirmation_state);
		sb.append(",sale_onboarding_sample_quotation_state="+sale_onboarding_sample_quotation_state);
		sb.append(",sale_onboarding_payment_method="+sale_onboarding_payment_method);
		sb.append(",sale_order_template_id="+sale_order_template_id);
		sb.append(",nomenclature_id="+String.valueOf(nomenclature_id));
		sb.append(",internal_transit_location_id="+String.valueOf(internal_transit_location_id));
		sb.append(",stock_move_email_validation="+stock_move_email_validation);
		sb.append(",stock_mail_confirmation_template_id="+String.valueOf(stock_mail_confirmation_template_id));
		sb.append(",annual_inventory_month="+String.valueOf(annual_inventory_month));
		sb.append(",annual_inventory_day="+String.valueOf(annual_inventory_day));
		sb.append(",stock_move_sms_validation="+String.valueOf(stock_move_sms_validation));
		sb.append(",stock_sms_confirmation_template_id="+String.valueOf(stock_sms_confirmation_template_id));
		sb.append(",has_received_warning_stock_sms="+has_received_warning_stock_sms);
		sb.append(",point_of_sale_update_stock_quantities="+point_of_sale_update_stock_quantities);
		sb.append(",security_lead="+String.valueOf(security_lead));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_2{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,row2Struct row2 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row2.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.partner_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"partner_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.partner_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.currency_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.currency_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row2.sequence = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row2.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row2.parent_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row2.report_header = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row2.report_footer = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row2.company_details = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row2.logo_web = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row2.email = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.phone = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"phone", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.phone = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row2.mobile = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row2.company_registry = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.paperformat_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"paperformat_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.paperformat_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
							row2.external_report_layout_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
							row2.base_onboarding_company_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
							row2.font = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
							row2.primary_color = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
							row2.secondary_color = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
							row2.layout_background = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
							row2.create_uid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 24;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row2.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 25;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.resource_calendar_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"resource_calendar_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.resource_calendar_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 26;
					
							row2.partner_gid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 27;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.iap_enrich_auto_done = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"iap_enrich_auto_done", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.iap_enrich_auto_done = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 28;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.snailmail_color = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"snailmail_color", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.snailmail_color = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 29;
					
							row2.snailmail_cover = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 30;
					
							row2.snailmail_duplex = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 31;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.fiscalyear_last_day = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_day", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.fiscalyear_last_day = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 32;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.fiscalyear_last_month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"fiscalyear_last_month", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.fiscalyear_last_month = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 33;
					
							row2.period_lock_date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 34;
					
							row2.fiscalyear_lock_date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 35;
					
							row2.tax_lock_date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 36;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.transfer_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.transfer_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 37;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.expects_chart_of_accounts = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expects_chart_of_accounts", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.expects_chart_of_accounts = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 38;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.chart_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"chart_template_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.chart_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 39;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.bank_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"bank_account_code_prefix", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.bank_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 40;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.cash_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"cash_account_code_prefix", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.cash_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 41;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.default_cash_difference_income_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_income_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.default_cash_difference_income_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 42;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.default_cash_difference_expense_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"default_cash_difference_expense_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.default_cash_difference_expense_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 43;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_journal_suspense_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_suspense_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_journal_suspense_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 44;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_journal_payment_debit_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_debit_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_journal_payment_debit_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 45;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_journal_payment_credit_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_journal_payment_credit_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_journal_payment_credit_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 46;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.transfer_account_code_prefix = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"transfer_account_code_prefix", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.transfer_account_code_prefix = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 47;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_sale_tax_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_sale_tax_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_sale_tax_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 48;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_purchase_tax_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_purchase_tax_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_purchase_tax_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 49;
					
							row2.tax_calculation_rounding_method = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 50;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.currency_exchange_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_exchange_journal_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.currency_exchange_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 51;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.income_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"income_currency_exchange_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.income_currency_exchange_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 52;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.expense_currency_exchange_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"expense_currency_exchange_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.expense_currency_exchange_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 53;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.anglo_saxon_accounting = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"anglo_saxon_accounting", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.anglo_saxon_accounting = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 54;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.property_stock_account_input_categ_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_input_categ_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.property_stock_account_input_categ_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 55;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.property_stock_account_output_categ_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_account_output_categ_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.property_stock_account_output_categ_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 56;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.property_stock_valuation_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"property_stock_valuation_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.property_stock_valuation_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 57;
					
							row2.incoterm_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 58;
					
							row2.qr_code = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 59;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.invoice_is_email = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_email", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.invoice_is_email = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 60;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.invoice_is_print = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"invoice_is_print", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.invoice_is_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 61;
					
							row2.account_opening_move_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 62;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row2.account_opening_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_opening_date", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_opening_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 63;
					
							row2.account_setup_bank_data_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 64;
					
							row2.account_setup_fy_data_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 65;
					
							row2.account_setup_coa_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 66;
					
							row2.account_setup_taxes_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 67;
					
							row2.account_onboarding_invoice_layout_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 68;
					
							row2.account_onboarding_create_invoice_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 69;
					
							row2.account_onboarding_sale_tax_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 70;
					
							row2.account_invoice_onboarding_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 71;
					
							row2.account_dashboard_onboarding_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 72;
					
							row2.invoice_terms = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 73;
					
							row2.terms_type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 74;
					
							row2.invoice_terms_html = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 75;
					
							row2.account_setup_bill_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 76;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_default_pos_receivable_account_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_default_pos_receivable_account_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_default_pos_receivable_account_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 77;
					
							row2.expense_accrual_account_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 78;
					
							row2.revenue_accrual_account_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 79;
					
							row2.automatic_entry_default_journal_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 80;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.account_fiscal_country_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"account_fiscal_country_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.account_fiscal_country_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 81;
					
							row2.tax_exigibility = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 82;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.tax_cash_basis_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tax_cash_basis_journal_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.tax_cash_basis_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 83;
					
							row2.account_cash_basis_base_account_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 84;
					
							row2.payment_acquirer_onboarding_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 85;
					
							row2.payment_onboarding_payment_method = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 86;
					
							row2.invoice_is_snailmail = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 87;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.portal_confirmation_sign = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_sign", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.portal_confirmation_sign = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 88;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.portal_confirmation_pay = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"portal_confirmation_pay", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.portal_confirmation_pay = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 89;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.quotation_validity_days = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"quotation_validity_days", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.quotation_validity_days = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 90;
					
							row2.sale_quotation_onboarding_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 91;
					
							row2.sale_onboarding_order_confirmation_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 92;
					
							row2.sale_onboarding_sample_quotation_state = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 93;
					
							row2.sale_onboarding_payment_method = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 94;
					
							row2.sale_order_template_id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 95;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.nomenclature_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nomenclature_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.nomenclature_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 96;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.internal_transit_location_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"internal_transit_location_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.internal_transit_location_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 97;
					
							row2.stock_move_email_validation = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 98;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.stock_mail_confirmation_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_mail_confirmation_template_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.stock_mail_confirmation_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 99;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.annual_inventory_month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_month", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.annual_inventory_month = null;
								
							
						}
					
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,row2Struct row2 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 100;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.annual_inventory_day = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"annual_inventory_day", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.annual_inventory_day = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 101;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.stock_move_sms_validation = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_move_sms_validation", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.stock_move_sms_validation = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 102;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.stock_sms_confirmation_template_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"stock_sms_confirmation_template_id", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.stock_sms_confirmation_template_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 103;
					
							row2.has_received_warning_stock_sms = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 104;
					
							row2.point_of_sale_update_stock_quantities = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 105;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row2.security_lead = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"security_lead", "row2", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row2.security_lead = null;
								
							
						}
					
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,row2Struct row2 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_2,row2 );
					
						valueToConn_1(fid_tFileInputDelimited_2,row2 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2  = new RowHelper_tFileInputDelimited_2();
			
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.temp_path+"/stage.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/stage.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row2 = null;			
									
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row2 = new row2Struct();
									try {
										
			rowHelper_tFileInputDelimited_2.valueToConn(fid_tFileInputDelimited_2, row2 );
		
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.name = row2.name;
				
				row2_HashRow.partner_id = row2.partner_id;
				
				row2_HashRow.currency_id = row2.currency_id;
				
				row2_HashRow.sequence = row2.sequence;
				
				row2_HashRow.create_date = row2.create_date;
				
				row2_HashRow.parent_id = row2.parent_id;
				
				row2_HashRow.report_header = row2.report_header;
				
				row2_HashRow.report_footer = row2.report_footer;
				
				row2_HashRow.company_details = row2.company_details;
				
				row2_HashRow.logo_web = row2.logo_web;
				
				row2_HashRow.email = row2.email;
				
				row2_HashRow.phone = row2.phone;
				
				row2_HashRow.mobile = row2.mobile;
				
				row2_HashRow.company_registry = row2.company_registry;
				
				row2_HashRow.paperformat_id = row2.paperformat_id;
				
				row2_HashRow.external_report_layout_id = row2.external_report_layout_id;
				
				row2_HashRow.base_onboarding_company_state = row2.base_onboarding_company_state;
				
				row2_HashRow.font = row2.font;
				
				row2_HashRow.primary_color = row2.primary_color;
				
				row2_HashRow.secondary_color = row2.secondary_color;
				
				row2_HashRow.layout_background = row2.layout_background;
				
				row2_HashRow.create_uid = row2.create_uid;
				
				row2_HashRow.write_uid = row2.write_uid;
				
				row2_HashRow.write_date = row2.write_date;
				
				row2_HashRow.resource_calendar_id = row2.resource_calendar_id;
				
				row2_HashRow.partner_gid = row2.partner_gid;
				
				row2_HashRow.iap_enrich_auto_done = row2.iap_enrich_auto_done;
				
				row2_HashRow.snailmail_color = row2.snailmail_color;
				
				row2_HashRow.snailmail_cover = row2.snailmail_cover;
				
				row2_HashRow.snailmail_duplex = row2.snailmail_duplex;
				
				row2_HashRow.fiscalyear_last_day = row2.fiscalyear_last_day;
				
				row2_HashRow.fiscalyear_last_month = row2.fiscalyear_last_month;
				
				row2_HashRow.period_lock_date = row2.period_lock_date;
				
				row2_HashRow.fiscalyear_lock_date = row2.fiscalyear_lock_date;
				
				row2_HashRow.tax_lock_date = row2.tax_lock_date;
				
				row2_HashRow.transfer_account_id = row2.transfer_account_id;
				
				row2_HashRow.expects_chart_of_accounts = row2.expects_chart_of_accounts;
				
				row2_HashRow.chart_template_id = row2.chart_template_id;
				
				row2_HashRow.bank_account_code_prefix = row2.bank_account_code_prefix;
				
				row2_HashRow.cash_account_code_prefix = row2.cash_account_code_prefix;
				
				row2_HashRow.default_cash_difference_income_account_id = row2.default_cash_difference_income_account_id;
				
				row2_HashRow.default_cash_difference_expense_account_id = row2.default_cash_difference_expense_account_id;
				
				row2_HashRow.account_journal_suspense_account_id = row2.account_journal_suspense_account_id;
				
				row2_HashRow.account_journal_payment_debit_account_id = row2.account_journal_payment_debit_account_id;
				
				row2_HashRow.account_journal_payment_credit_account_id = row2.account_journal_payment_credit_account_id;
				
				row2_HashRow.transfer_account_code_prefix = row2.transfer_account_code_prefix;
				
				row2_HashRow.account_sale_tax_id = row2.account_sale_tax_id;
				
				row2_HashRow.account_purchase_tax_id = row2.account_purchase_tax_id;
				
				row2_HashRow.tax_calculation_rounding_method = row2.tax_calculation_rounding_method;
				
				row2_HashRow.currency_exchange_journal_id = row2.currency_exchange_journal_id;
				
				row2_HashRow.income_currency_exchange_account_id = row2.income_currency_exchange_account_id;
				
				row2_HashRow.expense_currency_exchange_account_id = row2.expense_currency_exchange_account_id;
				
				row2_HashRow.anglo_saxon_accounting = row2.anglo_saxon_accounting;
				
				row2_HashRow.property_stock_account_input_categ_id = row2.property_stock_account_input_categ_id;
				
				row2_HashRow.property_stock_account_output_categ_id = row2.property_stock_account_output_categ_id;
				
				row2_HashRow.property_stock_valuation_account_id = row2.property_stock_valuation_account_id;
				
				row2_HashRow.incoterm_id = row2.incoterm_id;
				
				row2_HashRow.qr_code = row2.qr_code;
				
				row2_HashRow.invoice_is_email = row2.invoice_is_email;
				
				row2_HashRow.invoice_is_print = row2.invoice_is_print;
				
				row2_HashRow.account_opening_move_id = row2.account_opening_move_id;
				
				row2_HashRow.account_opening_date = row2.account_opening_date;
				
				row2_HashRow.account_setup_bank_data_state = row2.account_setup_bank_data_state;
				
				row2_HashRow.account_setup_fy_data_state = row2.account_setup_fy_data_state;
				
				row2_HashRow.account_setup_coa_state = row2.account_setup_coa_state;
				
				row2_HashRow.account_setup_taxes_state = row2.account_setup_taxes_state;
				
				row2_HashRow.account_onboarding_invoice_layout_state = row2.account_onboarding_invoice_layout_state;
				
				row2_HashRow.account_onboarding_create_invoice_state = row2.account_onboarding_create_invoice_state;
				
				row2_HashRow.account_onboarding_sale_tax_state = row2.account_onboarding_sale_tax_state;
				
				row2_HashRow.account_invoice_onboarding_state = row2.account_invoice_onboarding_state;
				
				row2_HashRow.account_dashboard_onboarding_state = row2.account_dashboard_onboarding_state;
				
				row2_HashRow.invoice_terms = row2.invoice_terms;
				
				row2_HashRow.terms_type = row2.terms_type;
				
				row2_HashRow.invoice_terms_html = row2.invoice_terms_html;
				
				row2_HashRow.account_setup_bill_state = row2.account_setup_bill_state;
				
				row2_HashRow.account_default_pos_receivable_account_id = row2.account_default_pos_receivable_account_id;
				
				row2_HashRow.expense_accrual_account_id = row2.expense_accrual_account_id;
				
				row2_HashRow.revenue_accrual_account_id = row2.revenue_accrual_account_id;
				
				row2_HashRow.automatic_entry_default_journal_id = row2.automatic_entry_default_journal_id;
				
				row2_HashRow.account_fiscal_country_id = row2.account_fiscal_country_id;
				
				row2_HashRow.tax_exigibility = row2.tax_exigibility;
				
				row2_HashRow.tax_cash_basis_journal_id = row2.tax_cash_basis_journal_id;
				
				row2_HashRow.account_cash_basis_base_account_id = row2.account_cash_basis_base_account_id;
				
				row2_HashRow.payment_acquirer_onboarding_state = row2.payment_acquirer_onboarding_state;
				
				row2_HashRow.payment_onboarding_payment_method = row2.payment_onboarding_payment_method;
				
				row2_HashRow.invoice_is_snailmail = row2.invoice_is_snailmail;
				
				row2_HashRow.portal_confirmation_sign = row2.portal_confirmation_sign;
				
				row2_HashRow.portal_confirmation_pay = row2.portal_confirmation_pay;
				
				row2_HashRow.quotation_validity_days = row2.quotation_validity_days;
				
				row2_HashRow.sale_quotation_onboarding_state = row2.sale_quotation_onboarding_state;
				
				row2_HashRow.sale_onboarding_order_confirmation_state = row2.sale_onboarding_order_confirmation_state;
				
				row2_HashRow.sale_onboarding_sample_quotation_state = row2.sale_onboarding_sample_quotation_state;
				
				row2_HashRow.sale_onboarding_payment_method = row2.sale_onboarding_payment_method;
				
				row2_HashRow.sale_order_template_id = row2.sale_order_template_id;
				
				row2_HashRow.nomenclature_id = row2.nomenclature_id;
				
				row2_HashRow.internal_transit_location_id = row2.internal_transit_location_id;
				
				row2_HashRow.stock_move_email_validation = row2.stock_move_email_validation;
				
				row2_HashRow.stock_mail_confirmation_template_id = row2.stock_mail_confirmation_template_id;
				
				row2_HashRow.annual_inventory_month = row2.annual_inventory_month;
				
				row2_HashRow.annual_inventory_day = row2.annual_inventory_day;
				
				row2_HashRow.stock_move_sms_validation = row2.stock_move_sms_validation;
				
				row2_HashRow.stock_sms_confirmation_template_id = row2.stock_sms_confirmation_template_id;
				
				row2_HashRow.has_received_warning_stock_sms = row2.has_received_warning_stock_sms;
				
				row2_HashRow.point_of_sale_update_stock_quantities = row2.point_of_sale_update_stock_quantities;
				
				row2_HashRow.security_lead = row2.security_lead;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/stage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final dailyJobStage_resCompany dailyJobStage_resCompanyClass = new dailyJobStage_resCompany();

        int exitCode = dailyJobStage_resCompanyClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dailyJobStage_resCompany.class.getClassLoader().getResourceAsStream("pacifico/dailyjobstage_rescompany_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dailyJobStage_resCompany.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("AccessKeyId", "id_String");
                        if(context.getStringValue("AccessKeyId") == null) {
                            context.AccessKeyId = null;
                        } else {
                            context.AccessKeyId=(String) context.getProperty("AccessKeyId");
                        }
                        context.setContextType("SecretAccessKey", "id_String");
                        if(context.getStringValue("SecretAccessKey") == null) {
                            context.SecretAccessKey = null;
                        } else {
                            context.SecretAccessKey=(String) context.getProperty("SecretAccessKey");
                        }
                        context.setContextType("temp_path", "id_String");
                        if(context.getStringValue("temp_path") == null) {
                            context.temp_path = null;
                        } else {
                            context.temp_path=(String) context.getProperty("temp_path");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("AccessKeyId")) {
                context.AccessKeyId = (String) parentContextMap.get("AccessKeyId");
            }if (parentContextMap.containsKey("SecretAccessKey")) {
                context.SecretAccessKey = (String) parentContextMap.get("SecretAccessKey");
            }if (parentContextMap.containsKey("temp_path")) {
                context.temp_path = (String) parentContextMap.get("temp_path");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dailyJobStage_resCompany");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1171362 characters generated by Talend Open Studio for Data Integration 
 *     on the January 30, 2023 at 11:19:32 PM CST
 ************************************************************************************************/