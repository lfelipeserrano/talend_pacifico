// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.salesfactv2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: SalesFactV2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class SalesFactV2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(AccessKeyId != null){
				
					this.setProperty("AccessKeyId", AccessKeyId.toString());
				
			}
			
			if(SecretAccessKey != null){
				
					this.setProperty("SecretAccessKey", SecretAccessKey.toString());
				
			}
			
			if(temp_path != null){
				
					this.setProperty("temp_path", temp_path.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String AccessKeyId;
public String getAccessKeyId(){
	return this.AccessKeyId;
}
public String SecretAccessKey;
public String getSecretAccessKey(){
	return this.SecretAccessKey;
}
public String temp_path;
public String getTemp_path(){
	return this.temp_path;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SalesFactV2";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SalesFactV2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SalesFactV2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_DimDate_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_PosOrder_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_copyOfout1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_PosSession_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_DimStore_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_PosOrderLine_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_PosOrder_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_out6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_PosOrder_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer date_key;

				public Integer getDate_key () {
					return this.date_key;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public Integer store_key;

				public Integer getStore_key () {
					return this.store_key;
				}
				
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				
			    public Integer pos_transaction;

				public Integer getPos_transaction () {
					return this.pos_transaction;
				}
				
			    public Integer sales_quantity;

				public Integer getSales_quantity () {
					return this.sales_quantity;
				}
				
			    public Float regular_unit_price;

				public Float getRegular_unit_price () {
					return this.regular_unit_price;
				}
				
			    public Float discount_unit_price;

				public Float getDiscount_unit_price () {
					return this.discount_unit_price;
				}
				
			    public Float net_unit_price;

				public Float getNet_unit_price () {
					return this.net_unit_price;
				}
				
			    public Float extended_discount_dollar_amount;

				public Float getExtended_discount_dollar_amount () {
					return this.extended_discount_dollar_amount;
				}
				
			    public Float extended_sales_dollar_amount;

				public Float getExtended_sales_dollar_amount () {
					return this.extended_sales_dollar_amount;
				}
				
			    public Float extended_gross_profit_dollar_amount;

				public Float getExtended_gross_profit_dollar_amount () {
					return this.extended_gross_profit_dollar_amount;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
						this.store_key = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
						this.pos_transaction = readInteger(dis);
					
						this.sales_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.regular_unit_price = null;
           				} else {
           			    	this.regular_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount_unit_price = null;
           				} else {
           			    	this.discount_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.net_unit_price = null;
           				} else {
           			    	this.net_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_discount_dollar_amount = null;
           				} else {
           			    	this.extended_discount_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_sales_dollar_amount = null;
           				} else {
           			    	this.extended_sales_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_gross_profit_dollar_amount = null;
           				} else {
           			    	this.extended_gross_profit_dollar_amount = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
						this.store_key = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
						this.pos_transaction = readInteger(dis);
					
						this.sales_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.regular_unit_price = null;
           				} else {
           			    	this.regular_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount_unit_price = null;
           				} else {
           			    	this.discount_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.net_unit_price = null;
           				} else {
           			    	this.net_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_discount_dollar_amount = null;
           				} else {
           			    	this.extended_discount_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_sales_dollar_amount = null;
           				} else {
           			    	this.extended_sales_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_gross_profit_dollar_amount = null;
           				} else {
           			    	this.extended_gross_profit_dollar_amount = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.store_key,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
					// Integer
				
						writeInteger(this.pos_transaction,dos);
					
					// Integer
				
						writeInteger(this.sales_quantity,dos);
					
					// Float
				
						if(this.regular_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.regular_unit_price);
		            	}
					
					// Float
				
						if(this.discount_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount_unit_price);
		            	}
					
					// Float
				
						if(this.net_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.net_unit_price);
		            	}
					
					// Float
				
						if(this.extended_discount_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_discount_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_sales_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_sales_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_gross_profit_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_gross_profit_dollar_amount);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.store_key,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
					// Integer
				
						writeInteger(this.pos_transaction,dos);
					
					// Integer
				
						writeInteger(this.sales_quantity,dos);
					
					// Float
				
						if(this.regular_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.regular_unit_price);
		            	}
					
					// Float
				
						if(this.discount_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount_unit_price);
		            	}
					
					// Float
				
						if(this.net_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.net_unit_price);
		            	}
					
					// Float
				
						if(this.extended_discount_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_discount_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_sales_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_sales_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_gross_profit_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_gross_profit_dollar_amount);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",date_key="+String.valueOf(date_key));
		sb.append(",product_key="+String.valueOf(product_key));
		sb.append(",store_key="+String.valueOf(store_key));
		sb.append(",payment_method_key="+String.valueOf(payment_method_key));
		sb.append(",pos_transaction="+String.valueOf(pos_transaction));
		sb.append(",sales_quantity="+String.valueOf(sales_quantity));
		sb.append(",regular_unit_price="+String.valueOf(regular_unit_price));
		sb.append(",discount_unit_price="+String.valueOf(discount_unit_price));
		sb.append(",net_unit_price="+String.valueOf(net_unit_price));
		sb.append(",extended_discount_dollar_amount="+String.valueOf(extended_discount_dollar_amount));
		sb.append(",extended_sales_dollar_amount="+String.valueOf(extended_sales_dollar_amount));
		sb.append(",extended_gross_profit_dollar_amount="+String.valueOf(extended_gross_profit_dollar_amount));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SalesFactStruct implements routines.system.IPersistableRow<SalesFactStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer date_key;

				public Integer getDate_key () {
					return this.date_key;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public Integer store_key;

				public Integer getStore_key () {
					return this.store_key;
				}
				
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				
			    public Integer pos_transaction;

				public Integer getPos_transaction () {
					return this.pos_transaction;
				}
				
			    public Integer sales_quantity;

				public Integer getSales_quantity () {
					return this.sales_quantity;
				}
				
			    public Float regular_unit_price;

				public Float getRegular_unit_price () {
					return this.regular_unit_price;
				}
				
			    public Float discount_unit_price;

				public Float getDiscount_unit_price () {
					return this.discount_unit_price;
				}
				
			    public Float net_unit_price;

				public Float getNet_unit_price () {
					return this.net_unit_price;
				}
				
			    public Float extended_discount_dollar_amount;

				public Float getExtended_discount_dollar_amount () {
					return this.extended_discount_dollar_amount;
				}
				
			    public Float extended_sales_dollar_amount;

				public Float getExtended_sales_dollar_amount () {
					return this.extended_sales_dollar_amount;
				}
				
			    public Float extended_gross_profit_dollar_amount;

				public Float getExtended_gross_profit_dollar_amount () {
					return this.extended_gross_profit_dollar_amount;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
						this.store_key = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
						this.pos_transaction = readInteger(dis);
					
						this.sales_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.regular_unit_price = null;
           				} else {
           			    	this.regular_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount_unit_price = null;
           				} else {
           			    	this.discount_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.net_unit_price = null;
           				} else {
           			    	this.net_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_discount_dollar_amount = null;
           				} else {
           			    	this.extended_discount_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_sales_dollar_amount = null;
           				} else {
           			    	this.extended_sales_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_gross_profit_dollar_amount = null;
           				} else {
           			    	this.extended_gross_profit_dollar_amount = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
						this.store_key = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
						this.pos_transaction = readInteger(dis);
					
						this.sales_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.regular_unit_price = null;
           				} else {
           			    	this.regular_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount_unit_price = null;
           				} else {
           			    	this.discount_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.net_unit_price = null;
           				} else {
           			    	this.net_unit_price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_discount_dollar_amount = null;
           				} else {
           			    	this.extended_discount_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_sales_dollar_amount = null;
           				} else {
           			    	this.extended_sales_dollar_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.extended_gross_profit_dollar_amount = null;
           				} else {
           			    	this.extended_gross_profit_dollar_amount = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.store_key,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
					// Integer
				
						writeInteger(this.pos_transaction,dos);
					
					// Integer
				
						writeInteger(this.sales_quantity,dos);
					
					// Float
				
						if(this.regular_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.regular_unit_price);
		            	}
					
					// Float
				
						if(this.discount_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount_unit_price);
		            	}
					
					// Float
				
						if(this.net_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.net_unit_price);
		            	}
					
					// Float
				
						if(this.extended_discount_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_discount_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_sales_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_sales_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_gross_profit_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_gross_profit_dollar_amount);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.store_key,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
					// Integer
				
						writeInteger(this.pos_transaction,dos);
					
					// Integer
				
						writeInteger(this.sales_quantity,dos);
					
					// Float
				
						if(this.regular_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.regular_unit_price);
		            	}
					
					// Float
				
						if(this.discount_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount_unit_price);
		            	}
					
					// Float
				
						if(this.net_unit_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.net_unit_price);
		            	}
					
					// Float
				
						if(this.extended_discount_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_discount_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_sales_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_sales_dollar_amount);
		            	}
					
					// Float
				
						if(this.extended_gross_profit_dollar_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.extended_gross_profit_dollar_amount);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",date_key="+String.valueOf(date_key));
		sb.append(",product_key="+String.valueOf(product_key));
		sb.append(",store_key="+String.valueOf(store_key));
		sb.append(",payment_method_key="+String.valueOf(payment_method_key));
		sb.append(",pos_transaction="+String.valueOf(pos_transaction));
		sb.append(",sales_quantity="+String.valueOf(sales_quantity));
		sb.append(",regular_unit_price="+String.valueOf(regular_unit_price));
		sb.append(",discount_unit_price="+String.valueOf(discount_unit_price));
		sb.append(",net_unit_price="+String.valueOf(net_unit_price));
		sb.append(",extended_discount_dollar_amount="+String.valueOf(extended_discount_dollar_amount));
		sb.append(",extended_sales_dollar_amount="+String.valueOf(extended_sales_dollar_amount));
		sb.append(",extended_gross_profit_dollar_amount="+String.valueOf(extended_gross_profit_dollar_amount));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SalesFactStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout1_0Struct implements routines.system.IPersistableRow<copyOfout1_0Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer date_key;

				public Integer getDate_key () {
					return this.date_key;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public Integer store_key;

				public Integer getStore_key () {
					return this.store_key;
				}
				
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
						this.store_key = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
						this.store_key = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.store_key,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
					// Integer
				
						writeInteger(this.store_key,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",date_key="+String.valueOf(date_key));
		sb.append(",product_key="+String.valueOf(product_key));
		sb.append(",store_key="+String.valueOf(store_key));
		sb.append(",payment_method_key="+String.valueOf(payment_method_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer date_key;

				public Integer getDate_key () {
					return this.date_key;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",date_key="+String.valueOf(date_key));
		sb.append(",product_key="+String.valueOf(product_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer date_key;

				public Integer getDate_key () {
					return this.date_key;
				}
				
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",date_key="+String.valueOf(date_key));
		sb.append(",product_key="+String.valueOf(product_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer date_key;

				public Integer getDate_key () {
					return this.date_key;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.date_key = readInteger(dis);
					
						this.product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.date_key,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",date_key="+String.valueOf(date_key));
		sb.append(",product_id="+String.valueOf(product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PosOrderLine_1Struct implements routines.system.IPersistableRow<PosOrderLine_1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrderLine_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);
		tFileInputDelimited_4Process(globalMap);
		tFileInputDelimited_3Process(globalMap);
		tFileInputDelimited_12Process(globalMap);
		tFileInputDelimited_13Process(globalMap);
		tFileInputDelimited_8Process(globalMap);

		PosOrderLine_1Struct PosOrderLine_1 = new PosOrderLine_1Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();
out2Struct row8 = out2;
copyOfout1_0Struct copyOfout1_0 = new copyOfout1_0Struct();
SalesFactStruct SalesFact = new SalesFactStruct();
SalesFactStruct row1 = SalesFact;










	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.temp_path+"/SalesFact.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("sale_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("date_key");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("product_key");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("store_key");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("payment_method_key");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pos_transaction");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("sales_quantity");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("regular_unit_price");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("discount_unit_price");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("net_unit_price");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("extended_discount_dollar_amount");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("extended_sales_dollar_amount");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("extended_gross_profit_dollar_amount");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SalesFact");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[13];

        public void addRow(String[] row) {

            for (int i = 0; i < 13; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 12 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 12 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[12] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"sale_id","date_key","product_key","store_key","payment_method_key","pos_transaction","sales_quantity","regular_unit_price","discount_unit_price","net_unit_price","extended_discount_dollar_amount","extended_sales_dollar_amount","extended_gross_profit_dollar_amount",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_0");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct> tHash_Lookup_PosOrderLine = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct>) 
					globalMap.get( "tHash_Lookup_PosOrderLine" ))
					;					
					
	

PosOrderLineStruct PosOrderLineHashKey = new PosOrderLineStruct();
PosOrderLineStruct PosOrderLineDefault = new PosOrderLineStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct> tHash_Lookup_PosOrder = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct>) 
					globalMap.get( "tHash_Lookup_PosOrder" ))
					;					
					
	

PosOrderStruct PosOrderHashKey = new PosOrderStruct();
PosOrderStruct PosOrderDefault = new PosOrderStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
SalesFactStruct SalesFact_tmp = new SalesFactStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfout1Struct> tHash_Lookup_copyOfout1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfout1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfout1Struct>) 
					globalMap.get( "tHash_Lookup_copyOfout1" ))
					;					
					
	

copyOfout1Struct copyOfout1HashKey = new copyOfout1Struct();
copyOfout1Struct copyOfout1Default = new copyOfout1Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out6Struct> tHash_Lookup_out6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out6Struct>) 
					globalMap.get( "tHash_Lookup_out6" ))
					;					
					
	

out6Struct out6HashKey = new out6Struct();
out6Struct out6Default = new out6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_0Struct copyOfout1_0_tmp = new copyOfout1_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[3];

        public void addRow(String[] row) {

            for (int i = 0; i < 3; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 2 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"sale_id","date_key","product_key",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrderLine_1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct> tHash_Lookup_DimDate = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct>) 
					globalMap.get( "tHash_Lookup_DimDate" ))
					;					
					
	

DimDateStruct DimDateHashKey = new DimDateStruct();
DimDateStruct DimDateDefault = new DimDateStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.temp_path+"/posOrderLine.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrderLine.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						PosOrderLine_1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									PosOrderLine_1 = new PosOrderLine_1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							PosOrderLine_1.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							PosOrderLine_1.notice = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"product_id", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.product_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.price_unit = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_unit", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.price_unit = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.qty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"qty", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.qty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.price_subtotal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.price_subtotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.price_subtotal_incl = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal_incl", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.price_subtotal_incl = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							PosOrderLine_1.total_cost = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.is_total_cost_computed = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_total_cost_computed", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.is_total_cost_computed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.discount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"discount", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.order_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"order_id", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.order_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							PosOrderLine_1.full_product_name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							PosOrderLine_1.customer_note = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							PosOrderLine_1.refunded_orderline_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine_1.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_1.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine_1.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrderLine_1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									PosOrderLine_1.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							PosOrderLine_1.sale_order_origin_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							PosOrderLine_1.sale_order_line_id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							PosOrderLine_1.down_payment_details = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrderLine_1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "PosOrderLine_1"
if(PosOrderLine_1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrderLine_1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "DimDate" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopDimDate = false;
       		  	    	
       		  	    	
 							DimDateStruct DimDateObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    DimDateHashKey.Date = PosOrderLine_1.create_date  == null ? null : new java.util.Date(PosOrderLine_1.create_date .getTime());
                        		    		

								
		                        	DimDateHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_DimDate.lookup( DimDateHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_DimDate.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_DimDate != null && tHash_Lookup_DimDate.getCount(DimDateHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'DimDate' and it contains more one result from keys :  DimDate.Date = '" + DimDateHashKey.Date + "'");
								} // G 071
							

							DimDateStruct DimDate = null;
                    		  	 
							   
                    		  	 
	       		  	    	DimDateStruct fromLookup_DimDate = null;
							DimDate = DimDateDefault;
										 
							
								 
							
							
								if (tHash_Lookup_DimDate !=null && tHash_Lookup_DimDate.hasNext()) { // G 099
								
							
								
								fromLookup_DimDate = tHash_Lookup_DimDate.next();

							
							
								} // G 099
							
							

							if(fromLookup_DimDate != null) {
								DimDate = fromLookup_DimDate;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'out1'
out1_tmp.sale_id = PosOrderLine_1.id ;
out1_tmp.date_key = DimDate.DateNum ;
out1_tmp.product_id = PosOrderLine_1.product_id ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row2HashKey.product_id = out1.product_id ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.product_id = '" + row2HashKey.product_id + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out2 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'out2'
out2_tmp.sale_id = out1.sale_id ;
out2_tmp.date_key = out1.date_key ;
out2_tmp.product_key = row2.product_key ;
out2 = out2_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[3];
   				
	    		if(out2.sale_id != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(out2.sale_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.date_key != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(out2.date_key)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.product_key != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(out2.product_key)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row8 = out2;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "copyOfout1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcopyOfout1 = false;
       		  	    	
       		  	    	
 							copyOfout1Struct copyOfout1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    copyOfout1HashKey.sale_id =  row8.sale_id ;
                        		    		

								
		                        	copyOfout1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_copyOfout1.lookup( copyOfout1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_copyOfout1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_copyOfout1 != null && tHash_Lookup_copyOfout1.getCount(copyOfout1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'copyOfout1' and it contains more one result from keys :  copyOfout1.sale_id = '" + copyOfout1HashKey.sale_id + "'");
								} // G 071
							

							copyOfout1Struct copyOfout1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	copyOfout1Struct fromLookup_copyOfout1 = null;
							copyOfout1 = copyOfout1Default;
										 
							
								 
							
							
								if (tHash_Lookup_copyOfout1 !=null && tHash_Lookup_copyOfout1.hasNext()) { // G 099
								
							
								
								fromLookup_copyOfout1 = tHash_Lookup_copyOfout1.next();

							
							
								} // G 099
							
							

							if(fromLookup_copyOfout1 != null) {
								copyOfout1 = fromLookup_copyOfout1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "out6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopout6 = false;
       		  	    	
       		  	    	
 							out6Struct out6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    out6HashKey.sale_id = copyOfout1.sale_id ;
                        		    		

								
		                        	out6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_out6.lookup( out6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_out6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_out6 != null && tHash_Lookup_out6.getCount(out6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'out6' and it contains more one result from keys :  out6.sale_id = '" + out6HashKey.sale_id + "'");
								} // G 071
							

							out6Struct out6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	out6Struct fromLookup_out6 = null;
							out6 = out6Default;
										 
							
								 
							
							
								if (tHash_Lookup_out6 !=null && tHash_Lookup_out6.hasNext()) { // G 099
								
							
								
								fromLookup_out6 = tHash_Lookup_out6.next();

							
							
								} // G 099
							
							

							if(fromLookup_out6 != null) {
								out6 = fromLookup_out6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfout1_0 = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'copyOfout1_0'
copyOfout1_0_tmp.sale_id =  row8.sale_id ;
copyOfout1_0_tmp.date_key =  row8.date_key ;
copyOfout1_0_tmp.product_key =  row8.product_key ;
copyOfout1_0_tmp.store_key = copyOfout1.store_key ;
copyOfout1_0_tmp.payment_method_key =  out6.payment_method_key ;
copyOfout1_0 = copyOfout1_0_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfout1_0"
if(copyOfout1_0 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1_0"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "PosOrderLine" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopPosOrderLine = false;
       		  	    	
       		  	    	
 							PosOrderLineStruct PosOrderLineObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    PosOrderLineHashKey.id = copyOfout1_0.sale_id ;
                        		    		

								
		                        	PosOrderLineHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_PosOrderLine.lookup( PosOrderLineHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_PosOrderLine.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_PosOrderLine != null && tHash_Lookup_PosOrderLine.getCount(PosOrderLineHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'PosOrderLine' and it contains more one result from keys :  PosOrderLine.id = '" + PosOrderLineHashKey.id + "'");
								} // G 071
							

							PosOrderLineStruct PosOrderLine = null;
                    		  	 
							   
                    		  	 
	       		  	    	PosOrderLineStruct fromLookup_PosOrderLine = null;
							PosOrderLine = PosOrderLineDefault;
										 
							
								 
							
							
								if (tHash_Lookup_PosOrderLine !=null && tHash_Lookup_PosOrderLine.hasNext()) { // G 099
								
							
								
								fromLookup_PosOrderLine = tHash_Lookup_PosOrderLine.next();

							
							
								} // G 099
							
							

							if(fromLookup_PosOrderLine != null) {
								PosOrderLine = fromLookup_PosOrderLine;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "PosOrder" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopPosOrder = false;
       		  	    	
       		  	    	
 							PosOrderStruct PosOrderObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    PosOrderHashKey.id = PosOrderLine.order_id ;
                        		    		

								
		                        	PosOrderHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_PosOrder.lookup( PosOrderHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_PosOrder.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_PosOrder != null && tHash_Lookup_PosOrder.getCount(PosOrderHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'PosOrder' and it contains more one result from keys :  PosOrder.id = '" + PosOrderHashKey.id + "'");
								} // G 071
							

							PosOrderStruct PosOrder = null;
                    		  	 
							   
                    		  	 
	       		  	    	PosOrderStruct fromLookup_PosOrder = null;
							PosOrder = PosOrderDefault;
										 
							
								 
							
							
								if (tHash_Lookup_PosOrder !=null && tHash_Lookup_PosOrder.hasNext()) { // G 099
								
							
								
								fromLookup_PosOrder = tHash_Lookup_PosOrder.next();

							
							
								} // G 099
							
							

							if(fromLookup_PosOrder != null) {
								PosOrder = fromLookup_PosOrder;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

SalesFact = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'SalesFact'
SalesFact_tmp.sale_id = Numeric.sequence("SalesFactSeq", 1, 1) ;
SalesFact_tmp.date_key =  copyOfout1_0.date_key ;
SalesFact_tmp.product_key =  copyOfout1_0.product_key ;
SalesFact_tmp.store_key =  copyOfout1_0.store_key ;
SalesFact_tmp.payment_method_key =  copyOfout1_0.payment_method_key ;
SalesFact_tmp.pos_transaction =  PosOrder.id ;
SalesFact_tmp.sales_quantity = PosOrderLine.qty ;
SalesFact_tmp.regular_unit_price = PosOrderLine.price_unit ;
SalesFact_tmp.discount_unit_price = PosOrderLine.discount > 0 ? PosOrderLine.price_unit - ((PosOrderLine.discount / 100f) * PosOrderLine.price_unit) : 0 ;
SalesFact_tmp.net_unit_price = PosOrderLine.price_unit - (PosOrderLine.price_unit * 0.1f) ;
SalesFact_tmp.extended_discount_dollar_amount = PosOrderLine.discount > 0 ? (PosOrderLine.discount / 100f) * PosOrderLine.price_unit * PosOrderLine.qty : 0 ;
SalesFact_tmp.extended_sales_dollar_amount = PosOrderLine.price_unit * PosOrderLine.qty ;
SalesFact_tmp.extended_gross_profit_dollar_amount = (PosOrderLine.price_unit - (PosOrderLine.price_unit - (PosOrderLine.price_unit * 0.1f))) * PosOrderLine.qty ;
SalesFact = SalesFact_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "SalesFact"
if(SalesFact != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SalesFact"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[13];
   				
	    		if(SalesFact.sale_id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(SalesFact.sale_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.date_key != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(SalesFact.date_key)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.product_key != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(SalesFact.product_key)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.store_key != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(SalesFact.store_key)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.payment_method_key != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(SalesFact.payment_method_key)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.pos_transaction != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(SalesFact.pos_transaction)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.sales_quantity != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(SalesFact.sales_quantity)			
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.regular_unit_price != null) { //              
                 row_tLogRow_1[7]=    						
								FormatterUtils.formatUnwithE(SalesFact.regular_unit_price)
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.discount_unit_price != null) { //              
                 row_tLogRow_1[8]=    						
								FormatterUtils.formatUnwithE(SalesFact.discount_unit_price)
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.net_unit_price != null) { //              
                 row_tLogRow_1[9]=    						
								FormatterUtils.formatUnwithE(SalesFact.net_unit_price)
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.extended_discount_dollar_amount != null) { //              
                 row_tLogRow_1[10]=    						
								FormatterUtils.formatUnwithE(SalesFact.extended_discount_dollar_amount)
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.extended_sales_dollar_amount != null) { //              
                 row_tLogRow_1[11]=    						
								FormatterUtils.formatUnwithE(SalesFact.extended_sales_dollar_amount)
					          ;	
							
	    		} //			
    			   				
	    		if(SalesFact.extended_gross_profit_dollar_amount != null) { //              
                 row_tLogRow_1[12]=    						
								FormatterUtils.formatUnwithE(SalesFact.extended_gross_profit_dollar_amount)
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row1 = SalesFact;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row1.sale_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.sale_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.date_key != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.date_key
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.product_key != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.product_key
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.store_key != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.store_key
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.payment_method_key != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.payment_method_key
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.pos_transaction != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.pos_transaction
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.sales_quantity != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.sales_quantity
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.regular_unit_price != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.regular_unit_price
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.discount_unit_price != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.discount_unit_price
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.net_unit_price != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.net_unit_price
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.extended_discount_dollar_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.extended_discount_dollar_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.extended_sales_dollar_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.extended_sales_dollar_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.extended_gross_profit_dollar_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.extended_gross_profit_dollar_amount
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "SalesFact"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "copyOfout1_0"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "PosOrderLine_1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrderLine.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_DimDate != null) {
						tHash_Lookup_DimDate.endGet();
					}
					globalMap.remove( "tHash_Lookup_DimDate" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrderLine_1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_copyOfout1 != null) {
						tHash_Lookup_copyOfout1.endGet();
					}
					globalMap.remove( "tHash_Lookup_copyOfout1" );

					
					
				
					if(tHash_Lookup_out6 != null) {
						tHash_Lookup_out6.endGet();
					}
					globalMap.remove( "tHash_Lookup_out6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_PosOrderLine != null) {
						tHash_Lookup_PosOrderLine.endGet();
					}
					globalMap.remove( "tHash_Lookup_PosOrderLine" );

					
					
				
					if(tHash_Lookup_PosOrder != null) {
						tHash_Lookup_PosOrder.endGet();
					}
					globalMap.remove( "tHash_Lookup_PosOrder" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_0");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SalesFact");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_PosOrderLine"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_PosOrder"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_copyOfout1"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_out6"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_DimDate"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	    
	final String decryptedPassword_tS3Connection_1 = context.SecretAccessKey; 

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(context.AccessKeyId,decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "SalesFact.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = context.temp_path+"/SalesFact.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/presentation", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/presentation", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/presentation", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/presentation")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/presentation", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/presentation", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class DimDateStruct implements routines.system.IPersistableComparableLookupRow<DimDateStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer DateNum;

				public Integer getDateNum () {
					return this.DateNum;
				}
				
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				
			    public Integer YearMonthNum;

				public Integer getYearMonthNum () {
					return this.YearMonthNum;
				}
				
			    public String Calendar_Quarter;

				public String getCalendar_Quarter () {
					return this.Calendar_Quarter;
				}
				
			    public Integer MonthNum;

				public Integer getMonthNum () {
					return this.MonthNum;
				}
				
			    public String MonthName;

				public String getMonthName () {
					return this.MonthName;
				}
				
			    public String MonthShortName;

				public String getMonthShortName () {
					return this.MonthShortName;
				}
				
			    public Integer WeekNum;

				public Integer getWeekNum () {
					return this.WeekNum;
				}
				
			    public Integer DayNumOfYear;

				public Integer getDayNumOfYear () {
					return this.DayNumOfYear;
				}
				
			    public Integer DayNumOfMonth;

				public Integer getDayNumOfMonth () {
					return this.DayNumOfMonth;
				}
				
			    public Integer DayNumOfWeek;

				public Integer getDayNumOfWeek () {
					return this.DayNumOfWeek;
				}
				
			    public String DayName;

				public String getDayName () {
					return this.DayName;
				}
				
			    public String DayShortName;

				public String getDayShortName () {
					return this.DayShortName;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer YearQuarterNum;

				public Integer getYearQuarterNum () {
					return this.YearQuarterNum;
				}
				
			    public Integer DayNumOfQuarter;

				public Integer getDayNumOfQuarter () {
					return this.DayNumOfQuarter;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimDateStruct other = (DimDateStruct) obj;
		
						if (this.Date == null) {
							if (other.Date != null)
								return false;
						
						} else if (!this.Date.equals(other.Date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DimDateStruct other) {

		other.DateNum = this.DateNum;
	            other.Date = this.Date;
	            other.YearMonthNum = this.YearMonthNum;
	            other.Calendar_Quarter = this.Calendar_Quarter;
	            other.MonthNum = this.MonthNum;
	            other.MonthName = this.MonthName;
	            other.MonthShortName = this.MonthShortName;
	            other.WeekNum = this.WeekNum;
	            other.DayNumOfYear = this.DayNumOfYear;
	            other.DayNumOfMonth = this.DayNumOfMonth;
	            other.DayNumOfWeek = this.DayNumOfWeek;
	            other.DayName = this.DayName;
	            other.DayShortName = this.DayShortName;
	            other.Quarter = this.Quarter;
	            other.YearQuarterNum = this.YearQuarterNum;
	            other.DayNumOfQuarter = this.DayNumOfQuarter;
	            
	}

	public void copyKeysDataTo(DimDateStruct other) {

		other.Date = this.Date;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
					this.Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DateNum = readInteger(dis,ois);
					
						this.YearMonthNum = readInteger(dis,ois);
					
						this.Calendar_Quarter = readString(dis,ois);
					
						this.MonthNum = readInteger(dis,ois);
					
						this.MonthName = readString(dis,ois);
					
						this.MonthShortName = readString(dis,ois);
					
						this.WeekNum = readInteger(dis,ois);
					
						this.DayNumOfYear = readInteger(dis,ois);
					
						this.DayNumOfMonth = readInteger(dis,ois);
					
						this.DayNumOfWeek = readInteger(dis,ois);
					
						this.DayName = readString(dis,ois);
					
						this.DayShortName = readString(dis,ois);
					
						this.Quarter = readInteger(dis,ois);
					
						this.YearQuarterNum = readInteger(dis,ois);
					
						this.DayNumOfQuarter = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DateNum = readInteger(dis,objectIn);
					
						this.YearMonthNum = readInteger(dis,objectIn);
					
						this.Calendar_Quarter = readString(dis,objectIn);
					
						this.MonthNum = readInteger(dis,objectIn);
					
						this.MonthName = readString(dis,objectIn);
					
						this.MonthShortName = readString(dis,objectIn);
					
						this.WeekNum = readInteger(dis,objectIn);
					
						this.DayNumOfYear = readInteger(dis,objectIn);
					
						this.DayNumOfMonth = readInteger(dis,objectIn);
					
						this.DayNumOfWeek = readInteger(dis,objectIn);
					
						this.DayName = readString(dis,objectIn);
					
						this.DayShortName = readString(dis,objectIn);
					
						this.Quarter = readInteger(dis,objectIn);
					
						this.YearQuarterNum = readInteger(dis,objectIn);
					
						this.DayNumOfQuarter = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.DateNum, dos, oos);
					
					writeInteger(this.YearMonthNum, dos, oos);
					
						writeString(this.Calendar_Quarter, dos, oos);
					
					writeInteger(this.MonthNum, dos, oos);
					
						writeString(this.MonthName, dos, oos);
					
						writeString(this.MonthShortName, dos, oos);
					
					writeInteger(this.WeekNum, dos, oos);
					
					writeInteger(this.DayNumOfYear, dos, oos);
					
					writeInteger(this.DayNumOfMonth, dos, oos);
					
					writeInteger(this.DayNumOfWeek, dos, oos);
					
						writeString(this.DayName, dos, oos);
					
						writeString(this.DayShortName, dos, oos);
					
					writeInteger(this.Quarter, dos, oos);
					
					writeInteger(this.YearQuarterNum, dos, oos);
					
					writeInteger(this.DayNumOfQuarter, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.DateNum, dos, objectOut);
					
					writeInteger(this.YearMonthNum, dos, objectOut);
					
						writeString(this.Calendar_Quarter, dos, objectOut);
					
					writeInteger(this.MonthNum, dos, objectOut);
					
						writeString(this.MonthName, dos, objectOut);
					
						writeString(this.MonthShortName, dos, objectOut);
					
					writeInteger(this.WeekNum, dos, objectOut);
					
					writeInteger(this.DayNumOfYear, dos, objectOut);
					
					writeInteger(this.DayNumOfMonth, dos, objectOut);
					
					writeInteger(this.DayNumOfWeek, dos, objectOut);
					
						writeString(this.DayName, dos, objectOut);
					
						writeString(this.DayShortName, dos, objectOut);
					
					writeInteger(this.Quarter, dos, objectOut);
					
					writeInteger(this.YearQuarterNum, dos, objectOut);
					
					writeInteger(this.DayNumOfQuarter, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DateNum="+String.valueOf(DateNum));
		sb.append(",Date="+String.valueOf(Date));
		sb.append(",YearMonthNum="+String.valueOf(YearMonthNum));
		sb.append(",Calendar_Quarter="+Calendar_Quarter);
		sb.append(",MonthNum="+String.valueOf(MonthNum));
		sb.append(",MonthName="+MonthName);
		sb.append(",MonthShortName="+MonthShortName);
		sb.append(",WeekNum="+String.valueOf(WeekNum));
		sb.append(",DayNumOfYear="+String.valueOf(DayNumOfYear));
		sb.append(",DayNumOfMonth="+String.valueOf(DayNumOfMonth));
		sb.append(",DayNumOfWeek="+String.valueOf(DayNumOfWeek));
		sb.append(",DayName="+DayName);
		sb.append(",DayShortName="+DayShortName);
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",YearQuarterNum="+String.valueOf(YearQuarterNum));
		sb.append(",DayNumOfQuarter="+String.valueOf(DayNumOfQuarter));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimDateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Date, other.Date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DimDateStruct DimDate = new DimDateStruct();




	
	/**
	 * [tAdvancedHash_DimDate begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_DimDate", false);
		start_Hash.put("tAdvancedHash_DimDate", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_DimDate";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimDate");
					}
				
		int tos_count_tAdvancedHash_DimDate = 0;
		

			   		// connection name:DimDate
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(DimDate,DimDate) | target node:tAdvancedHash_DimDate - inputs:(DimDate) outputs:()
			   		// linked node: tMap_2 - inputs:(PosOrderLine_1,DimDate) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DimDate = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimDateStruct> tHash_Lookup_DimDate =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<DimDateStruct>getLookup(matchingModeEnum_DimDate);
	   						   
		   	   	   globalMap.put("tHash_Lookup_DimDate", tHash_Lookup_DimDate);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_DimDate begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.temp_path+"/DateDimTemp.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/DateDimTemp.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						DimDate = null;			
									
			    						DimDate = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									DimDate = new DimDateStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.DateNum = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DateNum", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.DateNum = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									DimDate.Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.Date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.YearMonthNum = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"YearMonthNum", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.YearMonthNum = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							DimDate.Calendar_Quarter = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.MonthNum = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"MonthNum", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.MonthNum = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							DimDate.MonthName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							DimDate.MonthShortName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.WeekNum = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"WeekNum", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.WeekNum = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.DayNumOfYear = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DayNumOfYear", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.DayNumOfYear = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.DayNumOfMonth = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DayNumOfMonth", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.DayNumOfMonth = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.DayNumOfWeek = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DayNumOfWeek", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.DayNumOfWeek = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							DimDate.DayName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							DimDate.DayShortName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.Quarter = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Quarter", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.Quarter = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.YearQuarterNum = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"YearQuarterNum", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.YearQuarterNum = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								DimDate.DayNumOfQuarter = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DayNumOfQuarter", "DimDate", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									DimDate.DayNumOfQuarter = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					DimDate = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "DimDate"
if(DimDate != null) { 



	
	/**
	 * [tAdvancedHash_DimDate main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimDate";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimDate"
						
						);
					}
					


			   
			   

					DimDateStruct DimDate_HashRow = new DimDateStruct();
		   	   	   
				
				DimDate_HashRow.DateNum = DimDate.DateNum;
				
				DimDate_HashRow.Date = DimDate.Date;
				
				DimDate_HashRow.YearMonthNum = DimDate.YearMonthNum;
				
				DimDate_HashRow.Calendar_Quarter = DimDate.Calendar_Quarter;
				
				DimDate_HashRow.MonthNum = DimDate.MonthNum;
				
				DimDate_HashRow.MonthName = DimDate.MonthName;
				
				DimDate_HashRow.MonthShortName = DimDate.MonthShortName;
				
				DimDate_HashRow.WeekNum = DimDate.WeekNum;
				
				DimDate_HashRow.DayNumOfYear = DimDate.DayNumOfYear;
				
				DimDate_HashRow.DayNumOfMonth = DimDate.DayNumOfMonth;
				
				DimDate_HashRow.DayNumOfWeek = DimDate.DayNumOfWeek;
				
				DimDate_HashRow.DayName = DimDate.DayName;
				
				DimDate_HashRow.DayShortName = DimDate.DayShortName;
				
				DimDate_HashRow.Quarter = DimDate.Quarter;
				
				DimDate_HashRow.YearQuarterNum = DimDate.YearQuarterNum;
				
				DimDate_HashRow.DayNumOfQuarter = DimDate.DayNumOfQuarter;
				
			tHash_Lookup_DimDate.put(DimDate_HashRow);
			
            




 


	tos_count_tAdvancedHash_DimDate++;

/**
 * [tAdvancedHash_DimDate main ] stop
 */
	
	/**
	 * [tAdvancedHash_DimDate process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimDate";

	

 



/**
 * [tAdvancedHash_DimDate process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_DimDate process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimDate";

	

 



/**
 * [tAdvancedHash_DimDate process_data_end ] stop
 */

} // End of branch "DimDate"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/DateDimTemp.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_DimDate end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimDate";

	

tHash_Lookup_DimDate.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimDate");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_DimDate", true);
end_Hash.put("tAdvancedHash_DimDate", System.currentTimeMillis());




/**
 * [tAdvancedHash_DimDate end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_DimDate finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimDate";

	

 



/**
 * [tAdvancedHash_DimDate finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer product_key;

				public Integer getProduct_key () {
					return this.product_key;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String product_description;

				public String getProduct_description () {
					return this.product_description;
				}
				
			    public String category;

				public String getCategory () {
					return this.category;
				}
				
			    public String category_description;

				public String getCategory_description () {
					return this.category_description;
				}
				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}
				
			    public String volume;

				public String getVolume () {
					return this.volume;
				}
				
			    public String barcode;

				public String getBarcode () {
					return this.barcode;
				}
				
			    public String product_code;

				public String getProduct_code () {
					return this.product_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.product_id == null) ? 0 : this.product_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.product_id == null) {
							if (other.product_id != null)
								return false;
						
						} else if (!this.product_id.equals(other.product_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.product_key = this.product_key;
	            other.product_id = this.product_id;
	            other.product_name = this.product_name;
	            other.product_description = this.product_description;
	            other.category = this.category;
	            other.category_description = this.category_description;
	            other.weight = this.weight;
	            other.volume = this.volume;
	            other.barcode = this.barcode;
	            other.product_code = this.product_code;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.product_id = this.product_id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.product_key = readInteger(dis,ois);
					
						this.product_name = readString(dis,ois);
					
						this.product_description = readString(dis,ois);
					
						this.category = readString(dis,ois);
					
						this.category_description = readString(dis,ois);
					
						this.weight = readString(dis,ois);
					
						this.volume = readString(dis,ois);
					
						this.barcode = readString(dis,ois);
					
						this.product_code = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.product_key = readInteger(dis,objectIn);
					
						this.product_name = readString(dis,objectIn);
					
						this.product_description = readString(dis,objectIn);
					
						this.category = readString(dis,objectIn);
					
						this.category_description = readString(dis,objectIn);
					
						this.weight = readString(dis,objectIn);
					
						this.volume = readString(dis,objectIn);
					
						this.barcode = readString(dis,objectIn);
					
						this.product_code = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.product_key, dos, oos);
					
						writeString(this.product_name, dos, oos);
					
						writeString(this.product_description, dos, oos);
					
						writeString(this.category, dos, oos);
					
						writeString(this.category_description, dos, oos);
					
						writeString(this.weight, dos, oos);
					
						writeString(this.volume, dos, oos);
					
						writeString(this.barcode, dos, oos);
					
						writeString(this.product_code, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.product_key, dos, objectOut);
					
						writeString(this.product_name, dos, objectOut);
					
						writeString(this.product_description, dos, objectOut);
					
						writeString(this.category, dos, objectOut);
					
						writeString(this.category_description, dos, objectOut);
					
						writeString(this.weight, dos, objectOut);
					
						writeString(this.volume, dos, objectOut);
					
						writeString(this.barcode, dos, objectOut);
					
						writeString(this.product_code, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_key="+String.valueOf(product_key));
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",product_name="+product_name);
		sb.append(",product_description="+product_description);
		sb.append(",category="+category);
		sb.append(",category_description="+category_description);
		sb.append(",weight="+weight);
		sb.append(",volume="+volume);
		sb.append(",barcode="+barcode);
		sb.append(",product_code="+product_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.product_id, other.product_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_6 - inputs:(out1,row2) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = context.temp_path+"/DimProduct.csv";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/DimProduct.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row2 = null;			
									
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row2.product_key = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"product_key", "row2", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row2.product_key = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row2.product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"product_id", "row2", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row2.product_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							row2.product_name = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							row2.product_description = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
							row2.category = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row2.category_description = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
							row2.weight = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
							row2.volume = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
							row2.barcode = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 9;
					
							row2.product_code = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.product_key = row2.product_key;
				
				row2_HashRow.product_id = row2.product_id;
				
				row2_HashRow.product_name = row2.product_name;
				
				row2_HashRow.product_description = row2.product_description;
				
				row2_HashRow.category = row2.category;
				
				row2_HashRow.category_description = row2.category_description;
				
				row2_HashRow.weight = row2.weight;
				
				row2_HashRow.volume = row2.volume;
				
				row2_HashRow.barcode = row2.barcode;
				
				row2_HashRow.product_code = row2.product_code;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/DimProduct.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class PosOrder_1Struct implements routines.system.IPersistableComparableLookupRow<PosOrder_1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Float amount_tax;

				public Float getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer amount_paid;

				public Integer getAmount_paid () {
					return this.amount_paid;
				}
				
			    public Integer amount_return;

				public Integer getAmount_return () {
					return this.amount_return;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public String partner_id;

				public String getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer sequence_number;

				public Integer getSequence_number () {
					return this.sequence_number;
				}
				
			    public Integer session_id;

				public Integer getSession_id () {
					return this.session_id;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String account_move;

				public String getAccount_move () {
					return this.account_move;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer nb_print;

				public Integer getNb_print () {
					return this.nb_print;
				}
				
			    public String pos_reference;

				public String getPos_reference () {
					return this.pos_reference;
				}
				
			    public Integer sale_journal;

				public Integer getSale_journal () {
					return this.sale_journal;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Boolean to_invoice;

				public Boolean getTo_invoice () {
					return this.to_invoice;
				}
				
			    public Boolean to_ship;

				public Boolean getTo_ship () {
					return this.to_ship;
				}
				
			    public Boolean is_tipped;

				public Boolean getIs_tipped () {
					return this.is_tipped;
				}
				
			    public Integer tip_amount;

				public Integer getTip_amount () {
					return this.tip_amount;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PosOrder_1Struct other = (PosOrder_1Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PosOrder_1Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.date_order = this.date_order;
	            other.user_id = this.user_id;
	            other.amount_tax = this.amount_tax;
	            other.amount_total = this.amount_total;
	            other.amount_paid = this.amount_paid;
	            other.amount_return = this.amount_return;
	            other.company_id = this.company_id;
	            other.pricelist_id = this.pricelist_id;
	            other.partner_id = this.partner_id;
	            other.sequence_number = this.sequence_number;
	            other.session_id = this.session_id;
	            other.currency_rate = this.currency_rate;
	            other.state = this.state;
	            other.account_move = this.account_move;
	            other.procurement_group_id = this.procurement_group_id;
	            other.note = this.note;
	            other.nb_print = this.nb_print;
	            other.pos_reference = this.pos_reference;
	            other.sale_journal = this.sale_journal;
	            other.fiscal_position_id = this.fiscal_position_id;
	            other.to_invoice = this.to_invoice;
	            other.to_ship = this.to_ship;
	            other.is_tipped = this.is_tipped;
	            other.tip_amount = this.tip_amount;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.crm_team_id = this.crm_team_id;
	            
	}

	public void copyKeysDataTo(PosOrder_1Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.date_order = readDate(dis,ois);
					
						this.user_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = dis.readFloat();
           				}
					
						this.amount_total = readInteger(dis,ois);
					
						this.amount_paid = readInteger(dis,ois);
					
						this.amount_return = readInteger(dis,ois);
					
						this.company_id = readInteger(dis,ois);
					
						this.pricelist_id = readInteger(dis,ois);
					
						this.partner_id = readString(dis,ois);
					
						this.sequence_number = readInteger(dis,ois);
					
						this.session_id = readInteger(dis,ois);
					
						this.currency_rate = readInteger(dis,ois);
					
						this.state = readString(dis,ois);
					
						this.account_move = readString(dis,ois);
					
						this.procurement_group_id = readString(dis,ois);
					
						this.note = readString(dis,ois);
					
						this.nb_print = readInteger(dis,ois);
					
						this.pos_reference = readString(dis,ois);
					
						this.sale_journal = readInteger(dis,ois);
					
						this.fiscal_position_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = dis.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.crm_team_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.date_order = readDate(dis,objectIn);
					
						this.user_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = objectIn.readFloat();
           				}
					
						this.amount_total = readInteger(dis,objectIn);
					
						this.amount_paid = readInteger(dis,objectIn);
					
						this.amount_return = readInteger(dis,objectIn);
					
						this.company_id = readInteger(dis,objectIn);
					
						this.pricelist_id = readInteger(dis,objectIn);
					
						this.partner_id = readString(dis,objectIn);
					
						this.sequence_number = readInteger(dis,objectIn);
					
						this.session_id = readInteger(dis,objectIn);
					
						this.currency_rate = readInteger(dis,objectIn);
					
						this.state = readString(dis,objectIn);
					
						this.account_move = readString(dis,objectIn);
					
						this.procurement_group_id = readString(dis,objectIn);
					
						this.note = readString(dis,objectIn);
					
						this.nb_print = readInteger(dis,objectIn);
					
						this.pos_reference = readString(dis,objectIn);
					
						this.sale_journal = readInteger(dis,objectIn);
					
						this.fiscal_position_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = objectIn.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.crm_team_id = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						writeDate(this.date_order, dos, oos);
					
					writeInteger(this.user_id, dos, oos);
					
						if(this.amount_tax == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, oos);
					
					writeInteger(this.amount_paid, dos, oos);
					
					writeInteger(this.amount_return, dos, oos);
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.pricelist_id, dos, oos);
					
						writeString(this.partner_id, dos, oos);
					
					writeInteger(this.sequence_number, dos, oos);
					
					writeInteger(this.session_id, dos, oos);
					
					writeInteger(this.currency_rate, dos, oos);
					
						writeString(this.state, dos, oos);
					
						writeString(this.account_move, dos, oos);
					
						writeString(this.procurement_group_id, dos, oos);
					
						writeString(this.note, dos, oos);
					
					writeInteger(this.nb_print, dos, oos);
					
						writeString(this.pos_reference, dos, oos);
					
					writeInteger(this.sale_journal, dos, oos);
					
						writeString(this.fiscal_position_id, dos, oos);
					
						if(this.to_invoice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.crm_team_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
						writeDate(this.date_order, dos, objectOut);
					
					writeInteger(this.user_id, dos, objectOut);
					
						if(this.amount_tax == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, objectOut);
					
					writeInteger(this.amount_paid, dos, objectOut);
					
					writeInteger(this.amount_return, dos, objectOut);
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.pricelist_id, dos, objectOut);
					
						writeString(this.partner_id, dos, objectOut);
					
					writeInteger(this.sequence_number, dos, objectOut);
					
					writeInteger(this.session_id, dos, objectOut);
					
					writeInteger(this.currency_rate, dos, objectOut);
					
						writeString(this.state, dos, objectOut);
					
						writeString(this.account_move, dos, objectOut);
					
						writeString(this.procurement_group_id, dos, objectOut);
					
						writeString(this.note, dos, objectOut);
					
					writeInteger(this.nb_print, dos, objectOut);
					
						writeString(this.pos_reference, dos, objectOut);
					
					writeInteger(this.sale_journal, dos, objectOut);
					
						writeString(this.fiscal_position_id, dos, objectOut);
					
						if(this.to_invoice == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.crm_team_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",amount_paid="+String.valueOf(amount_paid));
		sb.append(",amount_return="+String.valueOf(amount_return));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",partner_id="+partner_id);
		sb.append(",sequence_number="+String.valueOf(sequence_number));
		sb.append(",session_id="+String.valueOf(session_id));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",state="+state);
		sb.append(",account_move="+account_move);
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",note="+note);
		sb.append(",nb_print="+String.valueOf(nb_print));
		sb.append(",pos_reference="+pos_reference);
		sb.append(",sale_journal="+String.valueOf(sale_journal));
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",to_invoice="+String.valueOf(to_invoice));
		sb.append(",to_ship="+String.valueOf(to_ship));
		sb.append(",is_tipped="+String.valueOf(is_tipped));
		sb.append(",tip_amount="+String.valueOf(tip_amount));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",crm_team_id="+crm_team_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrder_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		PosOrder_1Struct PosOrder_1 = new PosOrder_1Struct();




	
	/**
	 * [tAdvancedHash_PosOrder_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_PosOrder_1", false);
		start_Hash.put("tAdvancedHash_PosOrder_1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_PosOrder_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrder_1");
					}
				
		int tos_count_tAdvancedHash_PosOrder_1 = 0;
		

			   		// connection name:PosOrder_1
			   		// source node:tFileInputDelimited_5 - inputs:(after_tFileInputDelimited_3) outputs:(PosOrder_1,PosOrder_1) | target node:tAdvancedHash_PosOrder_1 - inputs:(PosOrder_1) outputs:()
			   		// linked node: tMap_1 - inputs:(PosOrder_1,PosSession,DimStore,PosOrderLine_2) outputs:(copyOfout1,copyOfout1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosOrder_1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_1Struct> tHash_Lookup_PosOrder_1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<PosOrder_1Struct>getLookup(matchingModeEnum_PosOrder_1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_PosOrder_1", tHash_Lookup_PosOrder_1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_PosOrder_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = context.temp_path+"/posOrder.csv";
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrder.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						PosOrder_1 = null;			
									
			    						PosOrder_1 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									PosOrder_1 = new PosOrder_1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							PosOrder_1.name = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder_1.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.amount_tax = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 5;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 6;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.amount_paid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_paid", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.amount_paid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 7;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.amount_return = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_return", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.amount_return = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 8;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 9;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 10;
					
							PosOrder_1.partner_id = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 11;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.sequence_number = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_number", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.sequence_number = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 12;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.session_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"session_id", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.session_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 13;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 14;
					
							PosOrder_1.state = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 15;
					
							PosOrder_1.account_move = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 16;
					
							PosOrder_1.procurement_group_id = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 17;
					
							PosOrder_1.note = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 18;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.nb_print = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nb_print", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.nb_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 19;
					
							PosOrder_1.pos_reference = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 20;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.sale_journal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sale_journal", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.sale_journal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 21;
					
							PosOrder_1.fiscal_position_id = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 22;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.to_invoice = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_invoice", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.to_invoice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 23;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.to_ship = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_ship", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.to_ship = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 24;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.is_tipped = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_tipped", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.is_tipped = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 25;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.tip_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tip_amount", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.tip_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 26;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 27;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder_1.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 28;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_1.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 29;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder_1.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrder_1", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									PosOrder_1.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 30;
					
							PosOrder_1.crm_team_id = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrder_1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "PosOrder_1"
if(PosOrder_1 != null) { 



	
	/**
	 * [tAdvancedHash_PosOrder_1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrder_1"
						
						);
					}
					


			   
			   

					PosOrder_1Struct PosOrder_1_HashRow = new PosOrder_1Struct();
		   	   	   
				
				PosOrder_1_HashRow.id = PosOrder_1.id;
				
				PosOrder_1_HashRow.name = PosOrder_1.name;
				
				PosOrder_1_HashRow.date_order = PosOrder_1.date_order;
				
				PosOrder_1_HashRow.user_id = PosOrder_1.user_id;
				
				PosOrder_1_HashRow.amount_tax = PosOrder_1.amount_tax;
				
				PosOrder_1_HashRow.amount_total = PosOrder_1.amount_total;
				
				PosOrder_1_HashRow.amount_paid = PosOrder_1.amount_paid;
				
				PosOrder_1_HashRow.amount_return = PosOrder_1.amount_return;
				
				PosOrder_1_HashRow.company_id = PosOrder_1.company_id;
				
				PosOrder_1_HashRow.pricelist_id = PosOrder_1.pricelist_id;
				
				PosOrder_1_HashRow.partner_id = PosOrder_1.partner_id;
				
				PosOrder_1_HashRow.sequence_number = PosOrder_1.sequence_number;
				
				PosOrder_1_HashRow.session_id = PosOrder_1.session_id;
				
				PosOrder_1_HashRow.currency_rate = PosOrder_1.currency_rate;
				
				PosOrder_1_HashRow.state = PosOrder_1.state;
				
				PosOrder_1_HashRow.account_move = PosOrder_1.account_move;
				
				PosOrder_1_HashRow.procurement_group_id = PosOrder_1.procurement_group_id;
				
				PosOrder_1_HashRow.note = PosOrder_1.note;
				
				PosOrder_1_HashRow.nb_print = PosOrder_1.nb_print;
				
				PosOrder_1_HashRow.pos_reference = PosOrder_1.pos_reference;
				
				PosOrder_1_HashRow.sale_journal = PosOrder_1.sale_journal;
				
				PosOrder_1_HashRow.fiscal_position_id = PosOrder_1.fiscal_position_id;
				
				PosOrder_1_HashRow.to_invoice = PosOrder_1.to_invoice;
				
				PosOrder_1_HashRow.to_ship = PosOrder_1.to_ship;
				
				PosOrder_1_HashRow.is_tipped = PosOrder_1.is_tipped;
				
				PosOrder_1_HashRow.tip_amount = PosOrder_1.tip_amount;
				
				PosOrder_1_HashRow.create_uid = PosOrder_1.create_uid;
				
				PosOrder_1_HashRow.create_date = PosOrder_1.create_date;
				
				PosOrder_1_HashRow.write_uid = PosOrder_1.write_uid;
				
				PosOrder_1_HashRow.write_date = PosOrder_1.write_date;
				
				PosOrder_1_HashRow.crm_team_id = PosOrder_1.crm_team_id;
				
			tHash_Lookup_PosOrder_1.put(PosOrder_1_HashRow);
			
            




 


	tos_count_tAdvancedHash_PosOrder_1++;

/**
 * [tAdvancedHash_PosOrder_1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrder_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_1";

	

 



/**
 * [tAdvancedHash_PosOrder_1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrder_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_1";

	

 



/**
 * [tAdvancedHash_PosOrder_1 process_data_end ] stop
 */

} // End of branch "PosOrder_1"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrder.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrder_1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_1";

	

tHash_Lookup_PosOrder_1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrder_1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_PosOrder_1", true);
end_Hash.put("tAdvancedHash_PosOrder_1", System.currentTimeMillis());




/**
 * [tAdvancedHash_PosOrder_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrder_1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_1";

	

 



/**
 * [tAdvancedHash_PosOrder_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class PosSessionStruct implements routines.system.IPersistableComparableLookupRow<PosSessionStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String message_main_attachment_id;

				public String getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public Integer config_id;

				public Integer getConfig_id () {
					return this.config_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public java.util.Date start_at;

				public java.util.Date getStart_at () {
					return this.start_at;
				}
				
			    public String stop_at;

				public String getStop_at () {
					return this.stop_at;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public Integer sequence_number;

				public Integer getSequence_number () {
					return this.sequence_number;
				}
				
			    public Integer login_number;

				public Integer getLogin_number () {
					return this.login_number;
				}
				
			    public String opening_notes;

				public String getOpening_notes () {
					return this.opening_notes;
				}
				
			    public Integer cash_journal_id;

				public Integer getCash_journal_id () {
					return this.cash_journal_id;
				}
				
			    public Integer cash_register_id;

				public Integer getCash_register_id () {
					return this.cash_register_id;
				}
				
			    public String cash_real_difference;

				public String getCash_real_difference () {
					return this.cash_real_difference;
				}
				
			    public String cash_real_transaction;

				public String getCash_real_transaction () {
					return this.cash_real_transaction;
				}
				
			    public String cash_real_expected;

				public String getCash_real_expected () {
					return this.cash_real_expected;
				}
				
			    public String rescue;

				public String getRescue () {
					return this.rescue;
				}
				
			    public String move_id;

				public String getMove_id () {
					return this.move_id;
				}
				
			    public Boolean update_stock_at_closing;

				public Boolean getUpdate_stock_at_closing () {
					return this.update_stock_at_closing;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PosSessionStruct other = (PosSessionStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PosSessionStruct other) {

		other.id = this.id;
	            other.message_main_attachment_id = this.message_main_attachment_id;
	            other.config_id = this.config_id;
	            other.name = this.name;
	            other.user_id = this.user_id;
	            other.start_at = this.start_at;
	            other.stop_at = this.stop_at;
	            other.state = this.state;
	            other.sequence_number = this.sequence_number;
	            other.login_number = this.login_number;
	            other.opening_notes = this.opening_notes;
	            other.cash_journal_id = this.cash_journal_id;
	            other.cash_register_id = this.cash_register_id;
	            other.cash_real_difference = this.cash_real_difference;
	            other.cash_real_transaction = this.cash_real_transaction;
	            other.cash_real_expected = this.cash_real_expected;
	            other.rescue = this.rescue;
	            other.move_id = this.move_id;
	            other.update_stock_at_closing = this.update_stock_at_closing;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            
	}

	public void copyKeysDataTo(PosSessionStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.message_main_attachment_id = readString(dis,ois);
					
						this.config_id = readInteger(dis,ois);
					
						this.name = readString(dis,ois);
					
						this.user_id = readInteger(dis,ois);
					
						this.start_at = readDate(dis,ois);
					
						this.stop_at = readString(dis,ois);
					
						this.state = readString(dis,ois);
					
						this.sequence_number = readInteger(dis,ois);
					
						this.login_number = readInteger(dis,ois);
					
						this.opening_notes = readString(dis,ois);
					
						this.cash_journal_id = readInteger(dis,ois);
					
						this.cash_register_id = readInteger(dis,ois);
					
						this.cash_real_difference = readString(dis,ois);
					
						this.cash_real_transaction = readString(dis,ois);
					
						this.cash_real_expected = readString(dis,ois);
					
						this.rescue = readString(dis,ois);
					
						this.move_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.update_stock_at_closing = null;
           				} else {
           			    	this.update_stock_at_closing = dis.readBoolean();
           				}
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.message_main_attachment_id = readString(dis,objectIn);
					
						this.config_id = readInteger(dis,objectIn);
					
						this.name = readString(dis,objectIn);
					
						this.user_id = readInteger(dis,objectIn);
					
						this.start_at = readDate(dis,objectIn);
					
						this.stop_at = readString(dis,objectIn);
					
						this.state = readString(dis,objectIn);
					
						this.sequence_number = readInteger(dis,objectIn);
					
						this.login_number = readInteger(dis,objectIn);
					
						this.opening_notes = readString(dis,objectIn);
					
						this.cash_journal_id = readInteger(dis,objectIn);
					
						this.cash_register_id = readInteger(dis,objectIn);
					
						this.cash_real_difference = readString(dis,objectIn);
					
						this.cash_real_transaction = readString(dis,objectIn);
					
						this.cash_real_expected = readString(dis,objectIn);
					
						this.rescue = readString(dis,objectIn);
					
						this.move_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.update_stock_at_closing = null;
           				} else {
           			    	this.update_stock_at_closing = objectIn.readBoolean();
           				}
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.message_main_attachment_id, dos, oos);
					
					writeInteger(this.config_id, dos, oos);
					
						writeString(this.name, dos, oos);
					
					writeInteger(this.user_id, dos, oos);
					
						writeDate(this.start_at, dos, oos);
					
						writeString(this.stop_at, dos, oos);
					
						writeString(this.state, dos, oos);
					
					writeInteger(this.sequence_number, dos, oos);
					
					writeInteger(this.login_number, dos, oos);
					
						writeString(this.opening_notes, dos, oos);
					
					writeInteger(this.cash_journal_id, dos, oos);
					
					writeInteger(this.cash_register_id, dos, oos);
					
						writeString(this.cash_real_difference, dos, oos);
					
						writeString(this.cash_real_transaction, dos, oos);
					
						writeString(this.cash_real_expected, dos, oos);
					
						writeString(this.rescue, dos, oos);
					
						writeString(this.move_id, dos, oos);
					
						if(this.update_stock_at_closing == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.update_stock_at_closing);
		            	}
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.message_main_attachment_id, dos, objectOut);
					
					writeInteger(this.config_id, dos, objectOut);
					
						writeString(this.name, dos, objectOut);
					
					writeInteger(this.user_id, dos, objectOut);
					
						writeDate(this.start_at, dos, objectOut);
					
						writeString(this.stop_at, dos, objectOut);
					
						writeString(this.state, dos, objectOut);
					
					writeInteger(this.sequence_number, dos, objectOut);
					
					writeInteger(this.login_number, dos, objectOut);
					
						writeString(this.opening_notes, dos, objectOut);
					
					writeInteger(this.cash_journal_id, dos, objectOut);
					
					writeInteger(this.cash_register_id, dos, objectOut);
					
						writeString(this.cash_real_difference, dos, objectOut);
					
						writeString(this.cash_real_transaction, dos, objectOut);
					
						writeString(this.cash_real_expected, dos, objectOut);
					
						writeString(this.rescue, dos, objectOut);
					
						writeString(this.move_id, dos, objectOut);
					
						if(this.update_stock_at_closing == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.update_stock_at_closing);
		            	}
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",message_main_attachment_id="+message_main_attachment_id);
		sb.append(",config_id="+String.valueOf(config_id));
		sb.append(",name="+name);
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",start_at="+String.valueOf(start_at));
		sb.append(",stop_at="+stop_at);
		sb.append(",state="+state);
		sb.append(",sequence_number="+String.valueOf(sequence_number));
		sb.append(",login_number="+String.valueOf(login_number));
		sb.append(",opening_notes="+opening_notes);
		sb.append(",cash_journal_id="+String.valueOf(cash_journal_id));
		sb.append(",cash_register_id="+String.valueOf(cash_register_id));
		sb.append(",cash_real_difference="+cash_real_difference);
		sb.append(",cash_real_transaction="+cash_real_transaction);
		sb.append(",cash_real_expected="+cash_real_expected);
		sb.append(",rescue="+rescue);
		sb.append(",move_id="+move_id);
		sb.append(",update_stock_at_closing="+String.valueOf(update_stock_at_closing));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosSessionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		PosSessionStruct PosSession = new PosSessionStruct();




	
	/**
	 * [tAdvancedHash_PosSession begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_PosSession", false);
		start_Hash.put("tAdvancedHash_PosSession", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_PosSession";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosSession");
					}
				
		int tos_count_tAdvancedHash_PosSession = 0;
		

			   		// connection name:PosSession
			   		// source node:tFileInputDelimited_6 - inputs:(after_tFileInputDelimited_3) outputs:(PosSession,PosSession) | target node:tAdvancedHash_PosSession - inputs:(PosSession) outputs:()
			   		// linked node: tMap_1 - inputs:(PosOrder_1,PosSession,DimStore,PosOrderLine_2) outputs:(copyOfout1,copyOfout1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosSession = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosSessionStruct> tHash_Lookup_PosSession =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<PosSessionStruct>getLookup(matchingModeEnum_PosSession);
	   						   
		   	   	   globalMap.put("tHash_Lookup_PosSession", tHash_Lookup_PosSession);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_PosSession begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = context.temp_path+"/posSession.csv";
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posSession.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						PosSession = null;			
									
			    						PosSession = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									PosSession = new PosSessionStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
							PosSession.message_main_attachment_id = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.config_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"config_id", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.config_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
							PosSession.name = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 4;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 5;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    									PosSession.start_at = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"start_at", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.start_at = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 6;
					
							PosSession.stop_at = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 7;
					
							PosSession.state = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 8;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.sequence_number = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_number", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.sequence_number = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 9;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.login_number = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"login_number", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.login_number = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 10;
					
							PosSession.opening_notes = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 11;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.cash_journal_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"cash_journal_id", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.cash_journal_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 12;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.cash_register_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"cash_register_id", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.cash_register_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 13;
					
							PosSession.cash_real_difference = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 14;
					
							PosSession.cash_real_transaction = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 15;
					
							PosSession.cash_real_expected = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 16;
					
							PosSession.rescue = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 17;
					
							PosSession.move_id = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 18;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.update_stock_at_closing = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"update_stock_at_closing", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.update_stock_at_closing = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 19;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 20;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    									PosSession.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 21;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								PosSession.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 22;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    									PosSession.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosSession", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									PosSession.write_date = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosSession = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "PosSession"
if(PosSession != null) { 



	
	/**
	 * [tAdvancedHash_PosSession main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosSession";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosSession"
						
						);
					}
					


			   
			   

					PosSessionStruct PosSession_HashRow = new PosSessionStruct();
		   	   	   
				
				PosSession_HashRow.id = PosSession.id;
				
				PosSession_HashRow.message_main_attachment_id = PosSession.message_main_attachment_id;
				
				PosSession_HashRow.config_id = PosSession.config_id;
				
				PosSession_HashRow.name = PosSession.name;
				
				PosSession_HashRow.user_id = PosSession.user_id;
				
				PosSession_HashRow.start_at = PosSession.start_at;
				
				PosSession_HashRow.stop_at = PosSession.stop_at;
				
				PosSession_HashRow.state = PosSession.state;
				
				PosSession_HashRow.sequence_number = PosSession.sequence_number;
				
				PosSession_HashRow.login_number = PosSession.login_number;
				
				PosSession_HashRow.opening_notes = PosSession.opening_notes;
				
				PosSession_HashRow.cash_journal_id = PosSession.cash_journal_id;
				
				PosSession_HashRow.cash_register_id = PosSession.cash_register_id;
				
				PosSession_HashRow.cash_real_difference = PosSession.cash_real_difference;
				
				PosSession_HashRow.cash_real_transaction = PosSession.cash_real_transaction;
				
				PosSession_HashRow.cash_real_expected = PosSession.cash_real_expected;
				
				PosSession_HashRow.rescue = PosSession.rescue;
				
				PosSession_HashRow.move_id = PosSession.move_id;
				
				PosSession_HashRow.update_stock_at_closing = PosSession.update_stock_at_closing;
				
				PosSession_HashRow.create_uid = PosSession.create_uid;
				
				PosSession_HashRow.create_date = PosSession.create_date;
				
				PosSession_HashRow.write_uid = PosSession.write_uid;
				
				PosSession_HashRow.write_date = PosSession.write_date;
				
			tHash_Lookup_PosSession.put(PosSession_HashRow);
			
            




 


	tos_count_tAdvancedHash_PosSession++;

/**
 * [tAdvancedHash_PosSession main ] stop
 */
	
	/**
	 * [tAdvancedHash_PosSession process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosSession";

	

 



/**
 * [tAdvancedHash_PosSession process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_PosSession process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosSession";

	

 



/**
 * [tAdvancedHash_PosSession process_data_end ] stop
 */

} // End of branch "PosSession"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posSession.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_PosSession end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosSession";

	

tHash_Lookup_PosSession.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosSession");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_PosSession", true);
end_Hash.put("tAdvancedHash_PosSession", System.currentTimeMillis());




/**
 * [tAdvancedHash_PosSession end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_PosSession finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosSession";

	

 



/**
 * [tAdvancedHash_PosSession finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class DimStoreStruct implements routines.system.IPersistableComparableLookupRow<DimStoreStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer store_key;

				public Integer getStore_key () {
					return this.store_key;
				}
				
			    public Integer store_id;

				public Integer getStore_id () {
					return this.store_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.store_id == null) ? 0 : this.store_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimStoreStruct other = (DimStoreStruct) obj;
		
						if (this.store_id == null) {
							if (other.store_id != null)
								return false;
						
						} else if (!this.store_id.equals(other.store_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DimStoreStruct other) {

		other.store_key = this.store_key;
	            other.store_id = this.store_id;
	            other.name = this.name;
	            
	}

	public void copyKeysDataTo(DimStoreStruct other) {

		other.store_id = this.store_id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.store_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.store_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.store_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.store_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.store_key = readInteger(dis,ois);
					
						this.name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.store_key = readInteger(dis,objectIn);
					
						this.name = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.store_key, dos, oos);
					
						writeString(this.name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.store_key, dos, objectOut);
					
						writeString(this.name, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("store_key="+String.valueOf(store_key));
		sb.append(",store_id="+String.valueOf(store_id));
		sb.append(",name="+name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimStoreStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.store_id, other.store_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DimStoreStruct DimStore = new DimStoreStruct();




	
	/**
	 * [tAdvancedHash_DimStore begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_DimStore", false);
		start_Hash.put("tAdvancedHash_DimStore", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_DimStore";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimStore");
					}
				
		int tos_count_tAdvancedHash_DimStore = 0;
		

			   		// connection name:DimStore
			   		// source node:tFileInputDelimited_7 - inputs:(after_tFileInputDelimited_3) outputs:(DimStore,DimStore) | target node:tAdvancedHash_DimStore - inputs:(DimStore) outputs:()
			   		// linked node: tMap_1 - inputs:(PosOrder_1,PosSession,DimStore,PosOrderLine_2) outputs:(copyOfout1,copyOfout1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DimStore = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct> tHash_Lookup_DimStore =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<DimStoreStruct>getLookup(matchingModeEnum_DimStore);
	   						   
		   	   	   globalMap.put("tHash_Lookup_DimStore", tHash_Lookup_DimStore);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_DimStore begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try{
					
						Object filename_tFileInputDelimited_7 = context.temp_path+"/DimStore.csv";
						if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
			if(footer_value_tFileInputDelimited_7 >0 || random_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/DimStore.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_7
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_7!=null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();
						
			    						DimStore = null;			
									
			    						DimStore = null;			
												
									boolean whetherReject_tFileInputDelimited_7 = false;
									DimStore = new DimStoreStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_7 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_7 = 0;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								DimStore.store_key = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"store_key", "DimStore", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									DimStore.store_key = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 1;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								DimStore.store_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"store_id", "DimStore", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									DimStore.store_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 2;
					
							DimStore.name = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
				
										
										if(rowstate_tFileInputDelimited_7.getException()!=null) {
											throw rowstate_tFileInputDelimited_7.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_7 = true;
			        					
			                					System.err.println(e.getMessage());
			                					DimStore = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "DimStore"
if(DimStore != null) { 



	
	/**
	 * [tAdvancedHash_DimStore main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimStore";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimStore"
						
						);
					}
					


			   
			   

					DimStoreStruct DimStore_HashRow = new DimStoreStruct();
		   	   	   
				
				DimStore_HashRow.store_key = DimStore.store_key;
				
				DimStore_HashRow.store_id = DimStore.store_id;
				
				DimStore_HashRow.name = DimStore.name;
				
			tHash_Lookup_DimStore.put(DimStore_HashRow);
			
            




 


	tos_count_tAdvancedHash_DimStore++;

/**
 * [tAdvancedHash_DimStore main ] stop
 */
	
	/**
	 * [tAdvancedHash_DimStore process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimStore";

	

 



/**
 * [tAdvancedHash_DimStore process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_DimStore process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimStore";

	

 



/**
 * [tAdvancedHash_DimStore process_data_end ] stop
 */

} // End of branch "DimStore"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/DimStore.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_7!=null){
                		fid_tFileInputDelimited_7.close();
                	}
                }
                if(fid_tFileInputDelimited_7!=null){
                	globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_DimStore end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimStore";

	

tHash_Lookup_DimStore.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimStore");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_DimStore", true);
end_Hash.put("tAdvancedHash_DimStore", System.currentTimeMillis());




/**
 * [tAdvancedHash_DimStore end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_DimStore finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DimStore";

	

 



/**
 * [tAdvancedHash_DimStore finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableComparableLookupRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer store_key;

				public Integer getStore_key () {
					return this.store_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sale_id == null) ? 0 : this.sale_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfout1Struct other = (copyOfout1Struct) obj;
		
						if (this.sale_id == null) {
							if (other.sale_id != null)
								return false;
						
						} else if (!this.sale_id.equals(other.sale_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfout1Struct other) {

		other.sale_id = this.sale_id;
	            other.store_key = this.store_key;
	            
	}

	public void copyKeysDataTo(copyOfout1Struct other) {

		other.sale_id = this.sale_id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.store_key = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.store_key = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.store_key, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.store_key, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",store_key="+String.valueOf(store_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sale_id, other.sale_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PosOrderLine_2Struct implements routines.system.IPersistableRow<PosOrderLine_2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrderLine_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_3Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_5Process(globalMap);
		tFileInputDelimited_6Process(globalMap);
		tFileInputDelimited_7Process(globalMap);

		PosOrderLine_2Struct PosOrderLine_2 = new PosOrderLine_2Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();





	
	/**
	 * [tAdvancedHash_copyOfout1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_copyOfout1", false);
		start_Hash.put("tAdvancedHash_copyOfout1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_copyOfout1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tAdvancedHash_copyOfout1 = 0;
		

			   		// connection name:copyOfout1
			   		// source node:tMap_1 - inputs:(PosOrder_1,PosSession,DimStore,PosOrderLine_2) outputs:(copyOfout1,copyOfout1) | target node:tAdvancedHash_copyOfout1 - inputs:(copyOfout1) outputs:()
			   		// linked node: tMap_3 - inputs:(row8,copyOfout1,out6) outputs:(copyOfout1_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfout1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfout1Struct> tHash_Lookup_copyOfout1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<copyOfout1Struct>getLookup(matchingModeEnum_copyOfout1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_copyOfout1", tHash_Lookup_copyOfout1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_copyOfout1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrderLine_2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_1Struct> tHash_Lookup_PosOrder_1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_1Struct>) 
					globalMap.get( "tHash_Lookup_PosOrder_1" ))
					;					
					
	

PosOrder_1Struct PosOrder_1HashKey = new PosOrder_1Struct();
PosOrder_1Struct PosOrder_1Default = new PosOrder_1Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosSessionStruct> tHash_Lookup_PosSession = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosSessionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosSessionStruct>) 
					globalMap.get( "tHash_Lookup_PosSession" ))
					;					
					
	

PosSessionStruct PosSessionHashKey = new PosSessionStruct();
PosSessionStruct PosSessionDefault = new PosSessionStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct> tHash_Lookup_DimStore = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DimStoreStruct>) 
					globalMap.get( "tHash_Lookup_DimStore" ))
					;					
					
	

DimStoreStruct DimStoreHashKey = new DimStoreStruct();
DimStoreStruct DimStoreDefault = new DimStoreStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = context.temp_path+"/posOrderLine.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrderLine.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						PosOrderLine_2 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									PosOrderLine_2 = new PosOrderLine_2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							PosOrderLine_2.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							PosOrderLine_2.notice = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"product_id", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.product_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.price_unit = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_unit", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.price_unit = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.qty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"qty", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.qty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.price_subtotal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.price_subtotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.price_subtotal_incl = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal_incl", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.price_subtotal_incl = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							PosOrderLine_2.total_cost = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.is_total_cost_computed = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_total_cost_computed", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.is_total_cost_computed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.discount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"discount", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.order_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"order_id", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.order_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
							PosOrderLine_2.full_product_name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
							PosOrderLine_2.customer_note = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 15;
					
							PosOrderLine_2.refunded_orderline_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 16;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 17;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine_2.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 18;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_2.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 19;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine_2.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrderLine_2", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									PosOrderLine_2.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 20;
					
							PosOrderLine_2.sale_order_origin_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 21;
					
							PosOrderLine_2.sale_order_line_id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 22;
					
							PosOrderLine_2.down_payment_details = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrderLine_2 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "PosOrderLine_2"
if(PosOrderLine_2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrderLine_2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "PosOrder_1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopPosOrder_1 = false;
       		  	    	
       		  	    	
 							PosOrder_1Struct PosOrder_1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    PosOrder_1HashKey.id = PosOrderLine_2.order_id ;
                        		    		

								
		                        	PosOrder_1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_PosOrder_1.lookup( PosOrder_1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_PosOrder_1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_PosOrder_1 != null && tHash_Lookup_PosOrder_1.getCount(PosOrder_1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'PosOrder_1' and it contains more one result from keys :  PosOrder_1.id = '" + PosOrder_1HashKey.id + "'");
								} // G 071
							

							PosOrder_1Struct PosOrder_1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	PosOrder_1Struct fromLookup_PosOrder_1 = null;
							PosOrder_1 = PosOrder_1Default;
										 
							
								 
							
							
								if (tHash_Lookup_PosOrder_1 !=null && tHash_Lookup_PosOrder_1.hasNext()) { // G 099
								
							
								
								fromLookup_PosOrder_1 = tHash_Lookup_PosOrder_1.next();

							
							
								} // G 099
							
							

							if(fromLookup_PosOrder_1 != null) {
								PosOrder_1 = fromLookup_PosOrder_1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "PosSession" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopPosSession = false;
       		  	    	
       		  	    	
 							PosSessionStruct PosSessionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    PosSessionHashKey.id = PosOrder_1.session_id ;
                        		    		

								
		                        	PosSessionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_PosSession.lookup( PosSessionHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_PosSession.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_PosSession != null && tHash_Lookup_PosSession.getCount(PosSessionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'PosSession' and it contains more one result from keys :  PosSession.id = '" + PosSessionHashKey.id + "'");
								} // G 071
							

							PosSessionStruct PosSession = null;
                    		  	 
							   
                    		  	 
	       		  	    	PosSessionStruct fromLookup_PosSession = null;
							PosSession = PosSessionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_PosSession !=null && tHash_Lookup_PosSession.hasNext()) { // G 099
								
							
								
								fromLookup_PosSession = tHash_Lookup_PosSession.next();

							
							
								} // G 099
							
							

							if(fromLookup_PosSession != null) {
								PosSession = fromLookup_PosSession;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "DimStore" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopDimStore = false;
       		  	    	
       		  	    	
 							DimStoreStruct DimStoreObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    DimStoreHashKey.store_id = PosSession.config_id ;
                        		    		

								
		                        	DimStoreHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_DimStore.lookup( DimStoreHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_DimStore.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_DimStore != null && tHash_Lookup_DimStore.getCount(DimStoreHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'DimStore' and it contains more one result from keys :  DimStore.store_id = '" + DimStoreHashKey.store_id + "'");
								} // G 071
							

							DimStoreStruct DimStore = null;
                    		  	 
							   
                    		  	 
	       		  	    	DimStoreStruct fromLookup_DimStore = null;
							DimStore = DimStoreDefault;
										 
							
								 
							
							
								if (tHash_Lookup_DimStore !=null && tHash_Lookup_DimStore.hasNext()) { // G 099
								
							
								
								fromLookup_DimStore = tHash_Lookup_DimStore.next();

							
							
								} // G 099
							
							

							if(fromLookup_DimStore != null) {
								DimStore = fromLookup_DimStore;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'copyOfout1'
copyOfout1_tmp.sale_id = PosOrderLine_2.id ;
copyOfout1_tmp.store_key =  DimStore.store_key ;
copyOfout1 = copyOfout1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tAdvancedHash_copyOfout1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfout1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1"
						
						);
					}
					


			   
			   

					copyOfout1Struct copyOfout1_HashRow = new copyOfout1Struct();
		   	   	   
				
				copyOfout1_HashRow.sale_id = copyOfout1.sale_id;
				
				copyOfout1_HashRow.store_key = copyOfout1.store_key;
				
			tHash_Lookup_copyOfout1.put(copyOfout1_HashRow);
			
            




 


	tos_count_tAdvancedHash_copyOfout1++;

/**
 * [tAdvancedHash_copyOfout1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfout1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfout1";

	

 



/**
 * [tAdvancedHash_copyOfout1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfout1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfout1";

	

 



/**
 * [tAdvancedHash_copyOfout1 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "PosOrderLine_2"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrderLine.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_PosOrder_1 != null) {
						tHash_Lookup_PosOrder_1.endGet();
					}
					globalMap.remove( "tHash_Lookup_PosOrder_1" );

					
					
				
					if(tHash_Lookup_PosSession != null) {
						tHash_Lookup_PosSession.endGet();
					}
					globalMap.remove( "tHash_Lookup_PosSession" );

					
					
				
					if(tHash_Lookup_DimStore != null) {
						tHash_Lookup_DimStore.endGet();
					}
					globalMap.remove( "tHash_Lookup_DimStore" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrderLine_2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfout1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfout1";

	

tHash_Lookup_copyOfout1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_copyOfout1", true);
end_Hash.put("tAdvancedHash_copyOfout1", System.currentTimeMillis());




/**
 * [tAdvancedHash_copyOfout1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_PosOrder_1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_PosSession"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_DimStore"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfout1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfout1";

	

 



/**
 * [tAdvancedHash_copyOfout1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class PosOrderLineStruct implements routines.system.IPersistableComparableLookupRow<PosOrderLineStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PosOrderLineStruct other = (PosOrderLineStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PosOrderLineStruct other) {

		other.id = this.id;
	            other.company_id = this.company_id;
	            other.name = this.name;
	            other.notice = this.notice;
	            other.product_id = this.product_id;
	            other.price_unit = this.price_unit;
	            other.qty = this.qty;
	            other.price_subtotal = this.price_subtotal;
	            other.price_subtotal_incl = this.price_subtotal_incl;
	            other.total_cost = this.total_cost;
	            other.is_total_cost_computed = this.is_total_cost_computed;
	            other.discount = this.discount;
	            other.order_id = this.order_id;
	            other.full_product_name = this.full_product_name;
	            other.customer_note = this.customer_note;
	            other.refunded_orderline_id = this.refunded_orderline_id;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.sale_order_origin_id = this.sale_order_origin_id;
	            other.sale_order_line_id = this.sale_order_line_id;
	            other.down_payment_details = this.down_payment_details;
	            
	}

	public void copyKeysDataTo(PosOrderLineStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.company_id = readInteger(dis,ois);
					
						this.name = readString(dis,ois);
					
						this.notice = readString(dis,ois);
					
						this.product_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis,ois);
					
						this.price_subtotal = readInteger(dis,ois);
					
						this.price_subtotal_incl = readInteger(dis,ois);
					
						this.total_cost = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis,ois);
					
						this.full_product_name = readString(dis,ois);
					
						this.customer_note = readString(dis,ois);
					
						this.refunded_orderline_id = readString(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.sale_order_origin_id = readString(dis,ois);
					
						this.sale_order_line_id = readString(dis,ois);
					
						this.down_payment_details = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.company_id = readInteger(dis,objectIn);
					
						this.name = readString(dis,objectIn);
					
						this.notice = readString(dis,objectIn);
					
						this.product_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = objectIn.readFloat();
           				}
					
						this.qty = readInteger(dis,objectIn);
					
						this.price_subtotal = readInteger(dis,objectIn);
					
						this.price_subtotal_incl = readInteger(dis,objectIn);
					
						this.total_cost = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = objectIn.readFloat();
           				}
					
						this.order_id = readInteger(dis,objectIn);
					
						this.full_product_name = readString(dis,objectIn);
					
						this.customer_note = readString(dis,objectIn);
					
						this.refunded_orderline_id = readString(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.sale_order_origin_id = readString(dis,objectIn);
					
						this.sale_order_line_id = readString(dis,objectIn);
					
						this.down_payment_details = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.company_id, dos, oos);
					
						writeString(this.name, dos, oos);
					
						writeString(this.notice, dos, oos);
					
					writeInteger(this.product_id, dos, oos);
					
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					writeInteger(this.qty, dos, oos);
					
					writeInteger(this.price_subtotal, dos, oos);
					
					writeInteger(this.price_subtotal_incl, dos, oos);
					
						writeString(this.total_cost, dos, oos);
					
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					writeInteger(this.order_id, dos, oos);
					
						writeString(this.full_product_name, dos, oos);
					
						writeString(this.customer_note, dos, oos);
					
						writeString(this.refunded_orderline_id, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.sale_order_origin_id, dos, oos);
					
						writeString(this.sale_order_line_id, dos, oos);
					
						writeString(this.down_payment_details, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.company_id, dos, objectOut);
					
						writeString(this.name, dos, objectOut);
					
						writeString(this.notice, dos, objectOut);
					
					writeInteger(this.product_id, dos, objectOut);
					
						if(this.price_unit == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.price_unit);
		            	}
					
					writeInteger(this.qty, dos, objectOut);
					
					writeInteger(this.price_subtotal, dos, objectOut);
					
					writeInteger(this.price_subtotal_incl, dos, objectOut);
					
						writeString(this.total_cost, dos, objectOut);
					
						if(this.is_total_cost_computed == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_total_cost_computed);
		            	}
					
						if(this.discount == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.discount);
		            	}
					
					writeInteger(this.order_id, dos, objectOut);
					
						writeString(this.full_product_name, dos, objectOut);
					
						writeString(this.customer_note, dos, objectOut);
					
						writeString(this.refunded_orderline_id, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.sale_order_origin_id, dos, objectOut);
					
						writeString(this.sale_order_line_id, dos, objectOut);
					
						writeString(this.down_payment_details, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrderLineStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		PosOrderLineStruct PosOrderLine = new PosOrderLineStruct();




	
	/**
	 * [tAdvancedHash_PosOrderLine begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_PosOrderLine", false);
		start_Hash.put("tAdvancedHash_PosOrderLine", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_PosOrderLine";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrderLine");
					}
				
		int tos_count_tAdvancedHash_PosOrderLine = 0;
		

			   		// connection name:PosOrderLine
			   		// source node:tFileInputDelimited_12 - inputs:(after_tFileInputDelimited_1) outputs:(PosOrderLine,PosOrderLine) | target node:tAdvancedHash_PosOrderLine - inputs:(PosOrderLine) outputs:()
			   		// linked node: tMap_5 - inputs:(copyOfout1_0,PosOrderLine,PosOrder) outputs:(SalesFact)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosOrderLine = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderLineStruct> tHash_Lookup_PosOrderLine =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<PosOrderLineStruct>getLookup(matchingModeEnum_PosOrderLine);
	   						   
		   	   	   globalMap.put("tHash_Lookup_PosOrderLine", tHash_Lookup_PosOrderLine);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_PosOrderLine begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_12", false);
		start_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_12";

	
		int tos_count_tFileInputDelimited_12 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_12 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				int limit_tFileInputDelimited_12 = -1;
				try{
					
						Object filename_tFileInputDelimited_12 = context.temp_path+"/posOrderLine.csv";
						if(filename_tFileInputDelimited_12 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
			if(footer_value_tFileInputDelimited_12 >0 || random_value_tFileInputDelimited_12 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrderLine.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_12
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_12!=null && fid_tFileInputDelimited_12.nextRecord()) {
						rowstate_tFileInputDelimited_12.reset();
						
			    						PosOrderLine = null;			
									
			    						PosOrderLine = null;			
												
									boolean whetherReject_tFileInputDelimited_12 = false;
									PosOrderLine = new PosOrderLineStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_12 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_12 = 0;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 1;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 2;
					
							PosOrderLine.name = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 3;
					
							PosOrderLine.notice = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 4;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"product_id", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.product_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 5;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.price_unit = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_unit", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.price_unit = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 6;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.qty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"qty", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.qty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 7;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.price_subtotal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.price_subtotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 8;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.price_subtotal_incl = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal_incl", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.price_subtotal_incl = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 9;
					
							PosOrderLine.total_cost = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 10;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.is_total_cost_computed = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_total_cost_computed", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.is_total_cost_computed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 11;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.discount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"discount", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 12;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.order_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"order_id", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.order_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 13;
					
							PosOrderLine.full_product_name = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 14;
					
							PosOrderLine.customer_note = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 15;
					
							PosOrderLine.refunded_orderline_id = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 16;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 17;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 18;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 19;
					
						temp = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_12) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",ex_tFileInputDelimited_12.getMessage());
									rowstate_tFileInputDelimited_12.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrderLine", temp, ex_tFileInputDelimited_12), ex_tFileInputDelimited_12));
								}
    							
						} else {						
							
								
									PosOrderLine.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_12 = 20;
					
							PosOrderLine.sale_order_origin_id = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 21;
					
							PosOrderLine.sale_order_line_id = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
					columnIndexWithD_tFileInputDelimited_12 = 22;
					
							PosOrderLine.down_payment_details = fid_tFileInputDelimited_12.get(columnIndexWithD_tFileInputDelimited_12);
						
				
				
										
										if(rowstate_tFileInputDelimited_12.getException()!=null) {
											throw rowstate_tFileInputDelimited_12.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_12 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrderLine = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_12 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_12 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 


	tos_count_tFileInputDelimited_12++;

/**
 * [tFileInputDelimited_12 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 



/**
 * [tFileInputDelimited_12 process_data_begin ] stop
 */
// Start of branch "PosOrderLine"
if(PosOrderLine != null) { 



	
	/**
	 * [tAdvancedHash_PosOrderLine main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrderLine";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrderLine"
						
						);
					}
					


			   
			   

					PosOrderLineStruct PosOrderLine_HashRow = new PosOrderLineStruct();
		   	   	   
				
				PosOrderLine_HashRow.id = PosOrderLine.id;
				
				PosOrderLine_HashRow.company_id = PosOrderLine.company_id;
				
				PosOrderLine_HashRow.name = PosOrderLine.name;
				
				PosOrderLine_HashRow.notice = PosOrderLine.notice;
				
				PosOrderLine_HashRow.product_id = PosOrderLine.product_id;
				
				PosOrderLine_HashRow.price_unit = PosOrderLine.price_unit;
				
				PosOrderLine_HashRow.qty = PosOrderLine.qty;
				
				PosOrderLine_HashRow.price_subtotal = PosOrderLine.price_subtotal;
				
				PosOrderLine_HashRow.price_subtotal_incl = PosOrderLine.price_subtotal_incl;
				
				PosOrderLine_HashRow.total_cost = PosOrderLine.total_cost;
				
				PosOrderLine_HashRow.is_total_cost_computed = PosOrderLine.is_total_cost_computed;
				
				PosOrderLine_HashRow.discount = PosOrderLine.discount;
				
				PosOrderLine_HashRow.order_id = PosOrderLine.order_id;
				
				PosOrderLine_HashRow.full_product_name = PosOrderLine.full_product_name;
				
				PosOrderLine_HashRow.customer_note = PosOrderLine.customer_note;
				
				PosOrderLine_HashRow.refunded_orderline_id = PosOrderLine.refunded_orderline_id;
				
				PosOrderLine_HashRow.create_uid = PosOrderLine.create_uid;
				
				PosOrderLine_HashRow.create_date = PosOrderLine.create_date;
				
				PosOrderLine_HashRow.write_uid = PosOrderLine.write_uid;
				
				PosOrderLine_HashRow.write_date = PosOrderLine.write_date;
				
				PosOrderLine_HashRow.sale_order_origin_id = PosOrderLine.sale_order_origin_id;
				
				PosOrderLine_HashRow.sale_order_line_id = PosOrderLine.sale_order_line_id;
				
				PosOrderLine_HashRow.down_payment_details = PosOrderLine.down_payment_details;
				
			tHash_Lookup_PosOrderLine.put(PosOrderLine_HashRow);
			
            




 


	tos_count_tAdvancedHash_PosOrderLine++;

/**
 * [tAdvancedHash_PosOrderLine main ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrderLine process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrderLine";

	

 



/**
 * [tAdvancedHash_PosOrderLine process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrderLine process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrderLine";

	

 



/**
 * [tAdvancedHash_PosOrderLine process_data_end ] stop
 */

} // End of branch "PosOrderLine"




	
	/**
	 * [tFileInputDelimited_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 



/**
 * [tFileInputDelimited_12 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_12 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrderLine.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_12!=null){
                		fid_tFileInputDelimited_12.close();
                	}
                }
                if(fid_tFileInputDelimited_12!=null){
                	globalMap.put("tFileInputDelimited_12_NB_LINE", fid_tFileInputDelimited_12.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_12", true);
end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());




/**
 * [tFileInputDelimited_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrderLine end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrderLine";

	

tHash_Lookup_PosOrderLine.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrderLine");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_PosOrderLine", true);
end_Hash.put("tAdvancedHash_PosOrderLine", System.currentTimeMillis());




/**
 * [tAdvancedHash_PosOrderLine end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_12 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_12";

	

 



/**
 * [tFileInputDelimited_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrderLine finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrderLine";

	

 



/**
 * [tAdvancedHash_PosOrderLine finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}
	


public static class PosOrderStruct implements routines.system.IPersistableComparableLookupRow<PosOrderStruct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Float amount_tax;

				public Float getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer amount_paid;

				public Integer getAmount_paid () {
					return this.amount_paid;
				}
				
			    public Integer amount_return;

				public Integer getAmount_return () {
					return this.amount_return;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public String partner_id;

				public String getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer sequence_number;

				public Integer getSequence_number () {
					return this.sequence_number;
				}
				
			    public Integer session_id;

				public Integer getSession_id () {
					return this.session_id;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String account_move;

				public String getAccount_move () {
					return this.account_move;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer nb_print;

				public Integer getNb_print () {
					return this.nb_print;
				}
				
			    public String pos_reference;

				public String getPos_reference () {
					return this.pos_reference;
				}
				
			    public Integer sale_journal;

				public Integer getSale_journal () {
					return this.sale_journal;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Boolean to_invoice;

				public Boolean getTo_invoice () {
					return this.to_invoice;
				}
				
			    public Boolean to_ship;

				public Boolean getTo_ship () {
					return this.to_ship;
				}
				
			    public Boolean is_tipped;

				public Boolean getIs_tipped () {
					return this.is_tipped;
				}
				
			    public Integer tip_amount;

				public Integer getTip_amount () {
					return this.tip_amount;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PosOrderStruct other = (PosOrderStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PosOrderStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.date_order = this.date_order;
	            other.user_id = this.user_id;
	            other.amount_tax = this.amount_tax;
	            other.amount_total = this.amount_total;
	            other.amount_paid = this.amount_paid;
	            other.amount_return = this.amount_return;
	            other.company_id = this.company_id;
	            other.pricelist_id = this.pricelist_id;
	            other.partner_id = this.partner_id;
	            other.sequence_number = this.sequence_number;
	            other.session_id = this.session_id;
	            other.currency_rate = this.currency_rate;
	            other.state = this.state;
	            other.account_move = this.account_move;
	            other.procurement_group_id = this.procurement_group_id;
	            other.note = this.note;
	            other.nb_print = this.nb_print;
	            other.pos_reference = this.pos_reference;
	            other.sale_journal = this.sale_journal;
	            other.fiscal_position_id = this.fiscal_position_id;
	            other.to_invoice = this.to_invoice;
	            other.to_ship = this.to_ship;
	            other.is_tipped = this.is_tipped;
	            other.tip_amount = this.tip_amount;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.crm_team_id = this.crm_team_id;
	            
	}

	public void copyKeysDataTo(PosOrderStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.date_order = readDate(dis,ois);
					
						this.user_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = dis.readFloat();
           				}
					
						this.amount_total = readInteger(dis,ois);
					
						this.amount_paid = readInteger(dis,ois);
					
						this.amount_return = readInteger(dis,ois);
					
						this.company_id = readInteger(dis,ois);
					
						this.pricelist_id = readInteger(dis,ois);
					
						this.partner_id = readString(dis,ois);
					
						this.sequence_number = readInteger(dis,ois);
					
						this.session_id = readInteger(dis,ois);
					
						this.currency_rate = readInteger(dis,ois);
					
						this.state = readString(dis,ois);
					
						this.account_move = readString(dis,ois);
					
						this.procurement_group_id = readString(dis,ois);
					
						this.note = readString(dis,ois);
					
						this.nb_print = readInteger(dis,ois);
					
						this.pos_reference = readString(dis,ois);
					
						this.sale_journal = readInteger(dis,ois);
					
						this.fiscal_position_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = dis.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.crm_team_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.date_order = readDate(dis,objectIn);
					
						this.user_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = objectIn.readFloat();
           				}
					
						this.amount_total = readInteger(dis,objectIn);
					
						this.amount_paid = readInteger(dis,objectIn);
					
						this.amount_return = readInteger(dis,objectIn);
					
						this.company_id = readInteger(dis,objectIn);
					
						this.pricelist_id = readInteger(dis,objectIn);
					
						this.partner_id = readString(dis,objectIn);
					
						this.sequence_number = readInteger(dis,objectIn);
					
						this.session_id = readInteger(dis,objectIn);
					
						this.currency_rate = readInteger(dis,objectIn);
					
						this.state = readString(dis,objectIn);
					
						this.account_move = readString(dis,objectIn);
					
						this.procurement_group_id = readString(dis,objectIn);
					
						this.note = readString(dis,objectIn);
					
						this.nb_print = readInteger(dis,objectIn);
					
						this.pos_reference = readString(dis,objectIn);
					
						this.sale_journal = readInteger(dis,objectIn);
					
						this.fiscal_position_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = objectIn.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.crm_team_id = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						writeDate(this.date_order, dos, oos);
					
					writeInteger(this.user_id, dos, oos);
					
						if(this.amount_tax == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, oos);
					
					writeInteger(this.amount_paid, dos, oos);
					
					writeInteger(this.amount_return, dos, oos);
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.pricelist_id, dos, oos);
					
						writeString(this.partner_id, dos, oos);
					
					writeInteger(this.sequence_number, dos, oos);
					
					writeInteger(this.session_id, dos, oos);
					
					writeInteger(this.currency_rate, dos, oos);
					
						writeString(this.state, dos, oos);
					
						writeString(this.account_move, dos, oos);
					
						writeString(this.procurement_group_id, dos, oos);
					
						writeString(this.note, dos, oos);
					
					writeInteger(this.nb_print, dos, oos);
					
						writeString(this.pos_reference, dos, oos);
					
					writeInteger(this.sale_journal, dos, oos);
					
						writeString(this.fiscal_position_id, dos, oos);
					
						if(this.to_invoice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.crm_team_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
						writeDate(this.date_order, dos, objectOut);
					
					writeInteger(this.user_id, dos, objectOut);
					
						if(this.amount_tax == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, objectOut);
					
					writeInteger(this.amount_paid, dos, objectOut);
					
					writeInteger(this.amount_return, dos, objectOut);
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.pricelist_id, dos, objectOut);
					
						writeString(this.partner_id, dos, objectOut);
					
					writeInteger(this.sequence_number, dos, objectOut);
					
					writeInteger(this.session_id, dos, objectOut);
					
					writeInteger(this.currency_rate, dos, objectOut);
					
						writeString(this.state, dos, objectOut);
					
						writeString(this.account_move, dos, objectOut);
					
						writeString(this.procurement_group_id, dos, objectOut);
					
						writeString(this.note, dos, objectOut);
					
					writeInteger(this.nb_print, dos, objectOut);
					
						writeString(this.pos_reference, dos, objectOut);
					
					writeInteger(this.sale_journal, dos, objectOut);
					
						writeString(this.fiscal_position_id, dos, objectOut);
					
						if(this.to_invoice == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.crm_team_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",amount_paid="+String.valueOf(amount_paid));
		sb.append(",amount_return="+String.valueOf(amount_return));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",partner_id="+partner_id);
		sb.append(",sequence_number="+String.valueOf(sequence_number));
		sb.append(",session_id="+String.valueOf(session_id));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",state="+state);
		sb.append(",account_move="+account_move);
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",note="+note);
		sb.append(",nb_print="+String.valueOf(nb_print));
		sb.append(",pos_reference="+pos_reference);
		sb.append(",sale_journal="+String.valueOf(sale_journal));
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",to_invoice="+String.valueOf(to_invoice));
		sb.append(",to_ship="+String.valueOf(to_ship));
		sb.append(",is_tipped="+String.valueOf(is_tipped));
		sb.append(",tip_amount="+String.valueOf(tip_amount));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",crm_team_id="+crm_team_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrderStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		PosOrderStruct PosOrder = new PosOrderStruct();




	
	/**
	 * [tAdvancedHash_PosOrder begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_PosOrder", false);
		start_Hash.put("tAdvancedHash_PosOrder", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_PosOrder";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrder");
					}
				
		int tos_count_tAdvancedHash_PosOrder = 0;
		

			   		// connection name:PosOrder
			   		// source node:tFileInputDelimited_13 - inputs:(after_tFileInputDelimited_1) outputs:(PosOrder,PosOrder) | target node:tAdvancedHash_PosOrder - inputs:(PosOrder) outputs:()
			   		// linked node: tMap_5 - inputs:(copyOfout1_0,PosOrderLine,PosOrder) outputs:(SalesFact)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosOrder = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrderStruct> tHash_Lookup_PosOrder =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<PosOrderStruct>getLookup(matchingModeEnum_PosOrder);
	   						   
		   	   	   globalMap.put("tHash_Lookup_PosOrder", tHash_Lookup_PosOrder);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_PosOrder begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_13", false);
		start_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_13";

	
		int tos_count_tFileInputDelimited_13 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_13 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_13 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13 = null;
				int limit_tFileInputDelimited_13 = -1;
				try{
					
						Object filename_tFileInputDelimited_13 = context.temp_path+"/posOrder.csv";
						if(filename_tFileInputDelimited_13 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_13 = 0, random_value_tFileInputDelimited_13 = -1;
			if(footer_value_tFileInputDelimited_13 >0 || random_value_tFileInputDelimited_13 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_13 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrder.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_13
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_13!=null && fid_tFileInputDelimited_13.nextRecord()) {
						rowstate_tFileInputDelimited_13.reset();
						
			    						PosOrder = null;			
									
			    						PosOrder = null;			
												
									boolean whetherReject_tFileInputDelimited_13 = false;
									PosOrder = new PosOrderStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_13 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_13 = 0;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 1;
					
							PosOrder.name = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 2;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 3;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 4;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.amount_tax = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 5;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 6;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.amount_paid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_paid", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.amount_paid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 7;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.amount_return = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_return", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.amount_return = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 8;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 9;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 10;
					
							PosOrder.partner_id = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 11;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.sequence_number = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_number", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.sequence_number = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 12;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.session_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"session_id", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.session_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 13;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 14;
					
							PosOrder.state = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 15;
					
							PosOrder.account_move = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 16;
					
							PosOrder.procurement_group_id = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 17;
					
							PosOrder.note = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 18;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.nb_print = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nb_print", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.nb_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 19;
					
							PosOrder.pos_reference = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 20;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.sale_journal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sale_journal", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.sale_journal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 21;
					
							PosOrder.fiscal_position_id = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 22;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.to_invoice = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_invoice", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.to_invoice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 23;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.to_ship = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_ship", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.to_ship = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 24;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.is_tipped = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_tipped", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.is_tipped = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 25;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.tip_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tip_amount", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.tip_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 26;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 27;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 28;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 29;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrder", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									PosOrder.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 30;
					
							PosOrder.crm_team_id = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
				
										
										if(rowstate_tFileInputDelimited_13.getException()!=null) {
											throw rowstate_tFileInputDelimited_13.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_13 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrder = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_13 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_13 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 


	tos_count_tFileInputDelimited_13++;

/**
 * [tFileInputDelimited_13 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 



/**
 * [tFileInputDelimited_13 process_data_begin ] stop
 */
// Start of branch "PosOrder"
if(PosOrder != null) { 



	
	/**
	 * [tAdvancedHash_PosOrder main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrder"
						
						);
					}
					


			   
			   

					PosOrderStruct PosOrder_HashRow = new PosOrderStruct();
		   	   	   
				
				PosOrder_HashRow.id = PosOrder.id;
				
				PosOrder_HashRow.name = PosOrder.name;
				
				PosOrder_HashRow.date_order = PosOrder.date_order;
				
				PosOrder_HashRow.user_id = PosOrder.user_id;
				
				PosOrder_HashRow.amount_tax = PosOrder.amount_tax;
				
				PosOrder_HashRow.amount_total = PosOrder.amount_total;
				
				PosOrder_HashRow.amount_paid = PosOrder.amount_paid;
				
				PosOrder_HashRow.amount_return = PosOrder.amount_return;
				
				PosOrder_HashRow.company_id = PosOrder.company_id;
				
				PosOrder_HashRow.pricelist_id = PosOrder.pricelist_id;
				
				PosOrder_HashRow.partner_id = PosOrder.partner_id;
				
				PosOrder_HashRow.sequence_number = PosOrder.sequence_number;
				
				PosOrder_HashRow.session_id = PosOrder.session_id;
				
				PosOrder_HashRow.currency_rate = PosOrder.currency_rate;
				
				PosOrder_HashRow.state = PosOrder.state;
				
				PosOrder_HashRow.account_move = PosOrder.account_move;
				
				PosOrder_HashRow.procurement_group_id = PosOrder.procurement_group_id;
				
				PosOrder_HashRow.note = PosOrder.note;
				
				PosOrder_HashRow.nb_print = PosOrder.nb_print;
				
				PosOrder_HashRow.pos_reference = PosOrder.pos_reference;
				
				PosOrder_HashRow.sale_journal = PosOrder.sale_journal;
				
				PosOrder_HashRow.fiscal_position_id = PosOrder.fiscal_position_id;
				
				PosOrder_HashRow.to_invoice = PosOrder.to_invoice;
				
				PosOrder_HashRow.to_ship = PosOrder.to_ship;
				
				PosOrder_HashRow.is_tipped = PosOrder.is_tipped;
				
				PosOrder_HashRow.tip_amount = PosOrder.tip_amount;
				
				PosOrder_HashRow.create_uid = PosOrder.create_uid;
				
				PosOrder_HashRow.create_date = PosOrder.create_date;
				
				PosOrder_HashRow.write_uid = PosOrder.write_uid;
				
				PosOrder_HashRow.write_date = PosOrder.write_date;
				
				PosOrder_HashRow.crm_team_id = PosOrder.crm_team_id;
				
			tHash_Lookup_PosOrder.put(PosOrder_HashRow);
			
            




 


	tos_count_tAdvancedHash_PosOrder++;

/**
 * [tAdvancedHash_PosOrder main ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrder process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder";

	

 



/**
 * [tAdvancedHash_PosOrder process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrder process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder";

	

 



/**
 * [tAdvancedHash_PosOrder process_data_end ] stop
 */

} // End of branch "PosOrder"




	
	/**
	 * [tFileInputDelimited_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 



/**
 * [tFileInputDelimited_13 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_13 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrder.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_13!=null){
                		fid_tFileInputDelimited_13.close();
                	}
                }
                if(fid_tFileInputDelimited_13!=null){
                	globalMap.put("tFileInputDelimited_13_NB_LINE", fid_tFileInputDelimited_13.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_13", true);
end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());




/**
 * [tFileInputDelimited_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrder end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder";

	

tHash_Lookup_PosOrder.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrder");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_PosOrder", true);
end_Hash.put("tAdvancedHash_PosOrder", System.currentTimeMillis());




/**
 * [tAdvancedHash_PosOrder end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_13 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 



/**
 * [tFileInputDelimited_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrder finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder";

	

 



/**
 * [tAdvancedHash_PosOrder finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableComparableLookupRow<out6Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sale_id == null) ? 0 : this.sale_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out6Struct other = (out6Struct) obj;
		
						if (this.sale_id == null) {
							if (other.sale_id != null)
								return false;
						
						} else if (!this.sale_id.equals(other.sale_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out6Struct other) {

		other.sale_id = this.sale_id;
	            other.payment_method_key = this.payment_method_key;
	            
	}

	public void copyKeysDataTo(out6Struct other) {

		other.sale_id = this.sale_id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.payment_method_key = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.payment_method_key = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.payment_method_key, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.payment_method_key, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",payment_method_key="+String.valueOf(payment_method_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sale_id, other.sale_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer sale_id;

				public Integer getSale_id () {
					return this.sale_id;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.order_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.sale_id = readInteger(dis);
					
						this.order_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.sale_id,dos);
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sale_id="+String.valueOf(sale_id));
		sb.append(",order_id="+String.valueOf(order_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PosOrderLine_3Struct implements routines.system.IPersistableRow<PosOrderLine_3Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrderLine_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_8Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String notice;

				public String getNotice () {
					return this.notice;
				}
				
			    public Integer product_id;

				public Integer getProduct_id () {
					return this.product_id;
				}
				
			    public Float price_unit;

				public Float getPrice_unit () {
					return this.price_unit;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Integer price_subtotal;

				public Integer getPrice_subtotal () {
					return this.price_subtotal;
				}
				
			    public Integer price_subtotal_incl;

				public Integer getPrice_subtotal_incl () {
					return this.price_subtotal_incl;
				}
				
			    public String total_cost;

				public String getTotal_cost () {
					return this.total_cost;
				}
				
			    public Boolean is_total_cost_computed;

				public Boolean getIs_total_cost_computed () {
					return this.is_total_cost_computed;
				}
				
			    public Float discount;

				public Float getDiscount () {
					return this.discount;
				}
				
			    public Integer order_id;

				public Integer getOrder_id () {
					return this.order_id;
				}
				
			    public String full_product_name;

				public String getFull_product_name () {
					return this.full_product_name;
				}
				
			    public String customer_note;

				public String getCustomer_note () {
					return this.customer_note;
				}
				
			    public String refunded_orderline_id;

				public String getRefunded_orderline_id () {
					return this.refunded_orderline_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String sale_order_origin_id;

				public String getSale_order_origin_id () {
					return this.sale_order_origin_id;
				}
				
			    public String sale_order_line_id;

				public String getSale_order_line_id () {
					return this.sale_order_line_id;
				}
				
			    public String down_payment_details;

				public String getDown_payment_details () {
					return this.down_payment_details;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.name = readString(dis);
					
					this.notice = readString(dis);
					
						this.product_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.price_unit = null;
           				} else {
           			    	this.price_unit = dis.readFloat();
           				}
					
						this.qty = readInteger(dis);
					
						this.price_subtotal = readInteger(dis);
					
						this.price_subtotal_incl = readInteger(dis);
					
					this.total_cost = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_total_cost_computed = null;
           				} else {
           			    	this.is_total_cost_computed = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.discount = null;
           				} else {
           			    	this.discount = dis.readFloat();
           				}
					
						this.order_id = readInteger(dis);
					
					this.full_product_name = readString(dis);
					
					this.customer_note = readString(dis);
					
					this.refunded_orderline_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.sale_order_origin_id = readString(dis);
					
					this.sale_order_line_id = readString(dis);
					
					this.down_payment_details = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.notice,dos);
					
					// Integer
				
						writeInteger(this.product_id,dos);
					
					// Float
				
						if(this.price_unit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.price_unit);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal,dos);
					
					// Integer
				
						writeInteger(this.price_subtotal_incl,dos);
					
					// String
				
						writeString(this.total_cost,dos);
					
					// Boolean
				
						if(this.is_total_cost_computed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_total_cost_computed);
		            	}
					
					// Float
				
						if(this.discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.discount);
		            	}
					
					// Integer
				
						writeInteger(this.order_id,dos);
					
					// String
				
						writeString(this.full_product_name,dos);
					
					// String
				
						writeString(this.customer_note,dos);
					
					// String
				
						writeString(this.refunded_orderline_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.sale_order_origin_id,dos);
					
					// String
				
						writeString(this.sale_order_line_id,dos);
					
					// String
				
						writeString(this.down_payment_details,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",name="+name);
		sb.append(",notice="+notice);
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",price_unit="+String.valueOf(price_unit));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",price_subtotal="+String.valueOf(price_subtotal));
		sb.append(",price_subtotal_incl="+String.valueOf(price_subtotal_incl));
		sb.append(",total_cost="+total_cost);
		sb.append(",is_total_cost_computed="+String.valueOf(is_total_cost_computed));
		sb.append(",discount="+String.valueOf(discount));
		sb.append(",order_id="+String.valueOf(order_id));
		sb.append(",full_product_name="+full_product_name);
		sb.append(",customer_note="+customer_note);
		sb.append(",refunded_orderline_id="+refunded_orderline_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_origin_id="+sale_order_origin_id);
		sb.append(",sale_order_line_id="+sale_order_line_id);
		sb.append(",down_payment_details="+down_payment_details);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_9Process(globalMap);
		tFileInputDelimited_10Process(globalMap);

		PosOrderLine_3Struct PosOrderLine_3 = new PosOrderLine_3Struct();
out4Struct out4 = new out4Struct();
out6Struct out6 = new out6Struct();






	
	/**
	 * [tAdvancedHash_out6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_out6", false);
		start_Hash.put("tAdvancedHash_out6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_out6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tAdvancedHash_out6 = 0;
		

			   		// connection name:out6
			   		// source node:tMap_9 - inputs:(out4,row9) outputs:(out6,out6) | target node:tAdvancedHash_out6 - inputs:(out6) outputs:()
			   		// linked node: tMap_3 - inputs:(row8,copyOfout1,out6) outputs:(copyOfout1_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_out6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out6Struct> tHash_Lookup_out6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<out6Struct>getLookup(matchingModeEnum_out6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_out6", tHash_Lookup_out6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_out6 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrderLine_3");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_2Struct> tHash_Lookup_PosOrder_2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_2Struct>) 
					globalMap.get( "tHash_Lookup_PosOrder_2" ))
					;					
					
	

PosOrder_2Struct PosOrder_2HashKey = new PosOrder_2Struct();
PosOrder_2Struct PosOrder_2Default = new PosOrder_2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_8", false);
		start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_8";

	
		int tos_count_tFileInputDelimited_8 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try{
					
						Object filename_tFileInputDelimited_8 = context.temp_path+"/posOrderLine.csv";
						if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
			if(footer_value_tFileInputDelimited_8 >0 || random_value_tFileInputDelimited_8 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrderLine.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_8
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_8!=null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();
						
			    						PosOrderLine_3 = null;			
												
									boolean whetherReject_tFileInputDelimited_8 = false;
									PosOrderLine_3 = new PosOrderLine_3Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_8 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_8 = 0;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 1;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 2;
					
							PosOrderLine_3.name = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 3;
					
							PosOrderLine_3.notice = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 4;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.product_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"product_id", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.product_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 5;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.price_unit = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_unit", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.price_unit = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 6;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.qty = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"qty", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.qty = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 7;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.price_subtotal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.price_subtotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 8;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.price_subtotal_incl = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"price_subtotal_incl", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.price_subtotal_incl = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 9;
					
							PosOrderLine_3.total_cost = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 10;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.is_total_cost_computed = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_total_cost_computed", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.is_total_cost_computed = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 11;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.discount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"discount", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.discount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 12;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.order_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"order_id", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.order_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 13;
					
							PosOrderLine_3.full_product_name = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 14;
					
							PosOrderLine_3.customer_note = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 15;
					
							PosOrderLine_3.refunded_orderline_id = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 16;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 17;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine_3.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 18;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrderLine_3.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 19;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrderLine_3.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrderLine_3", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									PosOrderLine_3.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_8 = 20;
					
							PosOrderLine_3.sale_order_origin_id = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 21;
					
							PosOrderLine_3.sale_order_line_id = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 22;
					
							PosOrderLine_3.down_payment_details = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
				
										
										if(rowstate_tFileInputDelimited_8.getException()!=null) {
											throw rowstate_tFileInputDelimited_8.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_8 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrderLine_3 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_8 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 


	tos_count_tFileInputDelimited_8++;

/**
 * [tFileInputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_begin ] stop
 */
// Start of branch "PosOrderLine_3"
if(PosOrderLine_3 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrderLine_3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "PosOrder_2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopPosOrder_2 = false;
       		  	    	
       		  	    	
 							PosOrder_2Struct PosOrder_2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    PosOrder_2HashKey.id = PosOrderLine_3.order_id ;
                        		    		

								
		                        	PosOrder_2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_PosOrder_2.lookup( PosOrder_2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_PosOrder_2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_PosOrder_2 != null && tHash_Lookup_PosOrder_2.getCount(PosOrder_2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'PosOrder_2' and it contains more one result from keys :  PosOrder_2.id = '" + PosOrder_2HashKey.id + "'");
								} // G 071
							

							PosOrder_2Struct PosOrder_2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	PosOrder_2Struct fromLookup_PosOrder_2 = null;
							PosOrder_2 = PosOrder_2Default;
										 
							
								 
							
							
								if (tHash_Lookup_PosOrder_2 !=null && tHash_Lookup_PosOrder_2.hasNext()) { // G 099
								
							
								
								fromLookup_PosOrder_2 = tHash_Lookup_PosOrder_2.next();

							
							
								} // G 099
							
							

							if(fromLookup_PosOrder_2 != null) {
								PosOrder_2 = fromLookup_PosOrder_2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out4'
out4_tmp.sale_id = PosOrderLine_3.id  ;
out4_tmp.order_id = PosOrderLine_3.order_id  ;
out4 = out4_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row9HashKey.pos_order_id = out4.order_id ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.pos_order_id = '" + row9HashKey.pos_order_id + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

out6 = null;

if(!rejectedInnerJoin_tMap_9 ) {

// # Output table : 'out6'
out6_tmp.sale_id = out4.sale_id ;
out6_tmp.payment_method_key = row9.payment_method_key ;
out6 = out6_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tAdvancedHash_out6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					


			   
			   

					out6Struct out6_HashRow = new out6Struct();
		   	   	   
				
				out6_HashRow.sale_id = out6.sale_id;
				
				out6_HashRow.payment_method_key = out6.payment_method_key;
				
			tHash_Lookup_out6.put(out6_HashRow);
			
            




 


	tos_count_tAdvancedHash_out6++;

/**
 * [tAdvancedHash_out6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_out6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out6";

	

 



/**
 * [tAdvancedHash_out6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_out6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out6";

	

 



/**
 * [tAdvancedHash_out6 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "PosOrderLine_3"




	
	/**
	 * [tFileInputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrderLine.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_8!=null){
                		fid_tFileInputDelimited_8.close();
                	}
                }
                if(fid_tFileInputDelimited_8!=null){
                	globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_8", true);
end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());




/**
 * [tFileInputDelimited_8 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_PosOrder_2 != null) {
						tHash_Lookup_PosOrder_2.endGet();
					}
					globalMap.remove( "tHash_Lookup_PosOrder_2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrderLine_3");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_out6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out6";

	

tHash_Lookup_out6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_out6", true);
end_Hash.put("tAdvancedHash_out6", System.currentTimeMillis());




/**
 * [tAdvancedHash_out6 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_PosOrder_2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_out6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out6";

	

 



/**
 * [tAdvancedHash_out6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}
	


public static class PosOrder_2Struct implements routines.system.IPersistableComparableLookupRow<PosOrder_2Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Float amount_tax;

				public Float getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer amount_paid;

				public Integer getAmount_paid () {
					return this.amount_paid;
				}
				
			    public Integer amount_return;

				public Integer getAmount_return () {
					return this.amount_return;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public String partner_id;

				public String getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer sequence_number;

				public Integer getSequence_number () {
					return this.sequence_number;
				}
				
			    public Integer session_id;

				public Integer getSession_id () {
					return this.session_id;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String account_move;

				public String getAccount_move () {
					return this.account_move;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer nb_print;

				public Integer getNb_print () {
					return this.nb_print;
				}
				
			    public String pos_reference;

				public String getPos_reference () {
					return this.pos_reference;
				}
				
			    public Integer sale_journal;

				public Integer getSale_journal () {
					return this.sale_journal;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Boolean to_invoice;

				public Boolean getTo_invoice () {
					return this.to_invoice;
				}
				
			    public Boolean to_ship;

				public Boolean getTo_ship () {
					return this.to_ship;
				}
				
			    public Boolean is_tipped;

				public Boolean getIs_tipped () {
					return this.is_tipped;
				}
				
			    public Integer tip_amount;

				public Integer getTip_amount () {
					return this.tip_amount;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PosOrder_2Struct other = (PosOrder_2Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PosOrder_2Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.date_order = this.date_order;
	            other.user_id = this.user_id;
	            other.amount_tax = this.amount_tax;
	            other.amount_total = this.amount_total;
	            other.amount_paid = this.amount_paid;
	            other.amount_return = this.amount_return;
	            other.company_id = this.company_id;
	            other.pricelist_id = this.pricelist_id;
	            other.partner_id = this.partner_id;
	            other.sequence_number = this.sequence_number;
	            other.session_id = this.session_id;
	            other.currency_rate = this.currency_rate;
	            other.state = this.state;
	            other.account_move = this.account_move;
	            other.procurement_group_id = this.procurement_group_id;
	            other.note = this.note;
	            other.nb_print = this.nb_print;
	            other.pos_reference = this.pos_reference;
	            other.sale_journal = this.sale_journal;
	            other.fiscal_position_id = this.fiscal_position_id;
	            other.to_invoice = this.to_invoice;
	            other.to_ship = this.to_ship;
	            other.is_tipped = this.is_tipped;
	            other.tip_amount = this.tip_amount;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.crm_team_id = this.crm_team_id;
	            
	}

	public void copyKeysDataTo(PosOrder_2Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.date_order = readDate(dis,ois);
					
						this.user_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = dis.readFloat();
           				}
					
						this.amount_total = readInteger(dis,ois);
					
						this.amount_paid = readInteger(dis,ois);
					
						this.amount_return = readInteger(dis,ois);
					
						this.company_id = readInteger(dis,ois);
					
						this.pricelist_id = readInteger(dis,ois);
					
						this.partner_id = readString(dis,ois);
					
						this.sequence_number = readInteger(dis,ois);
					
						this.session_id = readInteger(dis,ois);
					
						this.currency_rate = readInteger(dis,ois);
					
						this.state = readString(dis,ois);
					
						this.account_move = readString(dis,ois);
					
						this.procurement_group_id = readString(dis,ois);
					
						this.note = readString(dis,ois);
					
						this.nb_print = readInteger(dis,ois);
					
						this.pos_reference = readString(dis,ois);
					
						this.sale_journal = readInteger(dis,ois);
					
						this.fiscal_position_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = dis.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.crm_team_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.date_order = readDate(dis,objectIn);
					
						this.user_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = objectIn.readFloat();
           				}
					
						this.amount_total = readInteger(dis,objectIn);
					
						this.amount_paid = readInteger(dis,objectIn);
					
						this.amount_return = readInteger(dis,objectIn);
					
						this.company_id = readInteger(dis,objectIn);
					
						this.pricelist_id = readInteger(dis,objectIn);
					
						this.partner_id = readString(dis,objectIn);
					
						this.sequence_number = readInteger(dis,objectIn);
					
						this.session_id = readInteger(dis,objectIn);
					
						this.currency_rate = readInteger(dis,objectIn);
					
						this.state = readString(dis,objectIn);
					
						this.account_move = readString(dis,objectIn);
					
						this.procurement_group_id = readString(dis,objectIn);
					
						this.note = readString(dis,objectIn);
					
						this.nb_print = readInteger(dis,objectIn);
					
						this.pos_reference = readString(dis,objectIn);
					
						this.sale_journal = readInteger(dis,objectIn);
					
						this.fiscal_position_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = objectIn.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.crm_team_id = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						writeDate(this.date_order, dos, oos);
					
					writeInteger(this.user_id, dos, oos);
					
						if(this.amount_tax == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, oos);
					
					writeInteger(this.amount_paid, dos, oos);
					
					writeInteger(this.amount_return, dos, oos);
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.pricelist_id, dos, oos);
					
						writeString(this.partner_id, dos, oos);
					
					writeInteger(this.sequence_number, dos, oos);
					
					writeInteger(this.session_id, dos, oos);
					
					writeInteger(this.currency_rate, dos, oos);
					
						writeString(this.state, dos, oos);
					
						writeString(this.account_move, dos, oos);
					
						writeString(this.procurement_group_id, dos, oos);
					
						writeString(this.note, dos, oos);
					
					writeInteger(this.nb_print, dos, oos);
					
						writeString(this.pos_reference, dos, oos);
					
					writeInteger(this.sale_journal, dos, oos);
					
						writeString(this.fiscal_position_id, dos, oos);
					
						if(this.to_invoice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.crm_team_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
						writeDate(this.date_order, dos, objectOut);
					
					writeInteger(this.user_id, dos, objectOut);
					
						if(this.amount_tax == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, objectOut);
					
					writeInteger(this.amount_paid, dos, objectOut);
					
					writeInteger(this.amount_return, dos, objectOut);
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.pricelist_id, dos, objectOut);
					
						writeString(this.partner_id, dos, objectOut);
					
					writeInteger(this.sequence_number, dos, objectOut);
					
					writeInteger(this.session_id, dos, objectOut);
					
					writeInteger(this.currency_rate, dos, objectOut);
					
						writeString(this.state, dos, objectOut);
					
						writeString(this.account_move, dos, objectOut);
					
						writeString(this.procurement_group_id, dos, objectOut);
					
						writeString(this.note, dos, objectOut);
					
					writeInteger(this.nb_print, dos, objectOut);
					
						writeString(this.pos_reference, dos, objectOut);
					
					writeInteger(this.sale_journal, dos, objectOut);
					
						writeString(this.fiscal_position_id, dos, objectOut);
					
						if(this.to_invoice == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.crm_team_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",amount_paid="+String.valueOf(amount_paid));
		sb.append(",amount_return="+String.valueOf(amount_return));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",partner_id="+partner_id);
		sb.append(",sequence_number="+String.valueOf(sequence_number));
		sb.append(",session_id="+String.valueOf(session_id));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",state="+state);
		sb.append(",account_move="+account_move);
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",note="+note);
		sb.append(",nb_print="+String.valueOf(nb_print));
		sb.append(",pos_reference="+pos_reference);
		sb.append(",sale_journal="+String.valueOf(sale_journal));
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",to_invoice="+String.valueOf(to_invoice));
		sb.append(",to_ship="+String.valueOf(to_ship));
		sb.append(",is_tipped="+String.valueOf(is_tipped));
		sb.append(",tip_amount="+String.valueOf(tip_amount));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",crm_team_id="+crm_team_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PosOrder_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		PosOrder_2Struct PosOrder_2 = new PosOrder_2Struct();




	
	/**
	 * [tAdvancedHash_PosOrder_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_PosOrder_2", false);
		start_Hash.put("tAdvancedHash_PosOrder_2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_PosOrder_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PosOrder_2");
					}
				
		int tos_count_tAdvancedHash_PosOrder_2 = 0;
		

			   		// connection name:PosOrder_2
			   		// source node:tFileInputDelimited_9 - inputs:(after_tFileInputDelimited_8) outputs:(PosOrder_2,PosOrder_2) | target node:tAdvancedHash_PosOrder_2 - inputs:(PosOrder_2) outputs:()
			   		// linked node: tMap_4 - inputs:(PosOrderLine_3,PosOrder_2) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_PosOrder_2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<PosOrder_2Struct> tHash_Lookup_PosOrder_2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<PosOrder_2Struct>getLookup(matchingModeEnum_PosOrder_2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_PosOrder_2", tHash_Lookup_PosOrder_2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_PosOrder_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_9", false);
		start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_9";

	
		int tos_count_tFileInputDelimited_9 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try{
					
						Object filename_tFileInputDelimited_9 = context.temp_path+"/posOrder.csv";
						if(filename_tFileInputDelimited_9 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
			if(footer_value_tFileInputDelimited_9 >0 || random_value_tFileInputDelimited_9 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrder.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_9
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_9!=null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();
						
			    						PosOrder_2 = null;			
									
			    						PosOrder_2 = null;			
												
									boolean whetherReject_tFileInputDelimited_9 = false;
									PosOrder_2 = new PosOrder_2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_9 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_9 = 0;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 1;
					
							PosOrder_2.name = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 2;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder_2.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 3;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 4;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.amount_tax = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 5;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 6;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.amount_paid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_paid", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.amount_paid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 7;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.amount_return = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_return", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.amount_return = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 8;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 9;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 10;
					
							PosOrder_2.partner_id = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 11;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.sequence_number = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_number", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.sequence_number = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 12;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.session_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"session_id", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.session_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 13;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 14;
					
							PosOrder_2.state = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 15;
					
							PosOrder_2.account_move = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 16;
					
							PosOrder_2.procurement_group_id = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 17;
					
							PosOrder_2.note = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 18;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.nb_print = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nb_print", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.nb_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 19;
					
							PosOrder_2.pos_reference = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 20;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.sale_journal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sale_journal", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.sale_journal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 21;
					
							PosOrder_2.fiscal_position_id = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 22;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.to_invoice = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_invoice", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.to_invoice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 23;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.to_ship = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_ship", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.to_ship = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 24;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.is_tipped = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_tipped", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.is_tipped = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 25;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.tip_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tip_amount", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.tip_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 26;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 27;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder_2.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 28;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								PosOrder_2.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 29;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    									PosOrder_2.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "PosOrder_2", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									PosOrder_2.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 30;
					
							PosOrder_2.crm_team_id = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
				
										
										if(rowstate_tFileInputDelimited_9.getException()!=null) {
											throw rowstate_tFileInputDelimited_9.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_9 = true;
			        					
			                					System.err.println(e.getMessage());
			                					PosOrder_2 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_9 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 


	tos_count_tFileInputDelimited_9++;

/**
 * [tFileInputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_begin ] stop
 */
// Start of branch "PosOrder_2"
if(PosOrder_2 != null) { 



	
	/**
	 * [tAdvancedHash_PosOrder_2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PosOrder_2"
						
						);
					}
					


			   
			   

					PosOrder_2Struct PosOrder_2_HashRow = new PosOrder_2Struct();
		   	   	   
				
				PosOrder_2_HashRow.id = PosOrder_2.id;
				
				PosOrder_2_HashRow.name = PosOrder_2.name;
				
				PosOrder_2_HashRow.date_order = PosOrder_2.date_order;
				
				PosOrder_2_HashRow.user_id = PosOrder_2.user_id;
				
				PosOrder_2_HashRow.amount_tax = PosOrder_2.amount_tax;
				
				PosOrder_2_HashRow.amount_total = PosOrder_2.amount_total;
				
				PosOrder_2_HashRow.amount_paid = PosOrder_2.amount_paid;
				
				PosOrder_2_HashRow.amount_return = PosOrder_2.amount_return;
				
				PosOrder_2_HashRow.company_id = PosOrder_2.company_id;
				
				PosOrder_2_HashRow.pricelist_id = PosOrder_2.pricelist_id;
				
				PosOrder_2_HashRow.partner_id = PosOrder_2.partner_id;
				
				PosOrder_2_HashRow.sequence_number = PosOrder_2.sequence_number;
				
				PosOrder_2_HashRow.session_id = PosOrder_2.session_id;
				
				PosOrder_2_HashRow.currency_rate = PosOrder_2.currency_rate;
				
				PosOrder_2_HashRow.state = PosOrder_2.state;
				
				PosOrder_2_HashRow.account_move = PosOrder_2.account_move;
				
				PosOrder_2_HashRow.procurement_group_id = PosOrder_2.procurement_group_id;
				
				PosOrder_2_HashRow.note = PosOrder_2.note;
				
				PosOrder_2_HashRow.nb_print = PosOrder_2.nb_print;
				
				PosOrder_2_HashRow.pos_reference = PosOrder_2.pos_reference;
				
				PosOrder_2_HashRow.sale_journal = PosOrder_2.sale_journal;
				
				PosOrder_2_HashRow.fiscal_position_id = PosOrder_2.fiscal_position_id;
				
				PosOrder_2_HashRow.to_invoice = PosOrder_2.to_invoice;
				
				PosOrder_2_HashRow.to_ship = PosOrder_2.to_ship;
				
				PosOrder_2_HashRow.is_tipped = PosOrder_2.is_tipped;
				
				PosOrder_2_HashRow.tip_amount = PosOrder_2.tip_amount;
				
				PosOrder_2_HashRow.create_uid = PosOrder_2.create_uid;
				
				PosOrder_2_HashRow.create_date = PosOrder_2.create_date;
				
				PosOrder_2_HashRow.write_uid = PosOrder_2.write_uid;
				
				PosOrder_2_HashRow.write_date = PosOrder_2.write_date;
				
				PosOrder_2_HashRow.crm_team_id = PosOrder_2.crm_team_id;
				
			tHash_Lookup_PosOrder_2.put(PosOrder_2_HashRow);
			
            




 


	tos_count_tAdvancedHash_PosOrder_2++;

/**
 * [tAdvancedHash_PosOrder_2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrder_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_2";

	

 



/**
 * [tAdvancedHash_PosOrder_2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_PosOrder_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_2";

	

 



/**
 * [tAdvancedHash_PosOrder_2 process_data_end ] stop
 */

} // End of branch "PosOrder_2"




	
	/**
	 * [tFileInputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrder.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_9!=null){
                		fid_tFileInputDelimited_9.close();
                	}
                }
                if(fid_tFileInputDelimited_9!=null){
                	globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_9", true);
end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());




/**
 * [tFileInputDelimited_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrder_2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_2";

	

tHash_Lookup_PosOrder_2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PosOrder_2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_PosOrder_2", true);
end_Hash.put("tAdvancedHash_PosOrder_2", System.currentTimeMillis());




/**
 * [tAdvancedHash_PosOrder_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_PosOrder_2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_PosOrder_2";

	

 



/**
 * [tAdvancedHash_PosOrder_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer pos_order_id;

				public Integer getPos_order_id () {
					return this.pos_order_id;
				}
				
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.pos_order_id == null) ? 0 : this.pos_order_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.pos_order_id == null) {
							if (other.pos_order_id != null)
								return false;
						
						} else if (!this.pos_order_id.equals(other.pos_order_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.pos_order_id = this.pos_order_id;
	            other.payment_method_key = this.payment_method_key;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.pos_order_id = this.pos_order_id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.payment_method_key = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.payment_method_key = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.payment_method_key, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.payment_method_key, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pos_order_id="+String.valueOf(pos_order_id));
		sb.append(",payment_method_key="+String.valueOf(payment_method_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.pos_order_id, other.pos_order_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer pos_order_id;

				public Integer getPos_order_id () {
					return this.pos_order_id;
				}
				
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
						this.payment_method_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.payment_method_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pos_order_id="+String.valueOf(pos_order_id));
		sb.append(",payment_method_key="+String.valueOf(payment_method_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer pos_order_id;

				public Integer getPos_order_id () {
					return this.pos_order_id;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer pos_payment_method_id;

				public Integer getPos_payment_method_id () {
					return this.pos_payment_method_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
						this.id = readInteger(dis);
					
						this.pos_payment_method_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
						this.id = readInteger(dis);
					
						this.pos_payment_method_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.pos_payment_method_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.pos_payment_method_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pos_order_id="+String.valueOf(pos_order_id));
		sb.append(",id="+String.valueOf(id));
		sb.append(",pos_payment_method_id="+String.valueOf(pos_payment_method_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer pos_order_id;

				public Integer getPos_order_id () {
					return this.pos_order_id;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer pos_payment_method_id;

				public Integer getPos_payment_method_id () {
					return this.pos_payment_method_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
						this.id = readInteger(dis);
					
						this.pos_payment_method_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.pos_order_id = readInteger(dis);
					
						this.id = readInteger(dis);
					
						this.pos_payment_method_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.pos_payment_method_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// Integer
				
						writeInteger(this.pos_payment_method_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pos_order_id="+String.valueOf(pos_order_id));
		sb.append(",id="+String.valueOf(id));
		sb.append(",pos_payment_method_id="+String.valueOf(pos_payment_method_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer pos_order_id;

				public Integer getPos_order_id () {
					return this.pos_order_id;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public Integer payment_method_id;

				public Integer getPayment_method_id () {
					return this.payment_method_id;
				}
				
			    public java.util.Date payment_date;

				public java.util.Date getPayment_date () {
					return this.payment_date;
				}
				
			    public Integer session_id;

				public Integer getSession_id () {
					return this.session_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String card_type;

				public String getCard_type () {
					return this.card_type;
				}
				
			    public String cardholder_name;

				public String getCardholder_name () {
					return this.cardholder_name;
				}
				
			    public String transaction_id;

				public String getTransaction_id () {
					return this.transaction_id;
				}
				
			    public String payment_status;

				public String getPayment_status () {
					return this.payment_status;
				}
				
			    public String ticket;

				public String getTicket () {
					return this.ticket;
				}
				
			    public Boolean is_change;

				public Boolean getIs_change () {
					return this.is_change;
				}
				
			    public String account_move_id;

				public String getAccount_move_id () {
					return this.account_move_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.pos_order_id = readInteger(dis);
					
						this.amount = readInteger(dis);
					
						this.payment_method_id = readInteger(dis);
					
					this.payment_date = readDate(dis);
					
						this.session_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.card_type = readString(dis);
					
					this.cardholder_name = readString(dis);
					
					this.transaction_id = readString(dis);
					
					this.payment_status = readString(dis);
					
					this.ticket = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_change = null;
           				} else {
           			    	this.is_change = dis.readBoolean();
           				}
					
					this.account_move_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.pos_order_id = readInteger(dis);
					
						this.amount = readInteger(dis);
					
						this.payment_method_id = readInteger(dis);
					
					this.payment_date = readDate(dis);
					
						this.session_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.card_type = readString(dis);
					
					this.cardholder_name = readString(dis);
					
					this.transaction_id = readString(dis);
					
					this.payment_status = readString(dis);
					
					this.ticket = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_change = null;
           				} else {
           			    	this.is_change = dis.readBoolean();
           				}
					
					this.account_move_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// Integer
				
						writeInteger(this.payment_method_id,dos);
					
					// java.util.Date
				
						writeDate(this.payment_date,dos);
					
					// Integer
				
						writeInteger(this.session_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.card_type,dos);
					
					// String
				
						writeString(this.cardholder_name,dos);
					
					// String
				
						writeString(this.transaction_id,dos);
					
					// String
				
						writeString(this.payment_status,dos);
					
					// String
				
						writeString(this.ticket,dos);
					
					// Boolean
				
						if(this.is_change == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_change);
		            	}
					
					// String
				
						writeString(this.account_move_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// Integer
				
						writeInteger(this.payment_method_id,dos);
					
					// java.util.Date
				
						writeDate(this.payment_date,dos);
					
					// Integer
				
						writeInteger(this.session_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.card_type,dos);
					
					// String
				
						writeString(this.cardholder_name,dos);
					
					// String
				
						writeString(this.transaction_id,dos);
					
					// String
				
						writeString(this.payment_status,dos);
					
					// String
				
						writeString(this.ticket,dos);
					
					// Boolean
				
						if(this.is_change == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_change);
		            	}
					
					// String
				
						writeString(this.account_move_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",pos_order_id="+String.valueOf(pos_order_id));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",payment_method_id="+String.valueOf(payment_method_id));
		sb.append(",payment_date="+String.valueOf(payment_date));
		sb.append(",session_id="+String.valueOf(session_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",card_type="+card_type);
		sb.append(",cardholder_name="+cardholder_name);
		sb.append(",transaction_id="+transaction_id);
		sb.append(",payment_status="+payment_status);
		sb.append(",ticket="+ticket);
		sb.append(",is_change="+String.valueOf(is_change));
		sb.append(",account_move_id="+account_move_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_10Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_10Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer pos_order_id;

				public Integer getPos_order_id () {
					return this.pos_order_id;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				
			    public Integer payment_method_id;

				public Integer getPayment_method_id () {
					return this.payment_method_id;
				}
				
			    public java.util.Date payment_date;

				public java.util.Date getPayment_date () {
					return this.payment_date;
				}
				
			    public Integer session_id;

				public Integer getSession_id () {
					return this.session_id;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String card_type;

				public String getCard_type () {
					return this.card_type;
				}
				
			    public String cardholder_name;

				public String getCardholder_name () {
					return this.cardholder_name;
				}
				
			    public String transaction_id;

				public String getTransaction_id () {
					return this.transaction_id;
				}
				
			    public String payment_status;

				public String getPayment_status () {
					return this.payment_status;
				}
				
			    public String ticket;

				public String getTicket () {
					return this.ticket;
				}
				
			    public Boolean is_change;

				public Boolean getIs_change () {
					return this.is_change;
				}
				
			    public String account_move_id;

				public String getAccount_move_id () {
					return this.account_move_id;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_SalesFactV2.length) {
				if(length < 1024 && commonByteArray_PACIFICO_SalesFactV2.length == 0) {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_SalesFactV2 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_SalesFactV2, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_SalesFactV2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.pos_order_id = readInteger(dis);
					
						this.amount = readInteger(dis);
					
						this.payment_method_id = readInteger(dis);
					
					this.payment_date = readDate(dis);
					
						this.session_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.card_type = readString(dis);
					
					this.cardholder_name = readString(dis);
					
					this.transaction_id = readString(dis);
					
					this.payment_status = readString(dis);
					
					this.ticket = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_change = null;
           				} else {
           			    	this.is_change = dis.readBoolean();
           				}
					
					this.account_move_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.pos_order_id = readInteger(dis);
					
						this.amount = readInteger(dis);
					
						this.payment_method_id = readInteger(dis);
					
					this.payment_date = readDate(dis);
					
						this.session_id = readInteger(dis);
					
						this.company_id = readInteger(dis);
					
					this.card_type = readString(dis);
					
					this.cardholder_name = readString(dis);
					
					this.transaction_id = readString(dis);
					
					this.payment_status = readString(dis);
					
					this.ticket = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_change = null;
           				} else {
           			    	this.is_change = dis.readBoolean();
           				}
					
					this.account_move_id = readString(dis);
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// Integer
				
						writeInteger(this.payment_method_id,dos);
					
					// java.util.Date
				
						writeDate(this.payment_date,dos);
					
					// Integer
				
						writeInteger(this.session_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.card_type,dos);
					
					// String
				
						writeString(this.cardholder_name,dos);
					
					// String
				
						writeString(this.transaction_id,dos);
					
					// String
				
						writeString(this.payment_status,dos);
					
					// String
				
						writeString(this.ticket,dos);
					
					// Boolean
				
						if(this.is_change == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_change);
		            	}
					
					// String
				
						writeString(this.account_move_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.pos_order_id,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
					// Integer
				
						writeInteger(this.payment_method_id,dos);
					
					// java.util.Date
				
						writeDate(this.payment_date,dos);
					
					// Integer
				
						writeInteger(this.session_id,dos);
					
					// Integer
				
						writeInteger(this.company_id,dos);
					
					// String
				
						writeString(this.card_type,dos);
					
					// String
				
						writeString(this.cardholder_name,dos);
					
					// String
				
						writeString(this.transaction_id,dos);
					
					// String
				
						writeString(this.payment_status,dos);
					
					// String
				
						writeString(this.ticket,dos);
					
					// Boolean
				
						if(this.is_change == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_change);
		            	}
					
					// String
				
						writeString(this.account_move_id,dos);
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",pos_order_id="+String.valueOf(pos_order_id));
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",payment_method_id="+String.valueOf(payment_method_id));
		sb.append(",payment_date="+String.valueOf(payment_date));
		sb.append(",session_id="+String.valueOf(session_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",card_type="+card_type);
		sb.append(",cardholder_name="+cardholder_name);
		sb.append(",transaction_id="+transaction_id);
		sb.append(",payment_status="+payment_status);
		sb.append(",ticket="+ticket);
		sb.append(",is_change="+String.valueOf(is_change));
		sb.append(",account_move_id="+account_move_id);
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_14Process(globalMap);
		tFileInputDelimited_15Process(globalMap);
		tFileInputDelimited_11Process(globalMap);

		row3Struct row3 = new row3Struct();
out3Struct out3 = new out3Struct();
out3Struct row5 = out3;
out5Struct out5 = new out5Struct();
out5Struct row9 = out5;








	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tLogRow_4 - inputs:(out5) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_9 - inputs:(out4,row9) outputs:(out6,out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[2];

        public void addRow(String[] row) {

            for (int i = 0; i < 2; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 1 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                
                    //last column
                    for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"pos_order_id","payment_method_key",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[3];

        public void addRow(String[] row) {

            for (int i = 0; i < 3; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 2 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"pos_order_id","id","pos_payment_method_id",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_10", false);
		start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_10";

	
		int tos_count_tFileInputDelimited_10 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try{
					
						Object filename_tFileInputDelimited_10 = context.temp_path+"/posPayment.csv";
						if(filename_tFileInputDelimited_10 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
			if(footer_value_tFileInputDelimited_10 >0 || random_value_tFileInputDelimited_10 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posPayment.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_10
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_10!=null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();
						
			    						row3 = null;			
												
									boolean whetherReject_tFileInputDelimited_10 = false;
									row3 = new row3Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_10 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_10 = 0;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 1;
					
							row3.name = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 2;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.pos_order_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pos_order_id", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.pos_order_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 3;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 4;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.payment_method_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"payment_method_id", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.payment_method_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 5;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									row3.payment_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"payment_date", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.payment_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 6;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.session_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"session_id", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.session_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 7;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 8;
					
							row3.card_type = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 9;
					
							row3.cardholder_name = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 10;
					
							row3.transaction_id = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 11;
					
							row3.payment_status = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 12;
					
							row3.ticket = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 13;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.is_change = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_change", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.is_change = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 14;
					
							row3.account_move_id = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 15;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 16;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									row3.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 17;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								row3.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 18;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									row3.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row3", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									row3.write_date = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_10.getException()!=null) {
											throw rowstate_tFileInputDelimited_10.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_10 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row3 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_10 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 


	tos_count_tFileInputDelimited_10++;

/**
 * [tFileInputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row4HashKey.id = row3.pos_order_id ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.id = '" + row4HashKey.id + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row6HashKey.id = row3.payment_method_id ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.id = '" + row6HashKey.id + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out3 = null;

if(!rejectedInnerJoin_tMap_7 ) {

// # Output table : 'out3'
out3_tmp.pos_order_id = row3.pos_order_id ;
out3_tmp.id = row3.id ;
out3_tmp.pos_payment_method_id = row6.id ;
out3 = out3_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[3];
   				
	    		if(out3.pos_order_id != null) { //              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(out3.pos_order_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out3.id != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(out3.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out3.pos_payment_method_id != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(out3.pos_payment_method_id)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 
     row5 = out3;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row7HashKey.payment_method_id = row5.pos_payment_method_id ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.payment_method_id = '" + row7HashKey.payment_method_id + "'");
								} // G 071
							

							row7Struct row7 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out5 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'out5'
out5_tmp.pos_order_id = row5.pos_order_id ;
out5_tmp.payment_method_key = row7.payment_method_key ;
out5 = out5_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[2];
   				
	    		if(out5.pos_order_id != null) { //              
                 row_tLogRow_4[0]=    						    
				                String.valueOf(out5.pos_order_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(out5.payment_method_key != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(out5.payment_method_key)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     row9 = out5;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.pos_order_id = row9.pos_order_id;
				
				row9_HashRow.payment_method_key = row9.payment_method_key;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posPayment.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_10!=null){
                		fid_tFileInputDelimited_10.close();
                	}
                }
                if(fid_tFileInputDelimited_10!=null){
                	globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_10", true);
end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());




/**
 * [tFileInputDelimited_10 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public Float amount_tax;

				public Float getAmount_tax () {
					return this.amount_tax;
				}
				
			    public Integer amount_total;

				public Integer getAmount_total () {
					return this.amount_total;
				}
				
			    public Integer amount_paid;

				public Integer getAmount_paid () {
					return this.amount_paid;
				}
				
			    public Integer amount_return;

				public Integer getAmount_return () {
					return this.amount_return;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public Integer pricelist_id;

				public Integer getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public String partner_id;

				public String getPartner_id () {
					return this.partner_id;
				}
				
			    public Integer sequence_number;

				public Integer getSequence_number () {
					return this.sequence_number;
				}
				
			    public Integer session_id;

				public Integer getSession_id () {
					return this.session_id;
				}
				
			    public Integer currency_rate;

				public Integer getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String account_move;

				public String getAccount_move () {
					return this.account_move;
				}
				
			    public String procurement_group_id;

				public String getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public Integer nb_print;

				public Integer getNb_print () {
					return this.nb_print;
				}
				
			    public String pos_reference;

				public String getPos_reference () {
					return this.pos_reference;
				}
				
			    public Integer sale_journal;

				public Integer getSale_journal () {
					return this.sale_journal;
				}
				
			    public String fiscal_position_id;

				public String getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public Boolean to_invoice;

				public Boolean getTo_invoice () {
					return this.to_invoice;
				}
				
			    public Boolean to_ship;

				public Boolean getTo_ship () {
					return this.to_ship;
				}
				
			    public Boolean is_tipped;

				public Boolean getIs_tipped () {
					return this.is_tipped;
				}
				
			    public Integer tip_amount;

				public Integer getTip_amount () {
					return this.tip_amount;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String crm_team_id;

				public String getCrm_team_id () {
					return this.crm_team_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.date_order = this.date_order;
	            other.user_id = this.user_id;
	            other.amount_tax = this.amount_tax;
	            other.amount_total = this.amount_total;
	            other.amount_paid = this.amount_paid;
	            other.amount_return = this.amount_return;
	            other.company_id = this.company_id;
	            other.pricelist_id = this.pricelist_id;
	            other.partner_id = this.partner_id;
	            other.sequence_number = this.sequence_number;
	            other.session_id = this.session_id;
	            other.currency_rate = this.currency_rate;
	            other.state = this.state;
	            other.account_move = this.account_move;
	            other.procurement_group_id = this.procurement_group_id;
	            other.note = this.note;
	            other.nb_print = this.nb_print;
	            other.pos_reference = this.pos_reference;
	            other.sale_journal = this.sale_journal;
	            other.fiscal_position_id = this.fiscal_position_id;
	            other.to_invoice = this.to_invoice;
	            other.to_ship = this.to_ship;
	            other.is_tipped = this.is_tipped;
	            other.tip_amount = this.tip_amount;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.crm_team_id = this.crm_team_id;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.date_order = readDate(dis,ois);
					
						this.user_id = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = dis.readFloat();
           				}
					
						this.amount_total = readInteger(dis,ois);
					
						this.amount_paid = readInteger(dis,ois);
					
						this.amount_return = readInteger(dis,ois);
					
						this.company_id = readInteger(dis,ois);
					
						this.pricelist_id = readInteger(dis,ois);
					
						this.partner_id = readString(dis,ois);
					
						this.sequence_number = readInteger(dis,ois);
					
						this.session_id = readInteger(dis,ois);
					
						this.currency_rate = readInteger(dis,ois);
					
						this.state = readString(dis,ois);
					
						this.account_move = readString(dis,ois);
					
						this.procurement_group_id = readString(dis,ois);
					
						this.note = readString(dis,ois);
					
						this.nb_print = readInteger(dis,ois);
					
						this.pos_reference = readString(dis,ois);
					
						this.sale_journal = readInteger(dis,ois);
					
						this.fiscal_position_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = dis.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,ois);
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
						this.crm_team_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.date_order = readDate(dis,objectIn);
					
						this.user_id = readInteger(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.amount_tax = null;
           				} else {
           			    	this.amount_tax = objectIn.readFloat();
           				}
					
						this.amount_total = readInteger(dis,objectIn);
					
						this.amount_paid = readInteger(dis,objectIn);
					
						this.amount_return = readInteger(dis,objectIn);
					
						this.company_id = readInteger(dis,objectIn);
					
						this.pricelist_id = readInteger(dis,objectIn);
					
						this.partner_id = readString(dis,objectIn);
					
						this.sequence_number = readInteger(dis,objectIn);
					
						this.session_id = readInteger(dis,objectIn);
					
						this.currency_rate = readInteger(dis,objectIn);
					
						this.state = readString(dis,objectIn);
					
						this.account_move = readString(dis,objectIn);
					
						this.procurement_group_id = readString(dis,objectIn);
					
						this.note = readString(dis,objectIn);
					
						this.nb_print = readInteger(dis,objectIn);
					
						this.pos_reference = readString(dis,objectIn);
					
						this.sale_journal = readInteger(dis,objectIn);
					
						this.fiscal_position_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_invoice = null;
           				} else {
           			    	this.to_invoice = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.to_ship = null;
           				} else {
           			    	this.to_ship = objectIn.readBoolean();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_tipped = null;
           				} else {
           			    	this.is_tipped = objectIn.readBoolean();
           				}
					
						this.tip_amount = readInteger(dis,objectIn);
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
						this.crm_team_id = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						writeDate(this.date_order, dos, oos);
					
					writeInteger(this.user_id, dos, oos);
					
						if(this.amount_tax == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, oos);
					
					writeInteger(this.amount_paid, dos, oos);
					
					writeInteger(this.amount_return, dos, oos);
					
					writeInteger(this.company_id, dos, oos);
					
					writeInteger(this.pricelist_id, dos, oos);
					
						writeString(this.partner_id, dos, oos);
					
					writeInteger(this.sequence_number, dos, oos);
					
					writeInteger(this.session_id, dos, oos);
					
					writeInteger(this.currency_rate, dos, oos);
					
						writeString(this.state, dos, oos);
					
						writeString(this.account_move, dos, oos);
					
						writeString(this.procurement_group_id, dos, oos);
					
						writeString(this.note, dos, oos);
					
					writeInteger(this.nb_print, dos, oos);
					
						writeString(this.pos_reference, dos, oos);
					
					writeInteger(this.sale_journal, dos, oos);
					
						writeString(this.fiscal_position_id, dos, oos);
					
						if(this.to_invoice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, oos);
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
						writeString(this.crm_team_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
						writeDate(this.date_order, dos, objectOut);
					
					writeInteger(this.user_id, dos, objectOut);
					
						if(this.amount_tax == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.amount_tax);
		            	}
					
					writeInteger(this.amount_total, dos, objectOut);
					
					writeInteger(this.amount_paid, dos, objectOut);
					
					writeInteger(this.amount_return, dos, objectOut);
					
					writeInteger(this.company_id, dos, objectOut);
					
					writeInteger(this.pricelist_id, dos, objectOut);
					
						writeString(this.partner_id, dos, objectOut);
					
					writeInteger(this.sequence_number, dos, objectOut);
					
					writeInteger(this.session_id, dos, objectOut);
					
					writeInteger(this.currency_rate, dos, objectOut);
					
						writeString(this.state, dos, objectOut);
					
						writeString(this.account_move, dos, objectOut);
					
						writeString(this.procurement_group_id, dos, objectOut);
					
						writeString(this.note, dos, objectOut);
					
					writeInteger(this.nb_print, dos, objectOut);
					
						writeString(this.pos_reference, dos, objectOut);
					
					writeInteger(this.sale_journal, dos, objectOut);
					
						writeString(this.fiscal_position_id, dos, objectOut);
					
						if(this.to_invoice == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_invoice);
		            	}
					
						if(this.to_ship == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.to_ship);
		            	}
					
						if(this.is_tipped == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_tipped);
		            	}
					
					writeInteger(this.tip_amount, dos, objectOut);
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
						writeString(this.crm_team_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",amount_paid="+String.valueOf(amount_paid));
		sb.append(",amount_return="+String.valueOf(amount_return));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",partner_id="+partner_id);
		sb.append(",sequence_number="+String.valueOf(sequence_number));
		sb.append(",session_id="+String.valueOf(session_id));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",state="+state);
		sb.append(",account_move="+account_move);
		sb.append(",procurement_group_id="+procurement_group_id);
		sb.append(",note="+note);
		sb.append(",nb_print="+String.valueOf(nb_print));
		sb.append(",pos_reference="+pos_reference);
		sb.append(",sale_journal="+String.valueOf(sale_journal));
		sb.append(",fiscal_position_id="+fiscal_position_id);
		sb.append(",to_invoice="+String.valueOf(to_invoice));
		sb.append(",to_ship="+String.valueOf(to_ship));
		sb.append(",is_tipped="+String.valueOf(is_tipped));
		sb.append(",tip_amount="+String.valueOf(tip_amount));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",crm_team_id="+crm_team_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tFileInputDelimited_14 - inputs:(after_tFileInputDelimited_10) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_7 - inputs:(row3,row4,row6) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_14", false);
		start_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_14";

	
		int tos_count_tFileInputDelimited_14 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_14 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_14 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_14 = null;
				int limit_tFileInputDelimited_14 = -1;
				try{
					
						Object filename_tFileInputDelimited_14 = context.temp_path+"/posOrder.csv";
						if(filename_tFileInputDelimited_14 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_14 = 0, random_value_tFileInputDelimited_14 = -1;
			if(footer_value_tFileInputDelimited_14 >0 || random_value_tFileInputDelimited_14 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_14 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posOrder.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_14
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_14!=null && fid_tFileInputDelimited_14.nextRecord()) {
						rowstate_tFileInputDelimited_14.reset();
						
			    						row4 = null;			
									
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_14 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_14 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_14 = 0;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 1;
					
							row4.name = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 2;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    									row4.date_order = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"date_order", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.date_order = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 3;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.user_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"user_id", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.user_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 4;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.amount_tax = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_tax", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.amount_tax = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 5;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.amount_total = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_total", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.amount_total = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 6;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.amount_paid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_paid", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.amount_paid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 7;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.amount_return = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"amount_return", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.amount_return = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 8;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 9;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.pricelist_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"pricelist_id", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.pricelist_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 10;
					
							row4.partner_id = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 11;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.sequence_number = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sequence_number", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.sequence_number = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 12;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.session_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"session_id", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.session_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 13;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.currency_rate = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"currency_rate", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.currency_rate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 14;
					
							row4.state = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 15;
					
							row4.account_move = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 16;
					
							row4.procurement_group_id = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 17;
					
							row4.note = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 18;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.nb_print = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"nb_print", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.nb_print = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 19;
					
							row4.pos_reference = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 20;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.sale_journal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"sale_journal", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.sale_journal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 21;
					
							row4.fiscal_position_id = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
					columnIndexWithD_tFileInputDelimited_14 = 22;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.to_invoice = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_invoice", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.to_invoice = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 23;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.to_ship = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"to_ship", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.to_ship = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 24;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.is_tipped = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_tipped", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.is_tipped = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 25;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.tip_amount = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"tip_amount", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.tip_amount = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 26;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 27;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    									row4.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 28;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    								row4.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 29;
					
						temp = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						if(temp.length() > 0) {
							
								try {
								
    									row4.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_14) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",ex_tFileInputDelimited_14.getMessage());
									rowstate_tFileInputDelimited_14.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row4", temp, ex_tFileInputDelimited_14), ex_tFileInputDelimited_14));
								}
    							
						} else {						
							
								
									row4.write_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_14 = 30;
					
							row4.crm_team_id = fid_tFileInputDelimited_14.get(columnIndexWithD_tFileInputDelimited_14);
						
				
				
										
										if(rowstate_tFileInputDelimited_14.getException()!=null) {
											throw rowstate_tFileInputDelimited_14.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_14_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_14 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_14 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_14 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_14";

	

 


	tos_count_tFileInputDelimited_14++;

/**
 * [tFileInputDelimited_14 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_14";

	

 



/**
 * [tFileInputDelimited_14 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.id = row4.id;
				
				row4_HashRow.name = row4.name;
				
				row4_HashRow.date_order = row4.date_order;
				
				row4_HashRow.user_id = row4.user_id;
				
				row4_HashRow.amount_tax = row4.amount_tax;
				
				row4_HashRow.amount_total = row4.amount_total;
				
				row4_HashRow.amount_paid = row4.amount_paid;
				
				row4_HashRow.amount_return = row4.amount_return;
				
				row4_HashRow.company_id = row4.company_id;
				
				row4_HashRow.pricelist_id = row4.pricelist_id;
				
				row4_HashRow.partner_id = row4.partner_id;
				
				row4_HashRow.sequence_number = row4.sequence_number;
				
				row4_HashRow.session_id = row4.session_id;
				
				row4_HashRow.currency_rate = row4.currency_rate;
				
				row4_HashRow.state = row4.state;
				
				row4_HashRow.account_move = row4.account_move;
				
				row4_HashRow.procurement_group_id = row4.procurement_group_id;
				
				row4_HashRow.note = row4.note;
				
				row4_HashRow.nb_print = row4.nb_print;
				
				row4_HashRow.pos_reference = row4.pos_reference;
				
				row4_HashRow.sale_journal = row4.sale_journal;
				
				row4_HashRow.fiscal_position_id = row4.fiscal_position_id;
				
				row4_HashRow.to_invoice = row4.to_invoice;
				
				row4_HashRow.to_ship = row4.to_ship;
				
				row4_HashRow.is_tipped = row4.is_tipped;
				
				row4_HashRow.tip_amount = row4.tip_amount;
				
				row4_HashRow.create_uid = row4.create_uid;
				
				row4_HashRow.create_date = row4.create_date;
				
				row4_HashRow.write_uid = row4.write_uid;
				
				row4_HashRow.write_date = row4.write_date;
				
				row4_HashRow.crm_team_id = row4.crm_team_id;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_14";

	

 



/**
 * [tFileInputDelimited_14 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_14 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_14";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posOrder.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_14!=null){
                		fid_tFileInputDelimited_14.close();
                	}
                }
                if(fid_tFileInputDelimited_14!=null){
                	globalMap.put("tFileInputDelimited_14_NB_LINE", fid_tFileInputDelimited_14.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_14", true);
end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());




/**
 * [tFileInputDelimited_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_14 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_14";

	

 



/**
 * [tFileInputDelimited_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String outstanding_account_id;

				public String getOutstanding_account_id () {
					return this.outstanding_account_id;
				}
				
			    public String receivable_account_id;

				public String getReceivable_account_id () {
					return this.receivable_account_id;
				}
				
			    public Boolean is_cash_count;

				public Boolean getIs_cash_count () {
					return this.is_cash_count;
				}
				
			    public String journal_id;

				public String getJournal_id () {
					return this.journal_id;
				}
				
			    public Boolean split_transactions;

				public Boolean getSplit_transactions () {
					return this.split_transactions;
				}
				
			    public Integer company_id;

				public Integer getCompany_id () {
					return this.company_id;
				}
				
			    public String use_payment_terminal;

				public String getUse_payment_terminal () {
					return this.use_payment_terminal;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.outstanding_account_id = this.outstanding_account_id;
	            other.receivable_account_id = this.receivable_account_id;
	            other.is_cash_count = this.is_cash_count;
	            other.journal_id = this.journal_id;
	            other.split_transactions = this.split_transactions;
	            other.company_id = this.company_id;
	            other.use_payment_terminal = this.use_payment_terminal;
	            other.active = this.active;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
						this.outstanding_account_id = readString(dis,ois);
					
						this.receivable_account_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_cash_count = null;
           				} else {
           			    	this.is_cash_count = dis.readBoolean();
           				}
					
						this.journal_id = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.split_transactions = null;
           				} else {
           			    	this.split_transactions = dis.readBoolean();
           				}
					
						this.company_id = readInteger(dis,ois);
					
						this.use_payment_terminal = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
						this.create_uid = readInteger(dis,ois);
					
						this.create_date = readDate(dis,ois);
					
						this.write_uid = readInteger(dis,ois);
					
						this.write_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.name = readString(dis,objectIn);
					
						this.outstanding_account_id = readString(dis,objectIn);
					
						this.receivable_account_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.is_cash_count = null;
           				} else {
           			    	this.is_cash_count = objectIn.readBoolean();
           				}
					
						this.journal_id = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.split_transactions = null;
           				} else {
           			    	this.split_transactions = objectIn.readBoolean();
           				}
					
						this.company_id = readInteger(dis,objectIn);
					
						this.use_payment_terminal = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = objectIn.readBoolean();
           				}
					
						this.create_uid = readInteger(dis,objectIn);
					
						this.create_date = readDate(dis,objectIn);
					
						this.write_uid = readInteger(dis,objectIn);
					
						this.write_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						writeString(this.outstanding_account_id, dos, oos);
					
						writeString(this.receivable_account_id, dos, oos);
					
						if(this.is_cash_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_cash_count);
		            	}
					
						writeString(this.journal_id, dos, oos);
					
						if(this.split_transactions == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.split_transactions);
		            	}
					
					writeInteger(this.company_id, dos, oos);
					
						writeString(this.use_payment_terminal, dos, oos);
					
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					writeInteger(this.create_uid, dos, oos);
					
						writeDate(this.create_date, dos, oos);
					
					writeInteger(this.write_uid, dos, oos);
					
						writeDate(this.write_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.name, dos, objectOut);
					
						writeString(this.outstanding_account_id, dos, objectOut);
					
						writeString(this.receivable_account_id, dos, objectOut);
					
						if(this.is_cash_count == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.is_cash_count);
		            	}
					
						writeString(this.journal_id, dos, objectOut);
					
						if(this.split_transactions == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.split_transactions);
		            	}
					
					writeInteger(this.company_id, dos, objectOut);
					
						writeString(this.use_payment_terminal, dos, objectOut);
					
						if(this.active == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.active);
		            	}
					
					writeInteger(this.create_uid, dos, objectOut);
					
						writeDate(this.create_date, dos, objectOut);
					
					writeInteger(this.write_uid, dos, objectOut);
					
						writeDate(this.write_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",outstanding_account_id="+outstanding_account_id);
		sb.append(",receivable_account_id="+receivable_account_id);
		sb.append(",is_cash_count="+String.valueOf(is_cash_count));
		sb.append(",journal_id="+journal_id);
		sb.append(",split_transactions="+String.valueOf(split_transactions));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",use_payment_terminal="+use_payment_terminal);
		sb.append(",active="+String.valueOf(active));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tFileInputDelimited_15 - inputs:(after_tFileInputDelimited_10) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_7 - inputs:(row3,row4,row6) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_15", false);
		start_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_15";

	
		int tos_count_tFileInputDelimited_15 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_15 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_15 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15 = null;
				int limit_tFileInputDelimited_15 = -1;
				try{
					
						Object filename_tFileInputDelimited_15 = context.temp_path+"/posPaymentMehtod.csv";
						if(filename_tFileInputDelimited_15 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_15 = 0, random_value_tFileInputDelimited_15 = -1;
			if(footer_value_tFileInputDelimited_15 >0 || random_value_tFileInputDelimited_15 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_15 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/posPaymentMehtod.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_15
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_15!=null && fid_tFileInputDelimited_15.nextRecord()) {
						rowstate_tFileInputDelimited_15.reset();
						
			    						row6 = null;			
									
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_15 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_15 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_15 = 0;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"id", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 1;
					
							row6.name = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						
				
					columnIndexWithD_tFileInputDelimited_15 = 2;
					
							row6.outstanding_account_id = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						
				
					columnIndexWithD_tFileInputDelimited_15 = 3;
					
							row6.receivable_account_id = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						
				
					columnIndexWithD_tFileInputDelimited_15 = 4;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.is_cash_count = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"is_cash_count", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.is_cash_count = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 5;
					
							row6.journal_id = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						
				
					columnIndexWithD_tFileInputDelimited_15 = 6;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.split_transactions = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"split_transactions", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.split_transactions = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 7;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.company_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"company_id", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.company_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 8;
					
							row6.use_payment_terminal = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						
				
					columnIndexWithD_tFileInputDelimited_15 = 9;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.active = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"active", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.active = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 10;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.create_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_uid", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.create_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 11;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    									row6.create_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"create_date", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.create_date = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 12;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    								row6.write_uid = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_uid", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.write_uid = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_15 = 13;
					
						temp = fid_tFileInputDelimited_15.get(columnIndexWithD_tFileInputDelimited_15);
						if(temp.length() > 0) {
							
								try {
								
    									row6.write_date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_15) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",ex_tFileInputDelimited_15.getMessage());
									rowstate_tFileInputDelimited_15.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"write_date", "row6", temp, ex_tFileInputDelimited_15), ex_tFileInputDelimited_15));
								}
    							
						} else {						
							
								
									row6.write_date = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_15.getException()!=null) {
											throw rowstate_tFileInputDelimited_15.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_15_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_15 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_15 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_15 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_15";

	

 


	tos_count_tFileInputDelimited_15++;

/**
 * [tFileInputDelimited_15 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_15";

	

 



/**
 * [tFileInputDelimited_15 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.id = row6.id;
				
				row6_HashRow.name = row6.name;
				
				row6_HashRow.outstanding_account_id = row6.outstanding_account_id;
				
				row6_HashRow.receivable_account_id = row6.receivable_account_id;
				
				row6_HashRow.is_cash_count = row6.is_cash_count;
				
				row6_HashRow.journal_id = row6.journal_id;
				
				row6_HashRow.split_transactions = row6.split_transactions;
				
				row6_HashRow.company_id = row6.company_id;
				
				row6_HashRow.use_payment_terminal = row6.use_payment_terminal;
				
				row6_HashRow.active = row6.active;
				
				row6_HashRow.create_uid = row6.create_uid;
				
				row6_HashRow.create_date = row6.create_date;
				
				row6_HashRow.write_uid = row6.write_uid;
				
				row6_HashRow.write_date = row6.write_date;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_15";

	

 



/**
 * [tFileInputDelimited_15 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_15 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_15";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/posPaymentMehtod.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_15!=null){
                		fid_tFileInputDelimited_15.close();
                	}
                }
                if(fid_tFileInputDelimited_15!=null){
                	globalMap.put("tFileInputDelimited_15_NB_LINE", fid_tFileInputDelimited_15.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_15", true);
end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());




/**
 * [tFileInputDelimited_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_15 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_15";

	

 



/**
 * [tFileInputDelimited_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_SalesFactV2 = new byte[0];
    static byte[] commonByteArray_PACIFICO_SalesFactV2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer payment_method_key;

				public Integer getPayment_method_key () {
					return this.payment_method_key;
				}
				
			    public Integer payment_method_id;

				public Integer getPayment_method_id () {
					return this.payment_method_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean isCash;

				public Boolean getIsCash () {
					return this.isCash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.payment_method_id == null) ? 0 : this.payment_method_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.payment_method_id == null) {
							if (other.payment_method_id != null)
								return false;
						
						} else if (!this.payment_method_id.equals(other.payment_method_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.payment_method_key = this.payment_method_key;
	            other.payment_method_id = this.payment_method_id;
	            other.name = this.name;
	            other.isCash = this.isCash;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.payment_method_id = this.payment_method_id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.payment_method_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_SalesFactV2) {

        	try {

        		int length = 0;
		
						this.payment_method_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.payment_method_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.payment_method_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.payment_method_key = readInteger(dis,ois);
					
						this.name = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isCash = null;
           				} else {
           			    	this.isCash = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.payment_method_key = readInteger(dis,objectIn);
					
						this.name = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.isCash = null;
           				} else {
           			    	this.isCash = objectIn.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.payment_method_key, dos, oos);
					
						writeString(this.name, dos, oos);
					
						if(this.isCash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isCash);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.payment_method_key, dos, objectOut);
					
						writeString(this.name, dos, objectOut);
					
						if(this.isCash == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.isCash);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("payment_method_key="+String.valueOf(payment_method_key));
		sb.append(",payment_method_id="+String.valueOf(payment_method_id));
		sb.append(",name="+name);
		sb.append(",isCash="+String.valueOf(isCash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.payment_method_id, other.payment_method_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tFileInputDelimited_11 - inputs:(after_tFileInputDelimited_10) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_8 - inputs:(row5,row7) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_11", false);
		start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_11";

	
		int tos_count_tFileInputDelimited_11 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				int limit_tFileInputDelimited_11 = -1;
				try{
					
						Object filename_tFileInputDelimited_11 = context.temp_path+"/DimPaymentMethod.csv";
						if(filename_tFileInputDelimited_11 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
			if(footer_value_tFileInputDelimited_11 >0 || random_value_tFileInputDelimited_11 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(context.temp_path+"/DimPaymentMethod.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_11
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_11!=null && fid_tFileInputDelimited_11.nextRecord()) {
						rowstate_tFileInputDelimited_11.reset();
						
			    						row7 = null;			
									
			    						row7 = null;			
												
									boolean whetherReject_tFileInputDelimited_11 = false;
									row7 = new row7Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_11 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_11 = 0;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row7.payment_method_key = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"payment_method_key", "row7", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								
									row7.payment_method_key = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 1;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row7.payment_method_id = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"payment_method_id", "row7", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								
									row7.payment_method_id = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 2;
					
							row7.name = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 3;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								row7.isCash = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"isCash", "row7", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								
									row7.isCash = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_11.getException()!=null) {
											throw rowstate_tFileInputDelimited_11.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_11 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row7 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_11 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 


	tos_count_tFileInputDelimited_11++;

/**
 * [tFileInputDelimited_11 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.payment_method_key = row7.payment_method_key;
				
				row7_HashRow.payment_method_id = row7.payment_method_id;
				
				row7_HashRow.name = row7.name;
				
				row7_HashRow.isCash = row7.isCash;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	



            }
            }finally{
                if(!((Object)(context.temp_path+"/DimPaymentMethod.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_11!=null){
                		fid_tFileInputDelimited_11.close();
                	}
                }
                if(fid_tFileInputDelimited_11!=null){
                	globalMap.put("tFileInputDelimited_11_NB_LINE", fid_tFileInputDelimited_11.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_11", true);
end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());




/**
 * [tFileInputDelimited_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final SalesFactV2 SalesFactV2Class = new SalesFactV2();

        int exitCode = SalesFactV2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SalesFactV2.class.getClassLoader().getResourceAsStream("pacifico/salesfactv2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SalesFactV2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("AccessKeyId", "id_String");
                        if(context.getStringValue("AccessKeyId") == null) {
                            context.AccessKeyId = null;
                        } else {
                            context.AccessKeyId=(String) context.getProperty("AccessKeyId");
                        }
                        context.setContextType("SecretAccessKey", "id_String");
                        if(context.getStringValue("SecretAccessKey") == null) {
                            context.SecretAccessKey = null;
                        } else {
                            context.SecretAccessKey=(String) context.getProperty("SecretAccessKey");
                        }
                        context.setContextType("temp_path", "id_String");
                        if(context.getStringValue("temp_path") == null) {
                            context.temp_path = null;
                        } else {
                            context.temp_path=(String) context.getProperty("temp_path");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("AccessKeyId")) {
                context.AccessKeyId = (String) parentContextMap.get("AccessKeyId");
            }if (parentContextMap.containsKey("SecretAccessKey")) {
                context.SecretAccessKey = (String) parentContextMap.get("SecretAccessKey");
            }if (parentContextMap.containsKey("temp_path")) {
                context.temp_path = (String) parentContextMap.get("temp_path");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SalesFactV2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     963402 characters generated by Talend Open Studio for Data Integration 
 *     on the February 1, 2023 at 11:45:53 PM CST
 ************************************************************************************************/