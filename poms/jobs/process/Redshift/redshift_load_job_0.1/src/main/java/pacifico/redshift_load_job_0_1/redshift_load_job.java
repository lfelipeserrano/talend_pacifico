// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pacifico.redshift_load_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: redshift_load_job Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class redshift_load_job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "redshift_load_job";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					redshift_load_job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(redshift_load_job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tS3Connection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:+2Gf5OTslUrcHhnIfx3K2vlxk9wEdGg+N62SO+9fHcagoPy99IZDB8HG83QUev5H91FNpbYebTguJMj0gcfoBTTPbYo=");

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIAVMNG53PS4LMU54AJ", decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder
						.standard();

				final boolean useRegionEndpoint_tS3Connection_1 = false;
				final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
				final boolean enableAccelerateMode_tS3Connection_1 = false;
				final boolean enablePathStyleAccess_tS3Connection_1 = false;

				if (useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null
						&& !regionEndpoint_tS3Connection_1.isEmpty()) {
					builder_tS3Connection_1.withEndpointConfiguration(
							new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(
									regionEndpoint_tS3Connection_1, "us-east-2"));
				} else {
					builder_tS3Connection_1.withRegion("us-east-2");
				}

				if (enableAccelerateMode_tS3Connection_1) {
					builder_tS3Connection_1.withAccelerateModeEnabled(true);
				}

				builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1)
						.withClientConfiguration(cc_tS3Connection_1);

				if (useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
					builder_tS3Connection_1.enablePathStyleAccess();
				}

				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();

				// This method is just for test connection.
				conn_tS3Connection_1.getS3AccountOwner();

				globalMap.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tS3Connection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				StringBuilder sbuilder_tDBConnection_1 = new StringBuilder();
				sbuilder_tDBConnection_1.append("jdbc:redshift:");
				sbuilder_tDBConnection_1.append("//")
						.append("redshift-cluster-2.csmpgpbaharn.us-east-1.redshift.amazonaws.com").append(":")
						.append("5439").append("/").append("pacifico").append("?loglevel=").append(1);
				String url_tDBConnection_1 = sbuilder_tDBConnection_1.toString();
				String dbUser_tDBConnection_1 = "awsuser";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:lJssLzc74ULw5dXY/Zndax8noQMogZNiUvdko0TrhVCes4RN0A==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.amazon.redshift.jdbc42.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}
				globalMap.put("schema_" + "tDBConnection_1", "public");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBBulkExec_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_1 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_1", false);
				start_Hash.put("tDBBulkExec_1", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_1";

				int tos_count_tDBBulkExec_1 = 0;

				String dbschema_tDBBulkExec_1 = null;

				dbschema_tDBBulkExec_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_1 = "dimcustomer";
				String tableName2_tDBBulkExec_1 = tableName_tDBBulkExec_1;
				boolean isTempTable_tDBBulkExec_1 = tableName_tDBBulkExec_1 != null
						&& tableName_tDBBulkExec_1.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_1) {
					tableName2_tDBBulkExec_1 = "\"" + tableName2_tDBBulkExec_1 + "\"";
				} else if (dbschema_tDBBulkExec_1 == null || dbschema_tDBBulkExec_1.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_1 = dbschema_tDBBulkExec_1 + "\".\"" + tableName_tDBBulkExec_1;
					tableName2_tDBBulkExec_1 = dbschema_tDBBulkExec_1 + "." + tableName2_tDBBulkExec_1;
				}

				java.sql.Connection conn_tDBBulkExec_1 = null;
				conn_tDBBulkExec_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_1 = new StringBuilder();
				command_tDBBulkExec_1.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_1 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_1 = '\0';

				command_tDBBulkExec_1.append("COPY ").append("\"").append(tableName_tDBBulkExec_1).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:C1OYk80kFUkUe+yKCDSEVmFOdl4TSXjwSeei2HgJGdWTb04meMsVeqbaOyuhCMGMH2gJgCMdANTYrtr+imRs/KaSWME=");
				command_tDBBulkExec_1.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("DimCustomer.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_1).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_1).append("' ");

				if (textEnclosure_tDBBulkExec_1 != '\0') {
					command_tDBBulkExec_1.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_1).append("' ");
				}
				command_tDBBulkExec_1.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_1.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_1.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_1.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_1 = conn_tDBBulkExec_1.createStatement();
				stmt_tDBBulkExec_1.execute(command_tDBBulkExec_1.toString());

				/**
				 * [tDBBulkExec_1 begin ] stop
				 */

				/**
				 * [tDBBulkExec_1 main ] start
				 */

				currentComponent = "tDBBulkExec_1";

				tos_count_tDBBulkExec_1++;

				/**
				 * [tDBBulkExec_1 main ] stop
				 */

				/**
				 * [tDBBulkExec_1 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_1";

				/**
				 * [tDBBulkExec_1 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_1 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_1";

				/**
				 * [tDBBulkExec_1 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_1 end ] start
				 */

				currentComponent = "tDBBulkExec_1";

				ok_Hash.put("tDBBulkExec_1", true);
				end_Hash.put("tDBBulkExec_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBBulkExec_2Process(globalMap);

				/**
				 * [tDBBulkExec_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_1 finally ] start
				 */

				currentComponent = "tDBBulkExec_1";

				/**
				 * [tDBBulkExec_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_1_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_2 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_2", false);
				start_Hash.put("tDBBulkExec_2", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_2";

				int tos_count_tDBBulkExec_2 = 0;

				String dbschema_tDBBulkExec_2 = null;

				dbschema_tDBBulkExec_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_2 = "attributegroupbridge";
				String tableName2_tDBBulkExec_2 = tableName_tDBBulkExec_2;
				boolean isTempTable_tDBBulkExec_2 = tableName_tDBBulkExec_2 != null
						&& tableName_tDBBulkExec_2.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_2) {
					tableName2_tDBBulkExec_2 = "\"" + tableName2_tDBBulkExec_2 + "\"";
				} else if (dbschema_tDBBulkExec_2 == null || dbschema_tDBBulkExec_2.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_2 = dbschema_tDBBulkExec_2 + "\".\"" + tableName_tDBBulkExec_2;
					tableName2_tDBBulkExec_2 = dbschema_tDBBulkExec_2 + "." + tableName2_tDBBulkExec_2;
				}

				java.sql.Connection conn_tDBBulkExec_2 = null;
				conn_tDBBulkExec_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_2 = new StringBuilder();
				command_tDBBulkExec_2.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_2 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_2 = '\0';

				command_tDBBulkExec_2.append("COPY ").append("\"").append(tableName_tDBBulkExec_2).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:rL7zS3Laymb08VRg3GbJMY4o1BE4bTRMNPClSftVr0ft+8SXhwmXacxax3VhG1bkZ62aStrDOUYWbW5Nr5xYMdwS13c=");
				command_tDBBulkExec_2.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("AttributeGroupBridge.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_2).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_2).append("' ");

				if (textEnclosure_tDBBulkExec_2 != '\0') {
					command_tDBBulkExec_2.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_2).append("' ");
				}
				command_tDBBulkExec_2.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_2.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_2.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_2.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_2 = conn_tDBBulkExec_2.createStatement();
				stmt_tDBBulkExec_2.execute(command_tDBBulkExec_2.toString());

				/**
				 * [tDBBulkExec_2 begin ] stop
				 */

				/**
				 * [tDBBulkExec_2 main ] start
				 */

				currentComponent = "tDBBulkExec_2";

				tos_count_tDBBulkExec_2++;

				/**
				 * [tDBBulkExec_2 main ] stop
				 */

				/**
				 * [tDBBulkExec_2 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_2";

				/**
				 * [tDBBulkExec_2 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_2 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_2";

				/**
				 * [tDBBulkExec_2 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_2 end ] start
				 */

				currentComponent = "tDBBulkExec_2";

				ok_Hash.put("tDBBulkExec_2", true);
				end_Hash.put("tDBBulkExec_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBBulkExec_3Process(globalMap);

				/**
				 * [tDBBulkExec_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_2 finally ] start
				 */

				currentComponent = "tDBBulkExec_2";

				/**
				 * [tDBBulkExec_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_2_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_3 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_3", false);
				start_Hash.put("tDBBulkExec_3", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_3";

				int tos_count_tDBBulkExec_3 = 0;

				String dbschema_tDBBulkExec_3 = null;

				dbschema_tDBBulkExec_3 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_3 = "dimattribute";
				String tableName2_tDBBulkExec_3 = tableName_tDBBulkExec_3;
				boolean isTempTable_tDBBulkExec_3 = tableName_tDBBulkExec_3 != null
						&& tableName_tDBBulkExec_3.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_3) {
					tableName2_tDBBulkExec_3 = "\"" + tableName2_tDBBulkExec_3 + "\"";
				} else if (dbschema_tDBBulkExec_3 == null || dbschema_tDBBulkExec_3.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_3 = dbschema_tDBBulkExec_3 + "\".\"" + tableName_tDBBulkExec_3;
					tableName2_tDBBulkExec_3 = dbschema_tDBBulkExec_3 + "." + tableName2_tDBBulkExec_3;
				}

				java.sql.Connection conn_tDBBulkExec_3 = null;
				conn_tDBBulkExec_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_3 = new StringBuilder();
				command_tDBBulkExec_3.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_3 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_3 = '\0';

				command_tDBBulkExec_3.append("COPY ").append("\"").append(tableName_tDBBulkExec_3).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:se21UNRiHm+NEAzMy0NTkvW2xsHqmQPVtwNziL45/KPLocSB4hUOlJDDY/mZQX9zszzwXCboFkau6FdLQksjeTJjqkU=");
				command_tDBBulkExec_3.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("DimAttribute.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_3).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_3).append("' ");

				if (textEnclosure_tDBBulkExec_3 != '\0') {
					command_tDBBulkExec_3.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_3).append("' ");
				}
				command_tDBBulkExec_3.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_3.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_3.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_3.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_3 = conn_tDBBulkExec_3.createStatement();
				stmt_tDBBulkExec_3.execute(command_tDBBulkExec_3.toString());

				/**
				 * [tDBBulkExec_3 begin ] stop
				 */

				/**
				 * [tDBBulkExec_3 main ] start
				 */

				currentComponent = "tDBBulkExec_3";

				tos_count_tDBBulkExec_3++;

				/**
				 * [tDBBulkExec_3 main ] stop
				 */

				/**
				 * [tDBBulkExec_3 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_3 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_3 end ] start
				 */

				currentComponent = "tDBBulkExec_3";

				ok_Hash.put("tDBBulkExec_3", true);
				end_Hash.put("tDBBulkExec_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBBulkExec_4Process(globalMap);

				/**
				 * [tDBBulkExec_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_3 finally ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_3_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_4 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_4", false);
				start_Hash.put("tDBBulkExec_4", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_4";

				int tos_count_tDBBulkExec_4 = 0;

				String dbschema_tDBBulkExec_4 = null;

				dbschema_tDBBulkExec_4 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_4 = "dimdate";
				String tableName2_tDBBulkExec_4 = tableName_tDBBulkExec_4;
				boolean isTempTable_tDBBulkExec_4 = tableName_tDBBulkExec_4 != null
						&& tableName_tDBBulkExec_4.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_4) {
					tableName2_tDBBulkExec_4 = "\"" + tableName2_tDBBulkExec_4 + "\"";
				} else if (dbschema_tDBBulkExec_4 == null || dbschema_tDBBulkExec_4.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_4 = dbschema_tDBBulkExec_4 + "\".\"" + tableName_tDBBulkExec_4;
					tableName2_tDBBulkExec_4 = dbschema_tDBBulkExec_4 + "." + tableName2_tDBBulkExec_4;
				}

				java.sql.Connection conn_tDBBulkExec_4 = null;
				conn_tDBBulkExec_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_4 = new StringBuilder();
				command_tDBBulkExec_4.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_4 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_4 = '\0';

				command_tDBBulkExec_4.append("COPY ").append("\"").append(tableName_tDBBulkExec_4).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:QcANh1DUdN5jNch0U1fSt0JBorJPzRZlpg0hZs7o+oTxz8riTPU1tt/t6qvHxoD8L5Emh55tVtNyldJDulVEiZROsIs=");
				command_tDBBulkExec_4.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("DimDate.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_4).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_4).append("' ");

				if (textEnclosure_tDBBulkExec_4 != '\0') {
					command_tDBBulkExec_4.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_4).append("' ");
				}
				command_tDBBulkExec_4.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_4.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_4.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_4.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_4 = conn_tDBBulkExec_4.createStatement();
				stmt_tDBBulkExec_4.execute(command_tDBBulkExec_4.toString());

				/**
				 * [tDBBulkExec_4 begin ] stop
				 */

				/**
				 * [tDBBulkExec_4 main ] start
				 */

				currentComponent = "tDBBulkExec_4";

				tos_count_tDBBulkExec_4++;

				/**
				 * [tDBBulkExec_4 main ] stop
				 */

				/**
				 * [tDBBulkExec_4 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_4";

				/**
				 * [tDBBulkExec_4 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_4 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_4";

				/**
				 * [tDBBulkExec_4 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_4 end ] start
				 */

				currentComponent = "tDBBulkExec_4";

				ok_Hash.put("tDBBulkExec_4", true);
				end_Hash.put("tDBBulkExec_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBBulkExec_5Process(globalMap);

				/**
				 * [tDBBulkExec_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_4 finally ] start
				 */

				currentComponent = "tDBBulkExec_4";

				/**
				 * [tDBBulkExec_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_4_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_5 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_5", false);
				start_Hash.put("tDBBulkExec_5", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_5";

				int tos_count_tDBBulkExec_5 = 0;

				String dbschema_tDBBulkExec_5 = null;

				dbschema_tDBBulkExec_5 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_5 = "dimpaymentmethod";
				String tableName2_tDBBulkExec_5 = tableName_tDBBulkExec_5;
				boolean isTempTable_tDBBulkExec_5 = tableName_tDBBulkExec_5 != null
						&& tableName_tDBBulkExec_5.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_5) {
					tableName2_tDBBulkExec_5 = "\"" + tableName2_tDBBulkExec_5 + "\"";
				} else if (dbschema_tDBBulkExec_5 == null || dbschema_tDBBulkExec_5.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_5 = dbschema_tDBBulkExec_5 + "\".\"" + tableName_tDBBulkExec_5;
					tableName2_tDBBulkExec_5 = dbschema_tDBBulkExec_5 + "." + tableName2_tDBBulkExec_5;
				}

				java.sql.Connection conn_tDBBulkExec_5 = null;
				conn_tDBBulkExec_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_5 = new StringBuilder();
				command_tDBBulkExec_5.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_5 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_5 = '\0';

				command_tDBBulkExec_5.append("COPY ").append("\"").append(tableName_tDBBulkExec_5).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Pe/GAWdQSFaYSaRliBGGWrmihQT3HZOSMHHrI7/YOXlwyZJfumoQtaVPqu/F9fP2/r+2Ph4DTMC3Jhb1LecDPJm+Bb0=");
				command_tDBBulkExec_5.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("DimPaymentMethod.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_5).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_5).append("' ");

				if (textEnclosure_tDBBulkExec_5 != '\0') {
					command_tDBBulkExec_5.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_5).append("' ");
				}
				command_tDBBulkExec_5.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_5.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_5.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_5.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_5 = conn_tDBBulkExec_5.createStatement();
				stmt_tDBBulkExec_5.execute(command_tDBBulkExec_5.toString());

				/**
				 * [tDBBulkExec_5 begin ] stop
				 */

				/**
				 * [tDBBulkExec_5 main ] start
				 */

				currentComponent = "tDBBulkExec_5";

				tos_count_tDBBulkExec_5++;

				/**
				 * [tDBBulkExec_5 main ] stop
				 */

				/**
				 * [tDBBulkExec_5 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_5";

				/**
				 * [tDBBulkExec_5 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_5 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_5";

				/**
				 * [tDBBulkExec_5 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_5 end ] start
				 */

				currentComponent = "tDBBulkExec_5";

				ok_Hash.put("tDBBulkExec_5", true);
				end_Hash.put("tDBBulkExec_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBBulkExec_6Process(globalMap);

				/**
				 * [tDBBulkExec_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_5 finally ] start
				 */

				currentComponent = "tDBBulkExec_5";

				/**
				 * [tDBBulkExec_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_5_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_6 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_6", false);
				start_Hash.put("tDBBulkExec_6", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_6";

				int tos_count_tDBBulkExec_6 = 0;

				String dbschema_tDBBulkExec_6 = null;

				dbschema_tDBBulkExec_6 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_6 = "dimproduct";
				String tableName2_tDBBulkExec_6 = tableName_tDBBulkExec_6;
				boolean isTempTable_tDBBulkExec_6 = tableName_tDBBulkExec_6 != null
						&& tableName_tDBBulkExec_6.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_6) {
					tableName2_tDBBulkExec_6 = "\"" + tableName2_tDBBulkExec_6 + "\"";
				} else if (dbschema_tDBBulkExec_6 == null || dbschema_tDBBulkExec_6.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_6 = dbschema_tDBBulkExec_6 + "\".\"" + tableName_tDBBulkExec_6;
					tableName2_tDBBulkExec_6 = dbschema_tDBBulkExec_6 + "." + tableName2_tDBBulkExec_6;
				}

				java.sql.Connection conn_tDBBulkExec_6 = null;
				conn_tDBBulkExec_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_6 = new StringBuilder();
				command_tDBBulkExec_6.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_6 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_6 = '\0';

				command_tDBBulkExec_6.append("COPY ").append("\"").append(tableName_tDBBulkExec_6).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:UZxd60caJ0NT6VVWSgbGi7Y7V+KcyzNVGx3g/zfqRh1mcJabtAJWm9da4dwDeH6IesEogASTgRESQSln+6SfCGNpRO8=");
				command_tDBBulkExec_6.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("DimProduct.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_6).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_6).append("' ");

				if (textEnclosure_tDBBulkExec_6 != '\0') {
					command_tDBBulkExec_6.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_6).append("' ");
				}
				command_tDBBulkExec_6.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_6.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_6.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_6.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_6 = conn_tDBBulkExec_6.createStatement();
				stmt_tDBBulkExec_6.execute(command_tDBBulkExec_6.toString());

				/**
				 * [tDBBulkExec_6 begin ] stop
				 */

				/**
				 * [tDBBulkExec_6 main ] start
				 */

				currentComponent = "tDBBulkExec_6";

				tos_count_tDBBulkExec_6++;

				/**
				 * [tDBBulkExec_6 main ] stop
				 */

				/**
				 * [tDBBulkExec_6 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_6";

				/**
				 * [tDBBulkExec_6 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_6 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_6";

				/**
				 * [tDBBulkExec_6 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_6 end ] start
				 */

				currentComponent = "tDBBulkExec_6";

				ok_Hash.put("tDBBulkExec_6", true);
				end_Hash.put("tDBBulkExec_6", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBBulkExec_7Process(globalMap);

				/**
				 * [tDBBulkExec_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_6 finally ] start
				 */

				currentComponent = "tDBBulkExec_6";

				/**
				 * [tDBBulkExec_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_6_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_7 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_7", false);
				start_Hash.put("tDBBulkExec_7", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_7";

				int tos_count_tDBBulkExec_7 = 0;

				String dbschema_tDBBulkExec_7 = null;

				dbschema_tDBBulkExec_7 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_7 = "dimstore";
				String tableName2_tDBBulkExec_7 = tableName_tDBBulkExec_7;
				boolean isTempTable_tDBBulkExec_7 = tableName_tDBBulkExec_7 != null
						&& tableName_tDBBulkExec_7.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_7) {
					tableName2_tDBBulkExec_7 = "\"" + tableName2_tDBBulkExec_7 + "\"";
				} else if (dbschema_tDBBulkExec_7 == null || dbschema_tDBBulkExec_7.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_7 = dbschema_tDBBulkExec_7 + "\".\"" + tableName_tDBBulkExec_7;
					tableName2_tDBBulkExec_7 = dbschema_tDBBulkExec_7 + "." + tableName2_tDBBulkExec_7;
				}

				java.sql.Connection conn_tDBBulkExec_7 = null;
				conn_tDBBulkExec_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_7 = new StringBuilder();
				command_tDBBulkExec_7.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_7 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_7 = '\0';

				command_tDBBulkExec_7.append("COPY ").append("\"").append(tableName_tDBBulkExec_7).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_7 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:CdDb53vtUcCafzPT0IFtaGvlnV2Ep+gb1NE2EYgaIN0UTrzyyttTxG1ouHO4KslZqDuMKZB0A4n6vekem+hv9slHhdg=");
				command_tDBBulkExec_7.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("DimStore.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_7).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_7).append("' ");

				if (textEnclosure_tDBBulkExec_7 != '\0') {
					command_tDBBulkExec_7.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_7).append("' ");
				}
				command_tDBBulkExec_7.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_7.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_7.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_7.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_7 = conn_tDBBulkExec_7.createStatement();
				stmt_tDBBulkExec_7.execute(command_tDBBulkExec_7.toString());

				/**
				 * [tDBBulkExec_7 begin ] stop
				 */

				/**
				 * [tDBBulkExec_7 main ] start
				 */

				currentComponent = "tDBBulkExec_7";

				tos_count_tDBBulkExec_7++;

				/**
				 * [tDBBulkExec_7 main ] stop
				 */

				/**
				 * [tDBBulkExec_7 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_7";

				/**
				 * [tDBBulkExec_7 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_7 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_7";

				/**
				 * [tDBBulkExec_7 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_7 end ] start
				 */

				currentComponent = "tDBBulkExec_7";

				ok_Hash.put("tDBBulkExec_7", true);
				end_Hash.put("tDBBulkExec_7", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBBulkExec_8Process(globalMap);

				/**
				 * [tDBBulkExec_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_7 finally ] start
				 */

				currentComponent = "tDBBulkExec_7";

				/**
				 * [tDBBulkExec_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_7_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBBulkExec_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_8 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_8", false);
				start_Hash.put("tDBBulkExec_8", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_8";

				int tos_count_tDBBulkExec_8 = 0;

				String dbschema_tDBBulkExec_8 = null;

				dbschema_tDBBulkExec_8 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBBulkExec_8 = "factsales";
				String tableName2_tDBBulkExec_8 = tableName_tDBBulkExec_8;
				boolean isTempTable_tDBBulkExec_8 = tableName_tDBBulkExec_8 != null
						&& tableName_tDBBulkExec_8.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_8) {
					tableName2_tDBBulkExec_8 = "\"" + tableName2_tDBBulkExec_8 + "\"";
				} else if (dbschema_tDBBulkExec_8 == null || dbschema_tDBBulkExec_8.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_8 = dbschema_tDBBulkExec_8 + "\".\"" + tableName_tDBBulkExec_8;
					tableName2_tDBBulkExec_8 = dbschema_tDBBulkExec_8 + "." + tableName2_tDBBulkExec_8;
				}

				java.sql.Connection conn_tDBBulkExec_8 = null;
				conn_tDBBulkExec_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				StringBuilder command_tDBBulkExec_8 = new StringBuilder();
				command_tDBBulkExec_8.append("--Talend -v 8.0 ").append('\n');
				char fieldSeparator_tDBBulkExec_8 = String.valueOf(';').charAt(0);
				char textEnclosure_tDBBulkExec_8 = '\0';

				command_tDBBulkExec_8.append("COPY ").append("\"").append(tableName_tDBBulkExec_8).append("\"")

						.append(" FROM '");
				final String decryptedPwd_tDBBulkExec_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:nF5AlKnUrQKOC01+/XUk+ooib5izTyrBVX7SXVExrgQtnevxyp+jRnRO7lHYbTGrUHUlVv51OAUyHYbUtuJMLgBu+3s=");
				command_tDBBulkExec_8.append("s3://").append("libreriapacifico/presentation").append("/")
						.append("SalesFact.csv").append("' credentials '").append("aws_access_key_id=")
						.append("AKIAVMNG53PS4LMU54AJ").append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_8).append("' ").append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_8).append("' ");

				if (textEnclosure_tDBBulkExec_8 != '\0') {
					command_tDBBulkExec_8.append("CSV QUOTE '").append(textEnclosure_tDBBulkExec_8).append("' ");
				}
				command_tDBBulkExec_8.append("ENCODING ").append("UTF8").append(" ");
				command_tDBBulkExec_8.append("REGION '").append("us-east-2").append("' ");
				command_tDBBulkExec_8.append("IGNOREHEADER ").append("1").append(" ");
				command_tDBBulkExec_8.append("BLANKSASNULL ");
				java.sql.Statement stmt_tDBBulkExec_8 = conn_tDBBulkExec_8.createStatement();
				stmt_tDBBulkExec_8.execute(command_tDBBulkExec_8.toString());

				/**
				 * [tDBBulkExec_8 begin ] stop
				 */

				/**
				 * [tDBBulkExec_8 main ] start
				 */

				currentComponent = "tDBBulkExec_8";

				tos_count_tDBBulkExec_8++;

				/**
				 * [tDBBulkExec_8 main ] stop
				 */

				/**
				 * [tDBBulkExec_8 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_8";

				/**
				 * [tDBBulkExec_8 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_8 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_8";

				/**
				 * [tDBBulkExec_8 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_8 end ] start
				 */

				currentComponent = "tDBBulkExec_8";

				ok_Hash.put("tDBBulkExec_8", true);
				end_Hash.put("tDBBulkExec_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBBulkExec_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_8 finally ] start
				 */

				currentComponent = "tDBBulkExec_8";

				/**
				 * [tDBBulkExec_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_8_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final redshift_load_job redshift_load_jobClass = new redshift_load_job();

		int exitCode = redshift_load_jobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = redshift_load_job.class.getClassLoader()
					.getResourceAsStream("pacifico/redshift_load_job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = redshift_load_job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tS3Connection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tS3Connection_1) {
			globalMap.put("tS3Connection_1_SUBPROCESS_STATE", -1);

			e_tS3Connection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : redshift_load_job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeS3Connections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 85986 characters generated by Talend Open Studio for Data Integration on the
 * December 8, 2022 at 12:04:11 AM CST
 ************************************************************************************************/