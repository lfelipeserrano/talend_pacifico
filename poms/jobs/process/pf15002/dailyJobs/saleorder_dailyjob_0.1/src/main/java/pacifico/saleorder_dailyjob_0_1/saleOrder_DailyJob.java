// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.saleorder_dailyjob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: saleOrder_DailyJob Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class saleOrder_DailyJob implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "saleOrder_DailyJob";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				saleOrder_DailyJob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(saleOrder_DailyJob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_saleOrder_DailyJob = new byte[0];
    static byte[] commonByteArray_PACIFICO_saleOrder_DailyJob = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer campaign_id;

				public Integer getCampaign_id () {
					return this.campaign_id;
				}
				
			    public Integer source_id;

				public Integer getSource_id () {
					return this.source_id;
				}
				
			    public Integer medium_id;

				public Integer getMedium_id () {
					return this.medium_id;
				}
				
			    public Integer message_main_attachment_id;

				public Integer getMessage_main_attachment_id () {
					return this.message_main_attachment_id;
				}
				
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String client_order_ref;

				public String getClient_order_ref () {
					return this.client_order_ref;
				}
				
			    public String reference;

				public String getReference () {
					return this.reference;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date date_order;

				public java.util.Date getDate_order () {
					return this.date_order;
				}
				
			    public java.util.Date validity_date;

				public java.util.Date getValidity_date () {
					return this.validity_date;
				}
				
			    public Boolean require_signature;

				public Boolean getRequire_signature () {
					return this.require_signature;
				}
				
			    public Boolean require_payment;

				public Boolean getRequire_payment () {
					return this.require_payment;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer user_id;

				public Integer getUser_id () {
					return this.user_id;
				}
				
			    public int partner_id;

				public int getPartner_id () {
					return this.partner_id;
				}
				
			    public int partner_invoice_id;

				public int getPartner_invoice_id () {
					return this.partner_invoice_id;
				}
				
			    public int partner_shipping_id;

				public int getPartner_shipping_id () {
					return this.partner_shipping_id;
				}
				
			    public int pricelist_id;

				public int getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public Integer currency_id;

				public Integer getCurrency_id () {
					return this.currency_id;
				}
				
			    public Integer analytic_account_id;

				public Integer getAnalytic_account_id () {
					return this.analytic_account_id;
				}
				
			    public String invoice_status;

				public String getInvoice_status () {
					return this.invoice_status;
				}
				
			    public String note;

				public String getNote () {
					return this.note;
				}
				
			    public BigDecimal amount_untaxed;

				public BigDecimal getAmount_untaxed () {
					return this.amount_untaxed;
				}
				
			    public BigDecimal amount_tax;

				public BigDecimal getAmount_tax () {
					return this.amount_tax;
				}
				
			    public BigDecimal amount_total;

				public BigDecimal getAmount_total () {
					return this.amount_total;
				}
				
			    public BigDecimal currency_rate;

				public BigDecimal getCurrency_rate () {
					return this.currency_rate;
				}
				
			    public Integer payment_term_id;

				public Integer getPayment_term_id () {
					return this.payment_term_id;
				}
				
			    public Integer fiscal_position_id;

				public Integer getFiscal_position_id () {
					return this.fiscal_position_id;
				}
				
			    public int company_id;

				public int getCompany_id () {
					return this.company_id;
				}
				
			    public Integer team_id;

				public Integer getTeam_id () {
					return this.team_id;
				}
				
			    public String signed_by;

				public String getSigned_by () {
					return this.signed_by;
				}
				
			    public java.util.Date signed_on;

				public java.util.Date getSigned_on () {
					return this.signed_on;
				}
				
			    public java.util.Date commitment_date;

				public java.util.Date getCommitment_date () {
					return this.commitment_date;
				}
				
			    public Boolean show_update_pricelist;

				public Boolean getShow_update_pricelist () {
					return this.show_update_pricelist;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public Integer sale_order_template_id;

				public Integer getSale_order_template_id () {
					return this.sale_order_template_id;
				}
				
			    public Integer incoterm;

				public Integer getIncoterm () {
					return this.incoterm;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public int warehouse_id;

				public int getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public Integer procurement_group_id;

				public Integer getProcurement_group_id () {
					return this.procurement_group_id;
				}
				
			    public java.util.Date effective_date;

				public java.util.Date getEffective_date () {
					return this.effective_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_saleOrder_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_saleOrder_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_saleOrder_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_saleOrder_DailyJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_saleOrder_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_saleOrder_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_saleOrder_DailyJob.length) {
				if(length < 1024 && commonByteArray_PACIFICO_saleOrder_DailyJob.length == 0) {
   					commonByteArray_PACIFICO_saleOrder_DailyJob = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_saleOrder_DailyJob = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_saleOrder_DailyJob, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_saleOrder_DailyJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_saleOrder_DailyJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.campaign_id = readInteger(dis);
					
						this.source_id = readInteger(dis);
					
						this.medium_id = readInteger(dis);
					
						this.message_main_attachment_id = readInteger(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
			        this.partner_id = dis.readInt();
					
			        this.partner_invoice_id = dis.readInt();
					
			        this.partner_shipping_id = dis.readInt();
					
			        this.pricelist_id = dis.readInt();
					
						this.currency_id = readInteger(dis);
					
						this.analytic_account_id = readInteger(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = (BigDecimal) dis.readObject();
					
						this.amount_tax = (BigDecimal) dis.readObject();
					
						this.amount_total = (BigDecimal) dis.readObject();
					
						this.currency_rate = (BigDecimal) dis.readObject();
					
						this.payment_term_id = readInteger(dis);
					
						this.fiscal_position_id = readInteger(dis);
					
			        this.company_id = dis.readInt();
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readDate(dis);
					
					this.commitment_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.show_update_pricelist = null;
           				} else {
           			    	this.show_update_pricelist = dis.readBoolean();
           				}
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.sale_order_template_id = readInteger(dis);
					
						this.incoterm = readInteger(dis);
					
					this.picking_policy = readString(dis);
					
			        this.warehouse_id = dis.readInt();
					
						this.procurement_group_id = readInteger(dis);
					
					this.effective_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_saleOrder_DailyJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.campaign_id = readInteger(dis);
					
						this.source_id = readInteger(dis);
					
						this.medium_id = readInteger(dis);
					
						this.message_main_attachment_id = readInteger(dis);
					
					this.access_token = readString(dis);
					
					this.name = readString(dis);
					
					this.origin = readString(dis);
					
					this.client_order_ref = readString(dis);
					
					this.reference = readString(dis);
					
					this.state = readString(dis);
					
					this.date_order = readDate(dis);
					
					this.validity_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_signature = null;
           				} else {
           			    	this.require_signature = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.require_payment = null;
           				} else {
           			    	this.require_payment = dis.readBoolean();
           				}
					
					this.create_date = readDate(dis);
					
						this.user_id = readInteger(dis);
					
			        this.partner_id = dis.readInt();
					
			        this.partner_invoice_id = dis.readInt();
					
			        this.partner_shipping_id = dis.readInt();
					
			        this.pricelist_id = dis.readInt();
					
						this.currency_id = readInteger(dis);
					
						this.analytic_account_id = readInteger(dis);
					
					this.invoice_status = readString(dis);
					
					this.note = readString(dis);
					
						this.amount_untaxed = (BigDecimal) dis.readObject();
					
						this.amount_tax = (BigDecimal) dis.readObject();
					
						this.amount_total = (BigDecimal) dis.readObject();
					
						this.currency_rate = (BigDecimal) dis.readObject();
					
						this.payment_term_id = readInteger(dis);
					
						this.fiscal_position_id = readInteger(dis);
					
			        this.company_id = dis.readInt();
					
						this.team_id = readInteger(dis);
					
					this.signed_by = readString(dis);
					
					this.signed_on = readDate(dis);
					
					this.commitment_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.show_update_pricelist = null;
           				} else {
           			    	this.show_update_pricelist = dis.readBoolean();
           				}
					
						this.create_uid = readInteger(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
						this.sale_order_template_id = readInteger(dis);
					
						this.incoterm = readInteger(dis);
					
					this.picking_policy = readString(dis);
					
			        this.warehouse_id = dis.readInt();
					
						this.procurement_group_id = readInteger(dis);
					
					this.effective_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.campaign_id,dos);
					
					// Integer
				
						writeInteger(this.source_id,dos);
					
					// Integer
				
						writeInteger(this.medium_id,dos);
					
					// Integer
				
						writeInteger(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// java.util.Date
				
						writeDate(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// int
				
		            	dos.writeInt(this.partner_id);
					
					// int
				
		            	dos.writeInt(this.partner_invoice_id);
					
					// int
				
		            	dos.writeInt(this.partner_shipping_id);
					
					// int
				
		            	dos.writeInt(this.pricelist_id);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// Integer
				
						writeInteger(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount_untaxed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount_tax);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount_total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.currency_rate);
					
					// Integer
				
						writeInteger(this.payment_term_id,dos);
					
					// Integer
				
						writeInteger(this.fiscal_position_id,dos);
					
					// int
				
		            	dos.writeInt(this.company_id);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// java.util.Date
				
						writeDate(this.signed_on,dos);
					
					// java.util.Date
				
						writeDate(this.commitment_date,dos);
					
					// Boolean
				
						if(this.show_update_pricelist == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.show_update_pricelist);
		            	}
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// int
				
		            	dos.writeInt(this.warehouse_id);
					
					// Integer
				
						writeInteger(this.procurement_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.campaign_id,dos);
					
					// Integer
				
						writeInteger(this.source_id,dos);
					
					// Integer
				
						writeInteger(this.medium_id,dos);
					
					// Integer
				
						writeInteger(this.message_main_attachment_id,dos);
					
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.client_order_ref,dos);
					
					// String
				
						writeString(this.reference,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.date_order,dos);
					
					// java.util.Date
				
						writeDate(this.validity_date,dos);
					
					// Boolean
				
						if(this.require_signature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_signature);
		            	}
					
					// Boolean
				
						if(this.require_payment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.require_payment);
		            	}
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.user_id,dos);
					
					// int
				
		            	dos.writeInt(this.partner_id);
					
					// int
				
		            	dos.writeInt(this.partner_invoice_id);
					
					// int
				
		            	dos.writeInt(this.partner_shipping_id);
					
					// int
				
		            	dos.writeInt(this.pricelist_id);
					
					// Integer
				
						writeInteger(this.currency_id,dos);
					
					// Integer
				
						writeInteger(this.analytic_account_id,dos);
					
					// String
				
						writeString(this.invoice_status,dos);
					
					// String
				
						writeString(this.note,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount_untaxed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount_tax);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount_total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.currency_rate);
					
					// Integer
				
						writeInteger(this.payment_term_id,dos);
					
					// Integer
				
						writeInteger(this.fiscal_position_id,dos);
					
					// int
				
		            	dos.writeInt(this.company_id);
					
					// Integer
				
						writeInteger(this.team_id,dos);
					
					// String
				
						writeString(this.signed_by,dos);
					
					// java.util.Date
				
						writeDate(this.signed_on,dos);
					
					// java.util.Date
				
						writeDate(this.commitment_date,dos);
					
					// Boolean
				
						if(this.show_update_pricelist == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.show_update_pricelist);
		            	}
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// Integer
				
						writeInteger(this.sale_order_template_id,dos);
					
					// Integer
				
						writeInteger(this.incoterm,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// int
				
		            	dos.writeInt(this.warehouse_id);
					
					// Integer
				
						writeInteger(this.procurement_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.effective_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",campaign_id="+String.valueOf(campaign_id));
		sb.append(",source_id="+String.valueOf(source_id));
		sb.append(",medium_id="+String.valueOf(medium_id));
		sb.append(",message_main_attachment_id="+String.valueOf(message_main_attachment_id));
		sb.append(",access_token="+access_token);
		sb.append(",name="+name);
		sb.append(",origin="+origin);
		sb.append(",client_order_ref="+client_order_ref);
		sb.append(",reference="+reference);
		sb.append(",state="+state);
		sb.append(",date_order="+String.valueOf(date_order));
		sb.append(",validity_date="+String.valueOf(validity_date));
		sb.append(",require_signature="+String.valueOf(require_signature));
		sb.append(",require_payment="+String.valueOf(require_payment));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",user_id="+String.valueOf(user_id));
		sb.append(",partner_id="+String.valueOf(partner_id));
		sb.append(",partner_invoice_id="+String.valueOf(partner_invoice_id));
		sb.append(",partner_shipping_id="+String.valueOf(partner_shipping_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",currency_id="+String.valueOf(currency_id));
		sb.append(",analytic_account_id="+String.valueOf(analytic_account_id));
		sb.append(",invoice_status="+invoice_status);
		sb.append(",note="+note);
		sb.append(",amount_untaxed="+String.valueOf(amount_untaxed));
		sb.append(",amount_tax="+String.valueOf(amount_tax));
		sb.append(",amount_total="+String.valueOf(amount_total));
		sb.append(",currency_rate="+String.valueOf(currency_rate));
		sb.append(",payment_term_id="+String.valueOf(payment_term_id));
		sb.append(",fiscal_position_id="+String.valueOf(fiscal_position_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",team_id="+String.valueOf(team_id));
		sb.append(",signed_by="+signed_by);
		sb.append(",signed_on="+String.valueOf(signed_on));
		sb.append(",commitment_date="+String.valueOf(commitment_date));
		sb.append(",show_update_pricelist="+String.valueOf(show_update_pricelist));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",sale_order_template_id="+String.valueOf(sale_order_template_id));
		sb.append(",incoterm="+String.valueOf(incoterm));
		sb.append(",picking_policy="+picking_policy);
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",procurement_group_id="+String.valueOf(procurement_group_id));
		sb.append(",effective_date="+String.valueOf(effective_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw_data.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("campaign_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("source_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("medium_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message_main_attachment_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("access_token");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("name");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("client_order_ref");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("reference");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("state");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("date_order");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("validity_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("require_signature");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("require_payment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("create_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("user_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_invoice_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_shipping_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pricelist_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("currency_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("analytic_account_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("invoice_status");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("note");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_untaxed");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_tax");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_total");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("currency_rate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("payment_term_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("fiscal_position_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("company_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("team_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("signed_by");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("signed_on");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("commitment_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("show_update_pricelist");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("create_uid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("write_uid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("write_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("sale_order_template_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("incoterm");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("picking_policy");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("warehouse_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("procurement_group_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("effective_date");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "openpg";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2ZebZiiaJlo4PcIojqdClv9U8cS+aod/u3EYeZLHb8npVI6Zog==");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "pacifico";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from sale_order where \"create_date\" >= '2022-05-27' OR \"write_date\" >= '2022-05-27'";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.id = 0;
							} else {
		                          
            row1.id = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.campaign_id = null;
							} else {
		                          
            row1.campaign_id = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row1.campaign_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.source_id = null;
							} else {
		                          
            row1.source_id = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.source_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.medium_id = null;
							} else {
		                          
            row1.medium_id = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.medium_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.message_main_attachment_id = null;
							} else {
		                          
            row1.message_main_attachment_id = rs_tDBInput_1.getInt(5);
            if(rs_tDBInput_1.wasNull()){
                    row1.message_main_attachment_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.access_token = null;
							} else {
	                         		
        	row1.access_token = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.origin = null;
							} else {
	                         		
        	row1.origin = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.client_order_ref = null;
							} else {
	                         		
        	row1.client_order_ref = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.reference = null;
							} else {
	                         		
        	row1.reference = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.state = null;
							} else {
	                         		
        	row1.state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.date_order = null;
							} else {
										
			row1.date_order = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 12);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.validity_date = null;
							} else {
										
			row1.validity_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 13);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.require_signature = null;
							} else {
	                         		
            row1.require_signature = rs_tDBInput_1.getBoolean(14);
            if(rs_tDBInput_1.wasNull()){
                    row1.require_signature = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.require_payment = null;
							} else {
	                         		
            row1.require_payment = rs_tDBInput_1.getBoolean(15);
            if(rs_tDBInput_1.wasNull()){
                    row1.require_payment = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.create_date = null;
							} else {
										
			row1.create_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 16);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.user_id = null;
							} else {
		                          
            row1.user_id = rs_tDBInput_1.getInt(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.user_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.partner_id = 0;
							} else {
		                          
            row1.partner_id = rs_tDBInput_1.getInt(18);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.partner_invoice_id = 0;
							} else {
		                          
            row1.partner_invoice_id = rs_tDBInput_1.getInt(19);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.partner_shipping_id = 0;
							} else {
		                          
            row1.partner_shipping_id = rs_tDBInput_1.getInt(20);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.pricelist_id = 0;
							} else {
		                          
            row1.pricelist_id = rs_tDBInput_1.getInt(21);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.currency_id = null;
							} else {
		                          
            row1.currency_id = rs_tDBInput_1.getInt(22);
            if(rs_tDBInput_1.wasNull()){
                    row1.currency_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.analytic_account_id = null;
							} else {
		                          
            row1.analytic_account_id = rs_tDBInput_1.getInt(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.analytic_account_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.invoice_status = null;
							} else {
	                         		
        	row1.invoice_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.note = null;
							} else {
	                         		
        	row1.note = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.amount_untaxed = null;
							} else {
		                          
            row1.amount_untaxed = rs_tDBInput_1.getBigDecimal(26);
            if(rs_tDBInput_1.wasNull()){
                    row1.amount_untaxed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.amount_tax = null;
							} else {
		                          
            row1.amount_tax = rs_tDBInput_1.getBigDecimal(27);
            if(rs_tDBInput_1.wasNull()){
                    row1.amount_tax = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.amount_total = null;
							} else {
		                          
            row1.amount_total = rs_tDBInput_1.getBigDecimal(28);
            if(rs_tDBInput_1.wasNull()){
                    row1.amount_total = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.currency_rate = null;
							} else {
		                          
            row1.currency_rate = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    row1.currency_rate = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.payment_term_id = null;
							} else {
		                          
            row1.payment_term_id = rs_tDBInput_1.getInt(30);
            if(rs_tDBInput_1.wasNull()){
                    row1.payment_term_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.fiscal_position_id = null;
							} else {
		                          
            row1.fiscal_position_id = rs_tDBInput_1.getInt(31);
            if(rs_tDBInput_1.wasNull()){
                    row1.fiscal_position_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.company_id = 0;
							} else {
		                          
            row1.company_id = rs_tDBInput_1.getInt(32);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.team_id = null;
							} else {
		                          
            row1.team_id = rs_tDBInput_1.getInt(33);
            if(rs_tDBInput_1.wasNull()){
                    row1.team_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.signed_by = null;
							} else {
	                         		
        	row1.signed_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.signed_on = null;
							} else {
										
			row1.signed_on = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 35);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.commitment_date = null;
							} else {
										
			row1.commitment_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 36);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.show_update_pricelist = null;
							} else {
	                         		
            row1.show_update_pricelist = rs_tDBInput_1.getBoolean(37);
            if(rs_tDBInput_1.wasNull()){
                    row1.show_update_pricelist = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.create_uid = null;
							} else {
		                          
            row1.create_uid = rs_tDBInput_1.getInt(38);
            if(rs_tDBInput_1.wasNull()){
                    row1.create_uid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.write_uid = null;
							} else {
		                          
            row1.write_uid = rs_tDBInput_1.getInt(39);
            if(rs_tDBInput_1.wasNull()){
                    row1.write_uid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.write_date = null;
							} else {
										
			row1.write_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 40);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.sale_order_template_id = null;
							} else {
		                          
            row1.sale_order_template_id = rs_tDBInput_1.getInt(41);
            if(rs_tDBInput_1.wasNull()){
                    row1.sale_order_template_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.incoterm = null;
							} else {
		                          
            row1.incoterm = rs_tDBInput_1.getInt(42);
            if(rs_tDBInput_1.wasNull()){
                    row1.incoterm = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.picking_policy = null;
							} else {
	                         		
        	row1.picking_policy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.warehouse_id = 0;
							} else {
		                          
            row1.warehouse_id = rs_tDBInput_1.getInt(44);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.procurement_group_id = null;
							} else {
		                          
            row1.procurement_group_id = rs_tDBInput_1.getInt(45);
            if(rs_tDBInput_1.wasNull()){
                    row1.procurement_group_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.effective_date = null;
							} else {
										
			row1.effective_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 46);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                        sb_tFileOutputDelimited_1.append(
                            row1.id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.campaign_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.campaign_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.source_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.source_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.medium_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.medium_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.message_main_attachment_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.message_main_attachment_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.access_token != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.access_token
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.client_order_ref != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.client_order_ref
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.reference != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.reference
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.state != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.date_order != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.date_order, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.validity_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.validity_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.require_signature != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.require_signature
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.require_payment != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.require_payment
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.create_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.user_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.user_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.partner_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.partner_invoice_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.partner_shipping_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.pricelist_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.currency_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.currency_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.analytic_account_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.analytic_account_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.invoice_status != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.invoice_status
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.note != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.note
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.amount_untaxed != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.amount_untaxed.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.amount_tax != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.amount_tax.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.amount_total != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.amount_total.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.currency_rate != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.currency_rate.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.payment_term_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.payment_term_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.fiscal_position_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.company_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.team_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.team_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.signed_by != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.signed_by
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.signed_on != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.signed_on, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.commitment_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.commitment_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.show_update_pricelist != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.show_update_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.create_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.write_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.write_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.sale_order_template_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.sale_order_template_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.incoterm != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.incoterm
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.picking_policy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.warehouse_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.procurement_group_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.procurement_group_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.effective_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.effective_date, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:H7jhe/sp+GMpSZBMk8VJ2pmL2uny9l84toBdBCSFaJH+HgzafjrdHFNuKEq788yPrO88+syJ7nLPaSuyNZgm9rQr5GA=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PS4OCUVYGK",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "saleOrder_20221031.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/raw_data.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/raw", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/raw", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/raw")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final saleOrder_DailyJob saleOrder_DailyJobClass = new saleOrder_DailyJob();

        int exitCode = saleOrder_DailyJobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = saleOrder_DailyJob.class.getClassLoader().getResourceAsStream("pacifico/saleorder_dailyjob_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = saleOrder_DailyJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : saleOrder_DailyJob");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     120150 characters generated by Talend Open Studio for Data Integration 
 *     on the October 31, 2022 at 10:58:28 PM CST
 ************************************************************************************************/