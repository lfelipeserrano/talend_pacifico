// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pacifico.posconfig_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: posConfig_Job Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class posConfig_Job implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "posConfig_Job";
	private final String projectName = "PACIFICO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				posConfig_Job.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(posConfig_Job.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PACIFICO_posConfig_Job = new byte[0];
    static byte[] commonByteArray_PACIFICO_posConfig_Job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public int picking_type_id;

				public int getPicking_type_id () {
					return this.picking_type_id;
				}
				
			    public Integer journal_id;

				public Integer getJournal_id () {
					return this.journal_id;
				}
				
			    public Integer invoice_journal_id;

				public Integer getInvoice_journal_id () {
					return this.invoice_journal_id;
				}
				
			    public Boolean iface_cashdrawer;

				public Boolean getIface_cashdrawer () {
					return this.iface_cashdrawer;
				}
				
			    public Boolean iface_electronic_scale;

				public Boolean getIface_electronic_scale () {
					return this.iface_electronic_scale;
				}
				
			    public Boolean iface_customer_facing_display_via_proxy;

				public Boolean getIface_customer_facing_display_via_proxy () {
					return this.iface_customer_facing_display_via_proxy;
				}
				
			    public Boolean iface_customer_facing_display_local;

				public Boolean getIface_customer_facing_display_local () {
					return this.iface_customer_facing_display_local;
				}
				
			    public Boolean iface_print_via_proxy;

				public Boolean getIface_print_via_proxy () {
					return this.iface_print_via_proxy;
				}
				
			    public Boolean iface_scan_via_proxy;

				public Boolean getIface_scan_via_proxy () {
					return this.iface_scan_via_proxy;
				}
				
			    public Boolean iface_big_scrollbars;

				public Boolean getIface_big_scrollbars () {
					return this.iface_big_scrollbars;
				}
				
			    public Boolean iface_orderline_customer_notes;

				public Boolean getIface_orderline_customer_notes () {
					return this.iface_orderline_customer_notes;
				}
				
			    public Boolean iface_print_auto;

				public Boolean getIface_print_auto () {
					return this.iface_print_auto;
				}
				
			    public Boolean iface_print_skip_screen;

				public Boolean getIface_print_skip_screen () {
					return this.iface_print_skip_screen;
				}
				
			    public String iface_tax_included;

				public String getIface_tax_included () {
					return this.iface_tax_included;
				}
				
			    public Integer iface_start_categ_id;

				public Integer getIface_start_categ_id () {
					return this.iface_start_categ_id;
				}
				
			    public Boolean iface_display_categ_images;

				public Boolean getIface_display_categ_images () {
					return this.iface_display_categ_images;
				}
				
			    public Boolean restrict_price_control;

				public Boolean getRestrict_price_control () {
					return this.restrict_price_control;
				}
				
			    public Boolean set_maximum_difference;

				public Boolean getSet_maximum_difference () {
					return this.set_maximum_difference;
				}
				
			    public String receipt_header;

				public String getReceipt_header () {
					return this.receipt_header;
				}
				
			    public String receipt_footer;

				public String getReceipt_footer () {
					return this.receipt_footer;
				}
				
			    public String proxy_ip;

				public String getProxy_ip () {
					return this.proxy_ip;
				}
				
			    public Boolean active;

				public Boolean getActive () {
					return this.active;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer sequence_id;

				public Integer getSequence_id () {
					return this.sequence_id;
				}
				
			    public Integer sequence_line_id;

				public Integer getSequence_line_id () {
					return this.sequence_line_id;
				}
				
			    public int pricelist_id;

				public int getPricelist_id () {
					return this.pricelist_id;
				}
				
			    public int company_id;

				public int getCompany_id () {
					return this.company_id;
				}
				
			    public int barcode_nomenclature_id;

				public int getBarcode_nomenclature_id () {
					return this.barcode_nomenclature_id;
				}
				
			    public Integer group_pos_manager_id;

				public Integer getGroup_pos_manager_id () {
					return this.group_pos_manager_id;
				}
				
			    public Integer group_pos_user_id;

				public Integer getGroup_pos_user_id () {
					return this.group_pos_user_id;
				}
				
			    public Boolean iface_tipproduct;

				public Boolean getIface_tipproduct () {
					return this.iface_tipproduct;
				}
				
			    public Integer tip_product_id;

				public Integer getTip_product_id () {
					return this.tip_product_id;
				}
				
			    public Integer default_fiscal_position_id;

				public Integer getDefault_fiscal_position_id () {
					return this.default_fiscal_position_id;
				}
				
			    public Boolean use_pricelist;

				public Boolean getUse_pricelist () {
					return this.use_pricelist;
				}
				
			    public Boolean tax_regime;

				public Boolean getTax_regime () {
					return this.tax_regime;
				}
				
			    public Boolean tax_regime_selection;

				public Boolean getTax_regime_selection () {
					return this.tax_regime_selection;
				}
				
			    public Boolean start_category;

				public Boolean getStart_category () {
					return this.start_category;
				}
				
			    public Boolean limit_categories;

				public Boolean getLimit_categories () {
					return this.limit_categories;
				}
				
			    public Boolean module_account;

				public Boolean getModule_account () {
					return this.module_account;
				}
				
			    public Boolean module_pos_restaurant;

				public Boolean getModule_pos_restaurant () {
					return this.module_pos_restaurant;
				}
				
			    public Boolean module_pos_discount;

				public Boolean getModule_pos_discount () {
					return this.module_pos_discount;
				}
				
			    public Boolean module_pos_loyalty;

				public Boolean getModule_pos_loyalty () {
					return this.module_pos_loyalty;
				}
				
			    public Boolean module_pos_mercury;

				public Boolean getModule_pos_mercury () {
					return this.module_pos_mercury;
				}
				
			    public Boolean product_configurator;

				public Boolean getProduct_configurator () {
					return this.product_configurator;
				}
				
			    public Boolean is_posbox;

				public Boolean getIs_posbox () {
					return this.is_posbox;
				}
				
			    public Boolean is_header_or_footer;

				public Boolean getIs_header_or_footer () {
					return this.is_header_or_footer;
				}
				
			    public Boolean module_pos_hr;

				public Boolean getModule_pos_hr () {
					return this.module_pos_hr;
				}
				
			    public Double amount_authorized_diff;

				public Double getAmount_authorized_diff () {
					return this.amount_authorized_diff;
				}
				
			    public Boolean other_devices;

				public Boolean getOther_devices () {
					return this.other_devices;
				}
				
			    public Integer rounding_method;

				public Integer getRounding_method () {
					return this.rounding_method;
				}
				
			    public Boolean cash_rounding;

				public Boolean getCash_rounding () {
					return this.cash_rounding;
				}
				
			    public Boolean only_round_cash_method;

				public Boolean getOnly_round_cash_method () {
					return this.only_round_cash_method;
				}
				
			    public Boolean manual_discount;

				public Boolean getManual_discount () {
					return this.manual_discount;
				}
				
			    public Boolean ship_later;

				public Boolean getShip_later () {
					return this.ship_later;
				}
				
			    public Integer warehouse_id;

				public Integer getWarehouse_id () {
					return this.warehouse_id;
				}
				
			    public Integer route_id;

				public Integer getRoute_id () {
					return this.route_id;
				}
				
			    public String picking_policy;

				public String getPicking_policy () {
					return this.picking_policy;
				}
				
			    public Boolean limited_products_loading;

				public Boolean getLimited_products_loading () {
					return this.limited_products_loading;
				}
				
			    public Integer limited_products_amount;

				public Integer getLimited_products_amount () {
					return this.limited_products_amount;
				}
				
			    public Boolean product_load_background;

				public Boolean getProduct_load_background () {
					return this.product_load_background;
				}
				
			    public Boolean limited_partners_loading;

				public Boolean getLimited_partners_loading () {
					return this.limited_partners_loading;
				}
				
			    public Integer limited_partners_amount;

				public Integer getLimited_partners_amount () {
					return this.limited_partners_amount;
				}
				
			    public Boolean partner_load_background;

				public Boolean getPartner_load_background () {
					return this.partner_load_background;
				}
				
			    public Integer create_uid;

				public Integer getCreate_uid () {
					return this.create_uid;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public Integer write_uid;

				public Integer getWrite_uid () {
					return this.write_uid;
				}
				
			    public java.util.Date write_date;

				public java.util.Date getWrite_date () {
					return this.write_date;
				}
				
			    public String epson_printer_ip;

				public String getEpson_printer_ip () {
					return this.epson_printer_ip;
				}
				
			    public Integer crm_team_id;

				public Integer getCrm_team_id () {
					return this.crm_team_id;
				}
				
			    public Integer down_payment_product_id;

				public Integer getDown_payment_product_id () {
					return this.down_payment_product_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.picking_type_id = this.picking_type_id;
	            other.journal_id = this.journal_id;
	            other.invoice_journal_id = this.invoice_journal_id;
	            other.iface_cashdrawer = this.iface_cashdrawer;
	            other.iface_electronic_scale = this.iface_electronic_scale;
	            other.iface_customer_facing_display_via_proxy = this.iface_customer_facing_display_via_proxy;
	            other.iface_customer_facing_display_local = this.iface_customer_facing_display_local;
	            other.iface_print_via_proxy = this.iface_print_via_proxy;
	            other.iface_scan_via_proxy = this.iface_scan_via_proxy;
	            other.iface_big_scrollbars = this.iface_big_scrollbars;
	            other.iface_orderline_customer_notes = this.iface_orderline_customer_notes;
	            other.iface_print_auto = this.iface_print_auto;
	            other.iface_print_skip_screen = this.iface_print_skip_screen;
	            other.iface_tax_included = this.iface_tax_included;
	            other.iface_start_categ_id = this.iface_start_categ_id;
	            other.iface_display_categ_images = this.iface_display_categ_images;
	            other.restrict_price_control = this.restrict_price_control;
	            other.set_maximum_difference = this.set_maximum_difference;
	            other.receipt_header = this.receipt_header;
	            other.receipt_footer = this.receipt_footer;
	            other.proxy_ip = this.proxy_ip;
	            other.active = this.active;
	            other.uuid = this.uuid;
	            other.sequence_id = this.sequence_id;
	            other.sequence_line_id = this.sequence_line_id;
	            other.pricelist_id = this.pricelist_id;
	            other.company_id = this.company_id;
	            other.barcode_nomenclature_id = this.barcode_nomenclature_id;
	            other.group_pos_manager_id = this.group_pos_manager_id;
	            other.group_pos_user_id = this.group_pos_user_id;
	            other.iface_tipproduct = this.iface_tipproduct;
	            other.tip_product_id = this.tip_product_id;
	            other.default_fiscal_position_id = this.default_fiscal_position_id;
	            other.use_pricelist = this.use_pricelist;
	            other.tax_regime = this.tax_regime;
	            other.tax_regime_selection = this.tax_regime_selection;
	            other.start_category = this.start_category;
	            other.limit_categories = this.limit_categories;
	            other.module_account = this.module_account;
	            other.module_pos_restaurant = this.module_pos_restaurant;
	            other.module_pos_discount = this.module_pos_discount;
	            other.module_pos_loyalty = this.module_pos_loyalty;
	            other.module_pos_mercury = this.module_pos_mercury;
	            other.product_configurator = this.product_configurator;
	            other.is_posbox = this.is_posbox;
	            other.is_header_or_footer = this.is_header_or_footer;
	            other.module_pos_hr = this.module_pos_hr;
	            other.amount_authorized_diff = this.amount_authorized_diff;
	            other.other_devices = this.other_devices;
	            other.rounding_method = this.rounding_method;
	            other.cash_rounding = this.cash_rounding;
	            other.only_round_cash_method = this.only_round_cash_method;
	            other.manual_discount = this.manual_discount;
	            other.ship_later = this.ship_later;
	            other.warehouse_id = this.warehouse_id;
	            other.route_id = this.route_id;
	            other.picking_policy = this.picking_policy;
	            other.limited_products_loading = this.limited_products_loading;
	            other.limited_products_amount = this.limited_products_amount;
	            other.product_load_background = this.product_load_background;
	            other.limited_partners_loading = this.limited_partners_loading;
	            other.limited_partners_amount = this.limited_partners_amount;
	            other.partner_load_background = this.partner_load_background;
	            other.create_uid = this.create_uid;
	            other.create_date = this.create_date;
	            other.write_uid = this.write_uid;
	            other.write_date = this.write_date;
	            other.epson_printer_ip = this.epson_printer_ip;
	            other.crm_team_id = this.crm_team_id;
	            other.down_payment_product_id = this.down_payment_product_id;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_posConfig_Job.length) {
				if(length < 1024 && commonByteArray_PACIFICO_posConfig_Job.length == 0) {
   					commonByteArray_PACIFICO_posConfig_Job = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_posConfig_Job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PACIFICO_posConfig_Job, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_posConfig_Job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PACIFICO_posConfig_Job.length) {
				if(length < 1024 && commonByteArray_PACIFICO_posConfig_Job.length == 0) {
   					commonByteArray_PACIFICO_posConfig_Job = new byte[1024];
				} else {
   					commonByteArray_PACIFICO_posConfig_Job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PACIFICO_posConfig_Job, 0, length);
			strReturn = new String(commonByteArray_PACIFICO_posConfig_Job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PACIFICO_posConfig_Job) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.name = readString(dis);
					
			        this.picking_type_id = dis.readInt();
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_cashdrawer = null;
           				} else {
           			    	this.iface_cashdrawer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_electronic_scale = null;
           				} else {
           			    	this.iface_electronic_scale = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_customer_facing_display_via_proxy = null;
           				} else {
           			    	this.iface_customer_facing_display_via_proxy = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_customer_facing_display_local = null;
           				} else {
           			    	this.iface_customer_facing_display_local = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_via_proxy = null;
           				} else {
           			    	this.iface_print_via_proxy = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_scan_via_proxy = null;
           				} else {
           			    	this.iface_scan_via_proxy = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_big_scrollbars = null;
           				} else {
           			    	this.iface_big_scrollbars = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_orderline_customer_notes = null;
           				} else {
           			    	this.iface_orderline_customer_notes = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
						this.iface_start_categ_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_display_categ_images = null;
           				} else {
           			    	this.iface_display_categ_images = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.restrict_price_control = null;
           				} else {
           			    	this.restrict_price_control = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.set_maximum_difference = null;
           				} else {
           			    	this.set_maximum_difference = dis.readBoolean();
           				}
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
			        this.pricelist_id = dis.readInt();
					
			        this.company_id = dis.readInt();
					
			        this.barcode_nomenclature_id = dis.readInt();
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_tipproduct = null;
           				} else {
           			    	this.iface_tipproduct = dis.readBoolean();
           				}
					
						this.tip_product_id = readInteger(dis);
					
						this.default_fiscal_position_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.use_pricelist = null;
           				} else {
           			    	this.use_pricelist = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tax_regime = null;
           				} else {
           			    	this.tax_regime = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tax_regime_selection = null;
           				} else {
           			    	this.tax_regime_selection = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.limit_categories = null;
           				} else {
           			    	this.limit_categories = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_restaurant = null;
           				} else {
           			    	this.module_pos_restaurant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_discount = null;
           				} else {
           			    	this.module_pos_discount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_loyalty = null;
           				} else {
           			    	this.module_pos_loyalty = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_mercury = null;
           				} else {
           			    	this.module_pos_mercury = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_configurator = null;
           				} else {
           			    	this.product_configurator = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_posbox = null;
           				} else {
           			    	this.is_posbox = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_header_or_footer = null;
           				} else {
           			    	this.is_header_or_footer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_hr = null;
           				} else {
           			    	this.module_pos_hr = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount_authorized_diff = null;
           				} else {
           			    	this.amount_authorized_diff = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.other_devices = null;
           				} else {
           			    	this.other_devices = dis.readBoolean();
           				}
					
						this.rounding_method = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cash_rounding = null;
           				} else {
           			    	this.cash_rounding = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.only_round_cash_method = null;
           				} else {
           			    	this.only_round_cash_method = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ship_later = null;
           				} else {
           			    	this.ship_later = dis.readBoolean();
           				}
					
						this.warehouse_id = readInteger(dis);
					
						this.route_id = readInteger(dis);
					
					this.picking_policy = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.limited_products_loading = null;
           				} else {
           			    	this.limited_products_loading = dis.readBoolean();
           				}
					
						this.limited_products_amount = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_load_background = null;
           				} else {
           			    	this.product_load_background = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.limited_partners_loading = null;
           				} else {
           			    	this.limited_partners_loading = dis.readBoolean();
           				}
					
						this.limited_partners_amount = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.partner_load_background = null;
           				} else {
           			    	this.partner_load_background = dis.readBoolean();
           				}
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
						this.crm_team_id = readInteger(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PACIFICO_posConfig_Job) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.name = readString(dis);
					
			        this.picking_type_id = dis.readInt();
					
						this.journal_id = readInteger(dis);
					
						this.invoice_journal_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_cashdrawer = null;
           				} else {
           			    	this.iface_cashdrawer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_electronic_scale = null;
           				} else {
           			    	this.iface_electronic_scale = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_customer_facing_display_via_proxy = null;
           				} else {
           			    	this.iface_customer_facing_display_via_proxy = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_customer_facing_display_local = null;
           				} else {
           			    	this.iface_customer_facing_display_local = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_via_proxy = null;
           				} else {
           			    	this.iface_print_via_proxy = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_scan_via_proxy = null;
           				} else {
           			    	this.iface_scan_via_proxy = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_big_scrollbars = null;
           				} else {
           			    	this.iface_big_scrollbars = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_orderline_customer_notes = null;
           				} else {
           			    	this.iface_orderline_customer_notes = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_auto = null;
           				} else {
           			    	this.iface_print_auto = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_print_skip_screen = null;
           				} else {
           			    	this.iface_print_skip_screen = dis.readBoolean();
           				}
					
					this.iface_tax_included = readString(dis);
					
						this.iface_start_categ_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_display_categ_images = null;
           				} else {
           			    	this.iface_display_categ_images = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.restrict_price_control = null;
           				} else {
           			    	this.restrict_price_control = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.set_maximum_difference = null;
           				} else {
           			    	this.set_maximum_difference = dis.readBoolean();
           				}
					
					this.receipt_header = readString(dis);
					
					this.receipt_footer = readString(dis);
					
					this.proxy_ip = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.active = null;
           				} else {
           			    	this.active = dis.readBoolean();
           				}
					
					this.uuid = readString(dis);
					
						this.sequence_id = readInteger(dis);
					
						this.sequence_line_id = readInteger(dis);
					
			        this.pricelist_id = dis.readInt();
					
			        this.company_id = dis.readInt();
					
			        this.barcode_nomenclature_id = dis.readInt();
					
						this.group_pos_manager_id = readInteger(dis);
					
						this.group_pos_user_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iface_tipproduct = null;
           				} else {
           			    	this.iface_tipproduct = dis.readBoolean();
           				}
					
						this.tip_product_id = readInteger(dis);
					
						this.default_fiscal_position_id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.use_pricelist = null;
           				} else {
           			    	this.use_pricelist = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tax_regime = null;
           				} else {
           			    	this.tax_regime = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tax_regime_selection = null;
           				} else {
           			    	this.tax_regime_selection = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.start_category = null;
           				} else {
           			    	this.start_category = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.limit_categories = null;
           				} else {
           			    	this.limit_categories = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_account = null;
           				} else {
           			    	this.module_account = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_restaurant = null;
           				} else {
           			    	this.module_pos_restaurant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_discount = null;
           				} else {
           			    	this.module_pos_discount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_loyalty = null;
           				} else {
           			    	this.module_pos_loyalty = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_mercury = null;
           				} else {
           			    	this.module_pos_mercury = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_configurator = null;
           				} else {
           			    	this.product_configurator = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_posbox = null;
           				} else {
           			    	this.is_posbox = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_header_or_footer = null;
           				} else {
           			    	this.is_header_or_footer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.module_pos_hr = null;
           				} else {
           			    	this.module_pos_hr = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount_authorized_diff = null;
           				} else {
           			    	this.amount_authorized_diff = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.other_devices = null;
           				} else {
           			    	this.other_devices = dis.readBoolean();
           				}
					
						this.rounding_method = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cash_rounding = null;
           				} else {
           			    	this.cash_rounding = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.only_round_cash_method = null;
           				} else {
           			    	this.only_round_cash_method = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.manual_discount = null;
           				} else {
           			    	this.manual_discount = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ship_later = null;
           				} else {
           			    	this.ship_later = dis.readBoolean();
           				}
					
						this.warehouse_id = readInteger(dis);
					
						this.route_id = readInteger(dis);
					
					this.picking_policy = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.limited_products_loading = null;
           				} else {
           			    	this.limited_products_loading = dis.readBoolean();
           				}
					
						this.limited_products_amount = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_load_background = null;
           				} else {
           			    	this.product_load_background = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.limited_partners_loading = null;
           				} else {
           			    	this.limited_partners_loading = dis.readBoolean();
           				}
					
						this.limited_partners_amount = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.partner_load_background = null;
           				} else {
           			    	this.partner_load_background = dis.readBoolean();
           				}
					
						this.create_uid = readInteger(dis);
					
					this.create_date = readDate(dis);
					
						this.write_uid = readInteger(dis);
					
					this.write_date = readDate(dis);
					
					this.epson_printer_ip = readString(dis);
					
						this.crm_team_id = readInteger(dis);
					
						this.down_payment_product_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// int
				
		            	dos.writeInt(this.picking_type_id);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// Boolean
				
						if(this.iface_cashdrawer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_cashdrawer);
		            	}
					
					// Boolean
				
						if(this.iface_electronic_scale == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_electronic_scale);
		            	}
					
					// Boolean
				
						if(this.iface_customer_facing_display_via_proxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_customer_facing_display_via_proxy);
		            	}
					
					// Boolean
				
						if(this.iface_customer_facing_display_local == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_customer_facing_display_local);
		            	}
					
					// Boolean
				
						if(this.iface_print_via_proxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_via_proxy);
		            	}
					
					// Boolean
				
						if(this.iface_scan_via_proxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_scan_via_proxy);
		            	}
					
					// Boolean
				
						if(this.iface_big_scrollbars == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_big_scrollbars);
		            	}
					
					// Boolean
				
						if(this.iface_orderline_customer_notes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_orderline_customer_notes);
		            	}
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// Integer
				
						writeInteger(this.iface_start_categ_id,dos);
					
					// Boolean
				
						if(this.iface_display_categ_images == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_display_categ_images);
		            	}
					
					// Boolean
				
						if(this.restrict_price_control == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.restrict_price_control);
		            	}
					
					// Boolean
				
						if(this.set_maximum_difference == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.set_maximum_difference);
		            	}
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// int
				
		            	dos.writeInt(this.pricelist_id);
					
					// int
				
		            	dos.writeInt(this.company_id);
					
					// int
				
		            	dos.writeInt(this.barcode_nomenclature_id);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// Boolean
				
						if(this.iface_tipproduct == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_tipproduct);
		            	}
					
					// Integer
				
						writeInteger(this.tip_product_id,dos);
					
					// Integer
				
						writeInteger(this.default_fiscal_position_id,dos);
					
					// Boolean
				
						if(this.use_pricelist == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.use_pricelist);
		            	}
					
					// Boolean
				
						if(this.tax_regime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.tax_regime);
		            	}
					
					// Boolean
				
						if(this.tax_regime_selection == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.tax_regime_selection);
		            	}
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// Boolean
				
						if(this.limit_categories == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.limit_categories);
		            	}
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// Boolean
				
						if(this.module_pos_restaurant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_restaurant);
		            	}
					
					// Boolean
				
						if(this.module_pos_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_discount);
		            	}
					
					// Boolean
				
						if(this.module_pos_loyalty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_loyalty);
		            	}
					
					// Boolean
				
						if(this.module_pos_mercury == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_mercury);
		            	}
					
					// Boolean
				
						if(this.product_configurator == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.product_configurator);
		            	}
					
					// Boolean
				
						if(this.is_posbox == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_posbox);
		            	}
					
					// Boolean
				
						if(this.is_header_or_footer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_header_or_footer);
		            	}
					
					// Boolean
				
						if(this.module_pos_hr == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_hr);
		            	}
					
					// Double
				
						if(this.amount_authorized_diff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.amount_authorized_diff);
		            	}
					
					// Boolean
				
						if(this.other_devices == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.other_devices);
		            	}
					
					// Integer
				
						writeInteger(this.rounding_method,dos);
					
					// Boolean
				
						if(this.cash_rounding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.cash_rounding);
		            	}
					
					// Boolean
				
						if(this.only_round_cash_method == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.only_round_cash_method);
		            	}
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// Boolean
				
						if(this.ship_later == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ship_later);
		            	}
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// Integer
				
						writeInteger(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Boolean
				
						if(this.limited_products_loading == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.limited_products_loading);
		            	}
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// Boolean
				
						if(this.product_load_background == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.product_load_background);
		            	}
					
					// Boolean
				
						if(this.limited_partners_loading == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.limited_partners_loading);
		            	}
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// Boolean
				
						if(this.partner_load_background == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.partner_load_background);
		            	}
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// Integer
				
						writeInteger(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// int
				
		            	dos.writeInt(this.picking_type_id);
					
					// Integer
				
						writeInteger(this.journal_id,dos);
					
					// Integer
				
						writeInteger(this.invoice_journal_id,dos);
					
					// Boolean
				
						if(this.iface_cashdrawer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_cashdrawer);
		            	}
					
					// Boolean
				
						if(this.iface_electronic_scale == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_electronic_scale);
		            	}
					
					// Boolean
				
						if(this.iface_customer_facing_display_via_proxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_customer_facing_display_via_proxy);
		            	}
					
					// Boolean
				
						if(this.iface_customer_facing_display_local == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_customer_facing_display_local);
		            	}
					
					// Boolean
				
						if(this.iface_print_via_proxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_via_proxy);
		            	}
					
					// Boolean
				
						if(this.iface_scan_via_proxy == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_scan_via_proxy);
		            	}
					
					// Boolean
				
						if(this.iface_big_scrollbars == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_big_scrollbars);
		            	}
					
					// Boolean
				
						if(this.iface_orderline_customer_notes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_orderline_customer_notes);
		            	}
					
					// Boolean
				
						if(this.iface_print_auto == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_auto);
		            	}
					
					// Boolean
				
						if(this.iface_print_skip_screen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_print_skip_screen);
		            	}
					
					// String
				
						writeString(this.iface_tax_included,dos);
					
					// Integer
				
						writeInteger(this.iface_start_categ_id,dos);
					
					// Boolean
				
						if(this.iface_display_categ_images == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_display_categ_images);
		            	}
					
					// Boolean
				
						if(this.restrict_price_control == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.restrict_price_control);
		            	}
					
					// Boolean
				
						if(this.set_maximum_difference == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.set_maximum_difference);
		            	}
					
					// String
				
						writeString(this.receipt_header,dos);
					
					// String
				
						writeString(this.receipt_footer,dos);
					
					// String
				
						writeString(this.proxy_ip,dos);
					
					// Boolean
				
						if(this.active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.active);
		            	}
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.sequence_id,dos);
					
					// Integer
				
						writeInteger(this.sequence_line_id,dos);
					
					// int
				
		            	dos.writeInt(this.pricelist_id);
					
					// int
				
		            	dos.writeInt(this.company_id);
					
					// int
				
		            	dos.writeInt(this.barcode_nomenclature_id);
					
					// Integer
				
						writeInteger(this.group_pos_manager_id,dos);
					
					// Integer
				
						writeInteger(this.group_pos_user_id,dos);
					
					// Boolean
				
						if(this.iface_tipproduct == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iface_tipproduct);
		            	}
					
					// Integer
				
						writeInteger(this.tip_product_id,dos);
					
					// Integer
				
						writeInteger(this.default_fiscal_position_id,dos);
					
					// Boolean
				
						if(this.use_pricelist == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.use_pricelist);
		            	}
					
					// Boolean
				
						if(this.tax_regime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.tax_regime);
		            	}
					
					// Boolean
				
						if(this.tax_regime_selection == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.tax_regime_selection);
		            	}
					
					// Boolean
				
						if(this.start_category == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.start_category);
		            	}
					
					// Boolean
				
						if(this.limit_categories == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.limit_categories);
		            	}
					
					// Boolean
				
						if(this.module_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_account);
		            	}
					
					// Boolean
				
						if(this.module_pos_restaurant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_restaurant);
		            	}
					
					// Boolean
				
						if(this.module_pos_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_discount);
		            	}
					
					// Boolean
				
						if(this.module_pos_loyalty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_loyalty);
		            	}
					
					// Boolean
				
						if(this.module_pos_mercury == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_mercury);
		            	}
					
					// Boolean
				
						if(this.product_configurator == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.product_configurator);
		            	}
					
					// Boolean
				
						if(this.is_posbox == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_posbox);
		            	}
					
					// Boolean
				
						if(this.is_header_or_footer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_header_or_footer);
		            	}
					
					// Boolean
				
						if(this.module_pos_hr == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.module_pos_hr);
		            	}
					
					// Double
				
						if(this.amount_authorized_diff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.amount_authorized_diff);
		            	}
					
					// Boolean
				
						if(this.other_devices == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.other_devices);
		            	}
					
					// Integer
				
						writeInteger(this.rounding_method,dos);
					
					// Boolean
				
						if(this.cash_rounding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.cash_rounding);
		            	}
					
					// Boolean
				
						if(this.only_round_cash_method == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.only_round_cash_method);
		            	}
					
					// Boolean
				
						if(this.manual_discount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.manual_discount);
		            	}
					
					// Boolean
				
						if(this.ship_later == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ship_later);
		            	}
					
					// Integer
				
						writeInteger(this.warehouse_id,dos);
					
					// Integer
				
						writeInteger(this.route_id,dos);
					
					// String
				
						writeString(this.picking_policy,dos);
					
					// Boolean
				
						if(this.limited_products_loading == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.limited_products_loading);
		            	}
					
					// Integer
				
						writeInteger(this.limited_products_amount,dos);
					
					// Boolean
				
						if(this.product_load_background == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.product_load_background);
		            	}
					
					// Boolean
				
						if(this.limited_partners_loading == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.limited_partners_loading);
		            	}
					
					// Integer
				
						writeInteger(this.limited_partners_amount,dos);
					
					// Boolean
				
						if(this.partner_load_background == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.partner_load_background);
		            	}
					
					// Integer
				
						writeInteger(this.create_uid,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// Integer
				
						writeInteger(this.write_uid,dos);
					
					// java.util.Date
				
						writeDate(this.write_date,dos);
					
					// String
				
						writeString(this.epson_printer_ip,dos);
					
					// Integer
				
						writeInteger(this.crm_team_id,dos);
					
					// Integer
				
						writeInteger(this.down_payment_product_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",picking_type_id="+String.valueOf(picking_type_id));
		sb.append(",journal_id="+String.valueOf(journal_id));
		sb.append(",invoice_journal_id="+String.valueOf(invoice_journal_id));
		sb.append(",iface_cashdrawer="+String.valueOf(iface_cashdrawer));
		sb.append(",iface_electronic_scale="+String.valueOf(iface_electronic_scale));
		sb.append(",iface_customer_facing_display_via_proxy="+String.valueOf(iface_customer_facing_display_via_proxy));
		sb.append(",iface_customer_facing_display_local="+String.valueOf(iface_customer_facing_display_local));
		sb.append(",iface_print_via_proxy="+String.valueOf(iface_print_via_proxy));
		sb.append(",iface_scan_via_proxy="+String.valueOf(iface_scan_via_proxy));
		sb.append(",iface_big_scrollbars="+String.valueOf(iface_big_scrollbars));
		sb.append(",iface_orderline_customer_notes="+String.valueOf(iface_orderline_customer_notes));
		sb.append(",iface_print_auto="+String.valueOf(iface_print_auto));
		sb.append(",iface_print_skip_screen="+String.valueOf(iface_print_skip_screen));
		sb.append(",iface_tax_included="+iface_tax_included);
		sb.append(",iface_start_categ_id="+String.valueOf(iface_start_categ_id));
		sb.append(",iface_display_categ_images="+String.valueOf(iface_display_categ_images));
		sb.append(",restrict_price_control="+String.valueOf(restrict_price_control));
		sb.append(",set_maximum_difference="+String.valueOf(set_maximum_difference));
		sb.append(",receipt_header="+receipt_header);
		sb.append(",receipt_footer="+receipt_footer);
		sb.append(",proxy_ip="+proxy_ip);
		sb.append(",active="+String.valueOf(active));
		sb.append(",uuid="+uuid);
		sb.append(",sequence_id="+String.valueOf(sequence_id));
		sb.append(",sequence_line_id="+String.valueOf(sequence_line_id));
		sb.append(",pricelist_id="+String.valueOf(pricelist_id));
		sb.append(",company_id="+String.valueOf(company_id));
		sb.append(",barcode_nomenclature_id="+String.valueOf(barcode_nomenclature_id));
		sb.append(",group_pos_manager_id="+String.valueOf(group_pos_manager_id));
		sb.append(",group_pos_user_id="+String.valueOf(group_pos_user_id));
		sb.append(",iface_tipproduct="+String.valueOf(iface_tipproduct));
		sb.append(",tip_product_id="+String.valueOf(tip_product_id));
		sb.append(",default_fiscal_position_id="+String.valueOf(default_fiscal_position_id));
		sb.append(",use_pricelist="+String.valueOf(use_pricelist));
		sb.append(",tax_regime="+String.valueOf(tax_regime));
		sb.append(",tax_regime_selection="+String.valueOf(tax_regime_selection));
		sb.append(",start_category="+String.valueOf(start_category));
		sb.append(",limit_categories="+String.valueOf(limit_categories));
		sb.append(",module_account="+String.valueOf(module_account));
		sb.append(",module_pos_restaurant="+String.valueOf(module_pos_restaurant));
		sb.append(",module_pos_discount="+String.valueOf(module_pos_discount));
		sb.append(",module_pos_loyalty="+String.valueOf(module_pos_loyalty));
		sb.append(",module_pos_mercury="+String.valueOf(module_pos_mercury));
		sb.append(",product_configurator="+String.valueOf(product_configurator));
		sb.append(",is_posbox="+String.valueOf(is_posbox));
		sb.append(",is_header_or_footer="+String.valueOf(is_header_or_footer));
		sb.append(",module_pos_hr="+String.valueOf(module_pos_hr));
		sb.append(",amount_authorized_diff="+String.valueOf(amount_authorized_diff));
		sb.append(",other_devices="+String.valueOf(other_devices));
		sb.append(",rounding_method="+String.valueOf(rounding_method));
		sb.append(",cash_rounding="+String.valueOf(cash_rounding));
		sb.append(",only_round_cash_method="+String.valueOf(only_round_cash_method));
		sb.append(",manual_discount="+String.valueOf(manual_discount));
		sb.append(",ship_later="+String.valueOf(ship_later));
		sb.append(",warehouse_id="+String.valueOf(warehouse_id));
		sb.append(",route_id="+String.valueOf(route_id));
		sb.append(",picking_policy="+picking_policy);
		sb.append(",limited_products_loading="+String.valueOf(limited_products_loading));
		sb.append(",limited_products_amount="+String.valueOf(limited_products_amount));
		sb.append(",product_load_background="+String.valueOf(product_load_background));
		sb.append(",limited_partners_loading="+String.valueOf(limited_partners_loading));
		sb.append(",limited_partners_amount="+String.valueOf(limited_partners_amount));
		sb.append(",partner_load_background="+String.valueOf(partner_load_background));
		sb.append(",create_uid="+String.valueOf(create_uid));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",write_uid="+String.valueOf(write_uid));
		sb.append(",write_date="+String.valueOf(write_date));
		sb.append(",epson_printer_ip="+epson_printer_ip);
		sb.append(",crm_team_id="+String.valueOf(crm_team_id));
		sb.append(",down_payment_product_id="+String.valueOf(down_payment_product_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posConfig_20221026.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("name");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("picking_type_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("journal_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("invoice_journal_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_cashdrawer");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_electronic_scale");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_customer_facing_display_via_proxy");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_customer_facing_display_local");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_print_via_proxy");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_scan_via_proxy");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_big_scrollbars");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_orderline_customer_notes");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_print_auto");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_print_skip_screen");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_tax_included");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_start_categ_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_display_categ_images");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("restrict_price_control");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("set_maximum_difference");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("receipt_header");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("receipt_footer");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("proxy_ip");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("active");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("uuid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("sequence_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("sequence_line_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pricelist_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("company_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("barcode_nomenclature_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("group_pos_manager_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("group_pos_user_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("iface_tipproduct");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("tip_product_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("default_fiscal_position_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("use_pricelist");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("tax_regime");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("tax_regime_selection");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("start_category");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("limit_categories");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("module_account");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("module_pos_restaurant");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("module_pos_discount");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("module_pos_loyalty");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("module_pos_mercury");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("product_configurator");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("is_posbox");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("is_header_or_footer");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("module_pos_hr");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("amount_authorized_diff");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("other_devices");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("rounding_method");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("cash_rounding");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("only_round_cash_method");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("manual_discount");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ship_later");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("warehouse_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("route_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("picking_policy");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("limited_products_loading");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("limited_products_amount");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("product_load_background");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("limited_partners_loading");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("limited_partners_amount");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("partner_load_background");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("create_uid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("create_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("write_uid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("write_date");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("epson_printer_ip");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("crm_team_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("down_payment_product_id");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "openpg";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:q3+9rAFipHC9AsTdpDDQ8a8760l4Qbq9djhv3xX8YyCQffFU/A==");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "pacifico";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \"pos_config\".\"id\", \n  \"pos_config\".\"name\", \n  \"pos_config\".\"picking_type_id\", \n  \"pos_config\"."
+"\"journal_id\", \n  \"pos_config\".\"invoice_journal_id\", \n  \"pos_config\".\"iface_cashdrawer\", \n  \"pos_config\".\"if"
+"ace_electronic_scale\", \n  \"pos_config\".\"iface_customer_facing_display_via_proxy\", \n  \"pos_config\".\"iface_custome"
+"r_facing_display_local\", \n  \"pos_config\".\"iface_print_via_proxy\", \n  \"pos_config\".\"iface_scan_via_proxy\", \n  \""
+"pos_config\".\"iface_big_scrollbars\", \n  \"pos_config\".\"iface_orderline_customer_notes\", \n  \"pos_config\".\"iface_p"
+"rint_auto\", \n  \"pos_config\".\"iface_print_skip_screen\", \n  \"pos_config\".\"iface_tax_included\", \n  \"pos_config\"."
+"\"iface_start_categ_id\", \n  \"pos_config\".\"iface_display_categ_images\", \n  \"pos_config\".\"restrict_price_control\""
+", \n  \"pos_config\".\"set_maximum_difference\", \n  \"pos_config\".\"receipt_header\", \n  \"pos_config\".\"receipt_footer"
+"\", \n  \"pos_config\".\"proxy_ip\", \n  \"pos_config\".\"active\", \n  \"pos_config\".\"uuid\", \n  \"pos_config\".\"sequen"
+"ce_id\", \n  \"pos_config\".\"sequence_line_id\", \n  \"pos_config\".\"pricelist_id\", \n  \"pos_config\".\"company_id\", \n"
+"  \"pos_config\".\"barcode_nomenclature_id\", \n  \"pos_config\".\"group_pos_manager_id\", \n  \"pos_config\".\"group_pos_"
+"user_id\", \n  \"pos_config\".\"iface_tipproduct\", \n  \"pos_config\".\"tip_product_id\", \n  \"pos_config\".\"default_fis"
+"cal_position_id\", \n  \"pos_config\".\"use_pricelist\", \n  \"pos_config\".\"tax_regime\", \n  \"pos_config\".\"tax_regime"
+"_selection\", \n  \"pos_config\".\"start_category\", \n  \"pos_config\".\"limit_categories\", \n  \"pos_config\".\"module_a"
+"ccount\", \n  \"pos_config\".\"module_pos_restaurant\", \n  \"pos_config\".\"module_pos_discount\", \n  \"pos_config\".\"mo"
+"dule_pos_loyalty\", \n  \"pos_config\".\"module_pos_mercury\", \n  \"pos_config\".\"product_configurator\", \n  \"pos_confi"
+"g\".\"is_posbox\", \n  \"pos_config\".\"is_header_or_footer\", \n  \"pos_config\".\"module_pos_hr\", \n  \"pos_config\".\"a"
+"mount_authorized_diff\", \n  \"pos_config\".\"other_devices\", \n  \"pos_config\".\"rounding_method\", \n  \"pos_config\"."
+"\"cash_rounding\", \n  \"pos_config\".\"only_round_cash_method\", \n  \"pos_config\".\"manual_discount\", \n  \"pos_config"
+"\".\"ship_later\", \n  \"pos_config\".\"warehouse_id\", \n  \"pos_config\".\"route_id\", \n  \"pos_config\".\"picking_polic"
+"y\", \n  \"pos_config\".\"limited_products_loading\", \n  \"pos_config\".\"limited_products_amount\", \n  \"pos_config\".\""
+"product_load_background\", \n  \"pos_config\".\"limited_partners_loading\", \n  \"pos_config\".\"limited_partners_amount\""
+", \n  \"pos_config\".\"partner_load_background\", \n  \"pos_config\".\"create_uid\", \n  \"pos_config\".\"create_date\", \n "
+" \"pos_config\".\"write_uid\", \n  \"pos_config\".\"write_date\", \n  \"pos_config\".\"epson_printer_ip\", \n  \"pos_config"
+"\".\"crm_team_id\", \n  \"pos_config\".\"down_payment_product_id\"\nFROM \"pos_config\"";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.id = 0;
							} else {
		                          
            row1.id = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.picking_type_id = 0;
							} else {
		                          
            row1.picking_type_id = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.journal_id = null;
							} else {
		                          
            row1.journal_id = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.journal_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.invoice_journal_id = null;
							} else {
		                          
            row1.invoice_journal_id = rs_tDBInput_1.getInt(5);
            if(rs_tDBInput_1.wasNull()){
                    row1.invoice_journal_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.iface_cashdrawer = null;
							} else {
	                         		
            row1.iface_cashdrawer = rs_tDBInput_1.getBoolean(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_cashdrawer = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.iface_electronic_scale = null;
							} else {
	                         		
            row1.iface_electronic_scale = rs_tDBInput_1.getBoolean(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_electronic_scale = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.iface_customer_facing_display_via_proxy = null;
							} else {
	                         		
            row1.iface_customer_facing_display_via_proxy = rs_tDBInput_1.getBoolean(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_customer_facing_display_via_proxy = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.iface_customer_facing_display_local = null;
							} else {
	                         		
            row1.iface_customer_facing_display_local = rs_tDBInput_1.getBoolean(9);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_customer_facing_display_local = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.iface_print_via_proxy = null;
							} else {
	                         		
            row1.iface_print_via_proxy = rs_tDBInput_1.getBoolean(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_print_via_proxy = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.iface_scan_via_proxy = null;
							} else {
	                         		
            row1.iface_scan_via_proxy = rs_tDBInput_1.getBoolean(11);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_scan_via_proxy = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.iface_big_scrollbars = null;
							} else {
	                         		
            row1.iface_big_scrollbars = rs_tDBInput_1.getBoolean(12);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_big_scrollbars = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.iface_orderline_customer_notes = null;
							} else {
	                         		
            row1.iface_orderline_customer_notes = rs_tDBInput_1.getBoolean(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_orderline_customer_notes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.iface_print_auto = null;
							} else {
	                         		
            row1.iface_print_auto = rs_tDBInput_1.getBoolean(14);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_print_auto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.iface_print_skip_screen = null;
							} else {
	                         		
            row1.iface_print_skip_screen = rs_tDBInput_1.getBoolean(15);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_print_skip_screen = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.iface_tax_included = null;
							} else {
	                         		
        	row1.iface_tax_included = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.iface_start_categ_id = null;
							} else {
		                          
            row1.iface_start_categ_id = rs_tDBInput_1.getInt(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_start_categ_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.iface_display_categ_images = null;
							} else {
	                         		
            row1.iface_display_categ_images = rs_tDBInput_1.getBoolean(18);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_display_categ_images = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.restrict_price_control = null;
							} else {
	                         		
            row1.restrict_price_control = rs_tDBInput_1.getBoolean(19);
            if(rs_tDBInput_1.wasNull()){
                    row1.restrict_price_control = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.set_maximum_difference = null;
							} else {
	                         		
            row1.set_maximum_difference = rs_tDBInput_1.getBoolean(20);
            if(rs_tDBInput_1.wasNull()){
                    row1.set_maximum_difference = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.receipt_header = null;
							} else {
	                         		
        	row1.receipt_header = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.receipt_footer = null;
							} else {
	                         		
        	row1.receipt_footer = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.proxy_ip = null;
							} else {
	                         		
        	row1.proxy_ip = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.active = null;
							} else {
	                         		
            row1.active = rs_tDBInput_1.getBoolean(24);
            if(rs_tDBInput_1.wasNull()){
                    row1.active = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.uuid = null;
							} else {
	                         		
        	row1.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.sequence_id = null;
							} else {
		                          
            row1.sequence_id = rs_tDBInput_1.getInt(26);
            if(rs_tDBInput_1.wasNull()){
                    row1.sequence_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.sequence_line_id = null;
							} else {
		                          
            row1.sequence_line_id = rs_tDBInput_1.getInt(27);
            if(rs_tDBInput_1.wasNull()){
                    row1.sequence_line_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.pricelist_id = 0;
							} else {
		                          
            row1.pricelist_id = rs_tDBInput_1.getInt(28);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.company_id = 0;
							} else {
		                          
            row1.company_id = rs_tDBInput_1.getInt(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.barcode_nomenclature_id = 0;
							} else {
		                          
            row1.barcode_nomenclature_id = rs_tDBInput_1.getInt(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.group_pos_manager_id = null;
							} else {
		                          
            row1.group_pos_manager_id = rs_tDBInput_1.getInt(31);
            if(rs_tDBInput_1.wasNull()){
                    row1.group_pos_manager_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.group_pos_user_id = null;
							} else {
		                          
            row1.group_pos_user_id = rs_tDBInput_1.getInt(32);
            if(rs_tDBInput_1.wasNull()){
                    row1.group_pos_user_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.iface_tipproduct = null;
							} else {
	                         		
            row1.iface_tipproduct = rs_tDBInput_1.getBoolean(33);
            if(rs_tDBInput_1.wasNull()){
                    row1.iface_tipproduct = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.tip_product_id = null;
							} else {
		                          
            row1.tip_product_id = rs_tDBInput_1.getInt(34);
            if(rs_tDBInput_1.wasNull()){
                    row1.tip_product_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.default_fiscal_position_id = null;
							} else {
		                          
            row1.default_fiscal_position_id = rs_tDBInput_1.getInt(35);
            if(rs_tDBInput_1.wasNull()){
                    row1.default_fiscal_position_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.use_pricelist = null;
							} else {
	                         		
            row1.use_pricelist = rs_tDBInput_1.getBoolean(36);
            if(rs_tDBInput_1.wasNull()){
                    row1.use_pricelist = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.tax_regime = null;
							} else {
	                         		
            row1.tax_regime = rs_tDBInput_1.getBoolean(37);
            if(rs_tDBInput_1.wasNull()){
                    row1.tax_regime = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.tax_regime_selection = null;
							} else {
	                         		
            row1.tax_regime_selection = rs_tDBInput_1.getBoolean(38);
            if(rs_tDBInput_1.wasNull()){
                    row1.tax_regime_selection = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.start_category = null;
							} else {
	                         		
            row1.start_category = rs_tDBInput_1.getBoolean(39);
            if(rs_tDBInput_1.wasNull()){
                    row1.start_category = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.limit_categories = null;
							} else {
	                         		
            row1.limit_categories = rs_tDBInput_1.getBoolean(40);
            if(rs_tDBInput_1.wasNull()){
                    row1.limit_categories = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.module_account = null;
							} else {
	                         		
            row1.module_account = rs_tDBInput_1.getBoolean(41);
            if(rs_tDBInput_1.wasNull()){
                    row1.module_account = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.module_pos_restaurant = null;
							} else {
	                         		
            row1.module_pos_restaurant = rs_tDBInput_1.getBoolean(42);
            if(rs_tDBInput_1.wasNull()){
                    row1.module_pos_restaurant = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.module_pos_discount = null;
							} else {
	                         		
            row1.module_pos_discount = rs_tDBInput_1.getBoolean(43);
            if(rs_tDBInput_1.wasNull()){
                    row1.module_pos_discount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.module_pos_loyalty = null;
							} else {
	                         		
            row1.module_pos_loyalty = rs_tDBInput_1.getBoolean(44);
            if(rs_tDBInput_1.wasNull()){
                    row1.module_pos_loyalty = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.module_pos_mercury = null;
							} else {
	                         		
            row1.module_pos_mercury = rs_tDBInput_1.getBoolean(45);
            if(rs_tDBInput_1.wasNull()){
                    row1.module_pos_mercury = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.product_configurator = null;
							} else {
	                         		
            row1.product_configurator = rs_tDBInput_1.getBoolean(46);
            if(rs_tDBInput_1.wasNull()){
                    row1.product_configurator = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.is_posbox = null;
							} else {
	                         		
            row1.is_posbox = rs_tDBInput_1.getBoolean(47);
            if(rs_tDBInput_1.wasNull()){
                    row1.is_posbox = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.is_header_or_footer = null;
							} else {
	                         		
            row1.is_header_or_footer = rs_tDBInput_1.getBoolean(48);
            if(rs_tDBInput_1.wasNull()){
                    row1.is_header_or_footer = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.module_pos_hr = null;
							} else {
	                         		
            row1.module_pos_hr = rs_tDBInput_1.getBoolean(49);
            if(rs_tDBInput_1.wasNull()){
                    row1.module_pos_hr = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.amount_authorized_diff = null;
							} else {
	                         		
            row1.amount_authorized_diff = rs_tDBInput_1.getDouble(50);
            if(rs_tDBInput_1.wasNull()){
                    row1.amount_authorized_diff = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.other_devices = null;
							} else {
	                         		
            row1.other_devices = rs_tDBInput_1.getBoolean(51);
            if(rs_tDBInput_1.wasNull()){
                    row1.other_devices = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.rounding_method = null;
							} else {
		                          
            row1.rounding_method = rs_tDBInput_1.getInt(52);
            if(rs_tDBInput_1.wasNull()){
                    row1.rounding_method = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.cash_rounding = null;
							} else {
	                         		
            row1.cash_rounding = rs_tDBInput_1.getBoolean(53);
            if(rs_tDBInput_1.wasNull()){
                    row1.cash_rounding = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.only_round_cash_method = null;
							} else {
	                         		
            row1.only_round_cash_method = rs_tDBInput_1.getBoolean(54);
            if(rs_tDBInput_1.wasNull()){
                    row1.only_round_cash_method = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.manual_discount = null;
							} else {
	                         		
            row1.manual_discount = rs_tDBInput_1.getBoolean(55);
            if(rs_tDBInput_1.wasNull()){
                    row1.manual_discount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.ship_later = null;
							} else {
	                         		
            row1.ship_later = rs_tDBInput_1.getBoolean(56);
            if(rs_tDBInput_1.wasNull()){
                    row1.ship_later = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.warehouse_id = null;
							} else {
		                          
            row1.warehouse_id = rs_tDBInput_1.getInt(57);
            if(rs_tDBInput_1.wasNull()){
                    row1.warehouse_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.route_id = null;
							} else {
		                          
            row1.route_id = rs_tDBInput_1.getInt(58);
            if(rs_tDBInput_1.wasNull()){
                    row1.route_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.picking_policy = null;
							} else {
	                         		
        	row1.picking_policy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.limited_products_loading = null;
							} else {
	                         		
            row1.limited_products_loading = rs_tDBInput_1.getBoolean(60);
            if(rs_tDBInput_1.wasNull()){
                    row1.limited_products_loading = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.limited_products_amount = null;
							} else {
		                          
            row1.limited_products_amount = rs_tDBInput_1.getInt(61);
            if(rs_tDBInput_1.wasNull()){
                    row1.limited_products_amount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.product_load_background = null;
							} else {
	                         		
            row1.product_load_background = rs_tDBInput_1.getBoolean(62);
            if(rs_tDBInput_1.wasNull()){
                    row1.product_load_background = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.limited_partners_loading = null;
							} else {
	                         		
            row1.limited_partners_loading = rs_tDBInput_1.getBoolean(63);
            if(rs_tDBInput_1.wasNull()){
                    row1.limited_partners_loading = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.limited_partners_amount = null;
							} else {
		                          
            row1.limited_partners_amount = rs_tDBInput_1.getInt(64);
            if(rs_tDBInput_1.wasNull()){
                    row1.limited_partners_amount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.partner_load_background = null;
							} else {
	                         		
            row1.partner_load_background = rs_tDBInput_1.getBoolean(65);
            if(rs_tDBInput_1.wasNull()){
                    row1.partner_load_background = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.create_uid = null;
							} else {
		                          
            row1.create_uid = rs_tDBInput_1.getInt(66);
            if(rs_tDBInput_1.wasNull()){
                    row1.create_uid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.create_date = null;
							} else {
										
			row1.create_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 67);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.write_uid = null;
							} else {
		                          
            row1.write_uid = rs_tDBInput_1.getInt(68);
            if(rs_tDBInput_1.wasNull()){
                    row1.write_uid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.write_date = null;
							} else {
										
			row1.write_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 69);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.epson_printer_ip = null;
							} else {
	                         		
        	row1.epson_printer_ip = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.crm_team_id = null;
							} else {
		                          
            row1.crm_team_id = rs_tDBInput_1.getInt(71);
            if(rs_tDBInput_1.wasNull()){
                    row1.crm_team_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.down_payment_product_id = null;
							} else {
		                          
            row1.down_payment_product_id = rs_tDBInput_1.getInt(72);
            if(rs_tDBInput_1.wasNull()){
                    row1.down_payment_product_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                        sb_tFileOutputDelimited_1.append(
                            row1.id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.picking_type_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.journal_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.journal_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.invoice_journal_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.invoice_journal_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_cashdrawer != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_cashdrawer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_electronic_scale != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_electronic_scale
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_customer_facing_display_via_proxy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_customer_facing_display_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_customer_facing_display_local != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_customer_facing_display_local
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_print_via_proxy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_print_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_scan_via_proxy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_scan_via_proxy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_big_scrollbars != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_big_scrollbars
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_orderline_customer_notes != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_orderline_customer_notes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_print_auto != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_print_auto
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_print_skip_screen != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_print_skip_screen
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_tax_included != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_tax_included
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_start_categ_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_start_categ_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_display_categ_images != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_display_categ_images
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.restrict_price_control != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.restrict_price_control
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.set_maximum_difference != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.set_maximum_difference
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.receipt_header != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.receipt_header
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.receipt_footer != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.receipt_footer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.proxy_ip != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.proxy_ip
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.active != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.active
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.uuid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.uuid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.sequence_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.sequence_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.sequence_line_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.sequence_line_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.pricelist_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.company_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row1.barcode_nomenclature_id
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.group_pos_manager_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.group_pos_manager_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.group_pos_user_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.group_pos_user_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.iface_tipproduct != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.iface_tipproduct
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.tip_product_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.tip_product_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.default_fiscal_position_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.default_fiscal_position_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.use_pricelist != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.use_pricelist
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.tax_regime != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.tax_regime
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.tax_regime_selection != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.tax_regime_selection
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.start_category != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.start_category
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.limit_categories != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.limit_categories
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.module_account != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.module_account
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.module_pos_restaurant != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.module_pos_restaurant
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.module_pos_discount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.module_pos_discount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.module_pos_loyalty != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.module_pos_loyalty
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.module_pos_mercury != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.module_pos_mercury
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.product_configurator != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.product_configurator
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.is_posbox != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.is_posbox
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.is_header_or_footer != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.is_header_or_footer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.module_pos_hr != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.module_pos_hr
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.amount_authorized_diff != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.amount_authorized_diff
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.other_devices != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.other_devices
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.rounding_method != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.rounding_method
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.cash_rounding != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.cash_rounding
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.only_round_cash_method != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.only_round_cash_method
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.manual_discount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.manual_discount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.ship_later != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.ship_later
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.warehouse_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.warehouse_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.route_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.route_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.picking_policy != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.picking_policy
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.limited_products_loading != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.limited_products_loading
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.limited_products_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.limited_products_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.product_load_background != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.product_load_background
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.limited_partners_loading != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.limited_partners_loading
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.limited_partners_amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.limited_partners_amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.partner_load_background != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.partner_load_background
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.create_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.create_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.create_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.create_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.write_uid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.write_uid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.write_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row1.write_date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.epson_printer_ip != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.epson_printer_ip
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.crm_team_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.crm_team_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row1.down_payment_product_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row1.down_payment_product_id
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_3Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_3", false);
		start_Hash.put("tS3Connection_3", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_3";

	
		int tos_count_tS3Connection_3 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:xxDCjXeswEnpar0/nRKwW8tKL+fCQx0GmI7LKHLFgJd049UzzQmxoel+aPlcGq6+aNfR+VT81rsw0kzaPUFD3/m2tDE=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_3 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PS4OCUVYGK",decryptedPassword_tS3Connection_3);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_3 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_3);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_3 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_3.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_3 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_3 = false;
        final String regionEndpoint_tS3Connection_3 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_3 = false;
        final boolean enablePathStyleAccess_tS3Connection_3 = false;
        
        if(useRegionEndpoint_tS3Connection_3 && regionEndpoint_tS3Connection_3 != null && !regionEndpoint_tS3Connection_3.isEmpty()) {
                builder_tS3Connection_3.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_3,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_3.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_3) {
            builder_tS3Connection_3.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_3.withCredentials(credentialsProvider_tS3Connection_3).withClientConfiguration(cc_tS3Connection_3);
            
        if(useRegionEndpoint_tS3Connection_3 && enablePathStyleAccess_tS3Connection_3) {
            builder_tS3Connection_3.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_3 = builder_tS3Connection_3.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_3.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_3",conn_tS3Connection_3);
	

 



/**
 * [tS3Connection_3 begin ] stop
 */
	
	/**
	 * [tS3Connection_3 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_3";

	

 


	tos_count_tS3Connection_3++;

/**
 * [tS3Connection_3 main ] stop
 */
	
	/**
	 * [tS3Connection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_3";

	

 



/**
 * [tS3Connection_3 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_3";

	

 



/**
 * [tS3Connection_3 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_3 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_3";

	

 

ok_Hash.put("tS3Connection_3", true);
end_Hash.put("tS3Connection_3", System.currentTimeMillis());




/**
 * [tS3Connection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tS3Put_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_3 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_3";

	

 



/**
 * [tS3Connection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_3_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_3");
		
	String key_tS3Put_1 = "posConfig_20221026.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/posConfig_20221026.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/raw", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("libreriapacifico/raw", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("libreriapacifico/raw")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("libreriapacifico/raw", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final posConfig_Job posConfig_JobClass = new posConfig_Job();

        int exitCode = posConfig_JobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = posConfig_Job.class.getClassLoader().getResourceAsStream("pacifico/posconfig_job_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = posConfig_Job.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : posConfig_Job");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_3 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_3");
	    if(conn_tS3Connection_3 !=null){
			conn_tS3Connection_3.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_3", globalMap.get("conn_tS3Connection_3"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     192616 characters generated by Talend Open Studio for Data Integration 
 *     on the October 26, 2022 at 11:10:02 PM CST
 ************************************************************************************************/